/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2023-04-28 08:27:28.666016
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include "Python.h"
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
// #define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
// IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan std::isnan
#endif
#ifndef isinf
#define isinf std::isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91;
x0=IKcos(j[0]);
x1=IKsin(j[2]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[1]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKcos(j[3]);
x8=IKcos(j[1]);
x9=IKsin(j[3]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[6]);
x13=IKcos(j[5]);
x14=((6.3999948800041e-7)*x7);
x15=((0.000799999360000512)*x6);
x16=((0.000799999360000512)*x11);
x17=((6.3999948800041e-7)*x5);
x18=((0.999998720001024)*x7);
x19=((0.999999680000256)*x13);
x20=((0.00159999872000102)*x5);
x21=((6.3999948800041e-7)*x6);
x22=((0.00159999872000102)*x13);
x23=((0.00159999872000102)*x7);
x24=((0.00159999872000102)*x11);
x25=((0.000799999360000512)*x5);
x26=((6.3999948800041e-7)*x13);
x27=((0.999998720001024)*x9);
x28=((1.0)*x7);
x29=((1.0)*x4);
x30=((0.99999840000128)*x13);
x31=((0.99999840000128)*x11);
x32=((0.00159999872000102)*x6);
x33=((0.000799999360000512)*x13);
x34=((6.3999948800041e-7)*x11);
x35=(x0*x8);
x36=((-0.00159999872000102)*x5);
x37=((-0.999999680000256)*x6);
x38=(x1*x8);
x39=(x2*x8);
x40=((-0.00159999872000102)*x6);
x41=(x4*x9);
x42=(x4*x7);
x43=(x1*x3);
x44=((-0.999998720001024)*x5);
x45=(x0*x1);
x46=(x3*x8);
x47=((-0.999999680000256)*x5);
x48=(x0*x2);
x49=((-0.000799999360000512)*x6);
x50=(x2*x3);
x51=((-0.000799999360000512)*x5);
x52=((-0.99999840000128)*x5);
x53=((-1.0)*x7);
x54=((-0.99999840000128)*x6);
x55=((1.0)*x35*x9);
x56=(x25*x38);
x57=(x48+((x4*x43)));
x58=((((-1.0)*x29*x50))+x45);
x59=(x43+((x4*x48)));
x60=(x50+(((-1.0)*x29*x45)));
x61=(x41+((x39*x7)));
x62=(((x39*x9))+(((-1.0)*x28*x4)));
x63=(x58*x9);
x64=((((-1.0)*x29*x9))+(((-1.0)*x28*x39)));
x65=(x59*x9);
x66=(x57*x6);
x67=(x5*x60);
x68=(x11*x62);
x69=(x6*x60);
x70=(x5*x61);
x71=(x6*x64);
x72=(((x46*x9))+((x58*x7)));
x73=(x63+(((-1.0)*x28*x46)));
x74=(((x59*x7))+(((-1.0)*x55)));
x75=(((x35*x7))+x65);
x76=((((-1.0)*x38*x6))+x70);
x77=(x63+((x46*x53)));
x78=((((-1.0)*x28*x59))+x55);
x79=(x11*x75);
x80=(x5*x72);
x81=(x13*x76);
x82=(((x53*x58))+(((-1.0)*x46*x9)));
x83=(x6*x78);
x84=(x6*x82);
x85=(x66+x80);
x86=(((x5*x74))+x69);
x87=(((x16*x62))+((x33*x76)));
x88=(x13*x85);
x89=(x13*x86);
x90=(x33*x85);
x91=(((x16*x75))+((x33*x86)));
eerot[0]=(((x10*(((((-0.999999680000256)*x11*x73))+(((-1.0)*x19*x85))))))+((x13*((((x14*x46))+(((-6.3999948800041e-7)*x63))))))+((x10*((((x49*x82))+((x51*x57))))))+((x11*((((x17*x72))+((x21*x57))))))+((x12*((((x16*x73))+x90))))+((x12*((((x37*x82))+((x47*x57)))))));
eerot[1]=(((x10*((((x16*x77))+x90))))+((x12*((((x30*x85))+((x31*x77))))))+((x13*((((x23*x46))+(((-0.00159999872000102)*x63))))))+((x10*((((x54*x82))+((x52*x57))))))+((x11*((((x20*x72))+((x32*x57))))))+((x12*((((x15*x82))+((x25*x57)))))));
eerot[2]=(((x13*(((((-1.0)*x18*x46))+((x27*x58))))))+((x10*((((x36*x57))+((x40*x82))))))+((x11*(((((-0.999998720001024)*x66))+((x44*x72))))))+((x12*((((x17*x57))+((x21*x82))))))+((x10*((((x26*x85))+((x34*x77))))))+((x12*((((x22*x85))+((x24*x77)))))));
eetrans[0]=((0.15505)+(((0.3115)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.125)*(IKsin(j[0]))))+(((0.02)*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[3]))))+(((((((-0.312)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.312)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((0.015)*(IKcos(j[0]))))+(((((((((((0.00031853)*(((((1.0)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.00031853)*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((0.00031853)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.00031853)*(IKcos(j[0]))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[6]))))+(((0.312)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[0]))))+(((((((((((0.00031853)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[0]))))+(((-0.00031853)*(((((IKcos(j[0]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((-0.00031853)*(((((IKcos(j[0]))*(IKcos(j[2]))))+(((IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.00031853)*(((((((((IKcos(j[0]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((((((-0.02)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.02)*(IKcos(j[0]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((((((-2.5e-7)*(((((1.0)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((2.5e-7)*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-2.5e-7)*(IKcos(j[0]))*(IKcos(j[2]))))+(((-2.5e-7)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((-0.02)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.02)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((((((2.5e-7)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[0]))))+(((-2.5e-7)*(((((IKcos(j[0]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((-2.5e-7)*(((((((((IKcos(j[0]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-2.5e-7)*(((((IKcos(j[0]))*(IKcos(j[2]))))+(((IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((((((0.26699975)*(IKcos(j[0]))*(IKcos(j[2]))))+(((0.26699975)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((0.26699975)*(((((IKcos(j[0]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((0.26699975)*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((((((0.26699975)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.26699975)*(IKcos(j[0]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.26699975)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[0]))))))*(IKcos(j[5])))));
eerot[3]=(((x12*x91))+((x11*((((x17*x74))+((x21*x60))))))+((x12*((((x37*x78))+((x47*x60))))))+((x13*(((((-1.0)*x14*x35))+(((-6.3999948800041e-7)*x65))))))+((x10*((((x49*x78))+((x51*x60))))))+((x10*(((((-0.999999680000256)*x79))+(((-1.0)*x19*x86)))))));
eerot[4]=(((x10*((((x54*x78))+((x52*x60))))))+((x10*x91))+((x12*((((x30*x86))+((x31*x75))))))+((x12*((((x25*x60))+((x15*x78))))))+((x13*(((((-0.00159999872000102)*x65))+(((-1.0)*x23*x35))))))+((x11*((((x20*x74))+((x32*x60)))))));
eerot[5]=(((x12*((((x22*x86))+((x24*x75))))))+((x12*((((x21*x78))+((x17*x60))))))+((x11*(((((-0.999998720001024)*x69))+((x44*x74))))))+((x10*((((x26*x86))+((x34*x75))))))+((x10*((((x40*x78))+((x36*x60))))))+((x13*((((x27*x59))+((x18*x35)))))));
eetrans[1]=((0.014)+(((((((((((-0.26699975)*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[3]))))+(((0.26699975)*(((((IKsin(j[0]))*(IKsin(j[2]))))+(((IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-0.26699975)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.26699975)*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((((((-0.00031853)*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[3]))))+(((-0.00031853)*(((((IKsin(j[0]))*(IKsin(j[2]))))+(((IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((-0.00031853)*(((((IKcos(j[2]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.00031853)*(((((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[3]))))+(((((((IKsin(j[0]))*(IKsin(j[2]))))+(((IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((((((((((2.5e-7)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-2.5e-7)*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[4]))))+(((((((-2.5e-7)*(((((-1.0)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-2.5e-7)*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))+(((((((0.02)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.02)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-0.02)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((((((((((0.00031853)*(((((-1.0)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((0.00031853)*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.00031853)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.00031853)*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[4]))))))*(IKsin(j[6]))))+(((-0.02)*(IKsin(j[0]))*(IKsin(j[2]))))+(((((((-0.312)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.312)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-0.312)*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[3]))))+(((((((((((-2.5e-7)*(((((IKcos(j[2]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-2.5e-7)*(((((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[3]))))+(((((((IKsin(j[0]))*(IKsin(j[2]))))+(((IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-2.5e-7)*(((((IKsin(j[0]))*(IKsin(j[2]))))+(((IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-2.5e-7)*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((0.015)*(IKsin(j[0]))))+(((-0.125)*(IKcos(j[0]))))+(((-0.02)*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[3]))))+(((-0.3115)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((-0.26699975)*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[3]))))+(((((((-0.26699975)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.26699975)*(IKsin(j[0]))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5])))));
eerot[6]=(((x11*((((x17*x61))+(((-1.0)*x21*x38))))))+((x12*x87))+((x13*((((x14*x4))+(((-6.3999948800041e-7)*x39*x9))))))+((x12*(((((0.999999680000256)*x38*x5))+(((-0.999999680000256)*x71))))))+((x10*((x56+((x49*x64))))))+((x10*(((((-0.999999680000256)*x81))+(((-0.999999680000256)*x68)))))));
eerot[7]=(((x11*((((x20*x61))+(((-1.0)*x32*x38))))))+((x10*x87))+((x13*(((((-0.00159999872000102)*x39*x9))+((x23*x4))))))+((x12*((((x30*x76))+((x31*x62))))))+((x10*(((((0.99999840000128)*x38*x5))+((x54*x64))))))+((x12*((((x15*x64))+(((-1.0)*x56)))))));
eerot[8]=(((x12*((((x24*x62))+((x22*x76))))))+((x11*(((((0.999998720001024)*x38*x6))+(((-0.999998720001024)*x70))))))+((x10*((((x34*x62))+((x26*x76))))))+((x13*((((x27*x39))+(((-1.0)*x18*x4))))))+((x12*(((((-6.3999948800041e-7)*x38*x5))+((x21*x64))))))+((x10*((((x20*x38))+(((-1.0)*x32*x64)))))));
IkReal x92=(x39*x9);
IkReal x93=(x38*x5);
IkReal x94=((0.02)*x39);
eetrans[2]=((-0.182)+(((-0.312)*x92))+(((0.312)*x42))+((x10*(((((0.00031853)*x71))+(((-0.00031853)*x93))))))+((x11*(((((-0.26699975)*x38*x6))+(((0.26699975)*x70))))))+(((0.3115)*x4))+((x13*(((((-0.26699975)*x92))+(((0.26699975)*x42))))))+(((0.02)*x41))+((x12*(((((2.5e-7)*x93))+(((-2.5e-7)*x71))))))+((x12*(((((-0.00031853)*x81))+(((-0.00031853)*x68))))))+(((-1.0)*x94))+((x7*x94))+((x10*(((((-2.5e-7)*x68))+(((-2.5e-7)*x81)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j3,cj3,sj3,htj3,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij3[2], _nj3;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j3=pfree[0]; cj3=cos(pfree[0]); sj3=sin(pfree[0]), htj3=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((0.000799999360000512)*r01))+(((6.3999948800041e-7)*r02))+(((-0.999999680000256)*r00)));
new_r01=((((0.00159999872000102)*r02))+(((0.000799999360000512)*r00))+(((0.99999840000128)*r01)));
new_r02=((((0.00159999872000102)*r01))+(((-0.999998720001024)*r02))+(((6.3999948800041e-7)*r00)));
new_px=((-0.15505)+(((0.266999917888346)*r02))+px+(((-1.66055827155338e-7)*r00))+(((-0.000108669567888346)*r01)));
new_r10=((((0.000799999360000512)*r11))+(((6.3999948800041e-7)*r12))+(((-0.999999680000256)*r10)));
new_r11=((((0.00159999872000102)*r12))+(((0.000799999360000512)*r10))+(((0.99999840000128)*r11)));
new_r12=((((0.00159999872000102)*r11))+(((6.3999948800041e-7)*r10))+(((-0.999998720001024)*r12)));
new_py=((-0.014)+(((0.266999917888346)*r12))+py+(((-0.000108669567888346)*r11))+(((-1.66055827155338e-7)*r10)));
new_r20=((((0.000799999360000512)*r21))+(((6.3999948800041e-7)*r22))+(((-0.999999680000256)*r20)));
new_r21=((((0.99999840000128)*r21))+(((0.000799999360000512)*r20))+(((0.00159999872000102)*r22)));
new_r22=((((-0.999998720001024)*r22))+(((0.00159999872000102)*r21))+(((6.3999948800041e-7)*r20)));
new_pz=((0.182)+(((-0.000108669567888346)*r21))+pz+(((-1.66055827155338e-7)*r20))+(((0.266999917888346)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x95=((1.0)*px);
IkReal x96=((1.0)*pz);
IkReal x97=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x97))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x96)));
rxp0_2=((((-1.0)*r10*x95))+((py*r00)));
rxp1_0=((((-1.0)*r21*x97))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x96)));
rxp1_2=((((-1.0)*r11*x95))+((py*r01)));
rxp2_0=((((-1.0)*r22*x97))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x96)));
rxp2_2=((((-1.0)*r12*x95))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x98=((0.03)*px);
IkReal x99=((0.04)*sj3);
IkReal x100=((0.25)*py);
IkReal x101=((1.0)*pp);
IkReal x102=((-0.015)+x99);
IkReal x103=(x100+x101);
IkReal x104=(x102+px);
IkReal x105=((((0.5)*px))+(((0.06)*py)));
IkReal x106=(x101+x98);
IkReal x107=(x102+(((-1.0)*px)));
IkReal x108=((0.37290225)+(((-1.0)*x103))+x98);
IkReal x109=((-0.01424975)+(((-1.0)*x103))+x98);
IkReal x110=((0.37290225)+(((-1.0)*x106))+x100);
IkReal x111=((-0.01424975)+(((-1.0)*x106))+x100);
IkReal gconst0=x104;
IkReal gconst1=x108;
IkReal gconst2=x109;
IkReal gconst3=x104;
IkReal gconst4=x108;
IkReal gconst5=x109;
IkReal gconst6=x105;
IkReal gconst7=x105;
IkReal gconst8=x105;
IkReal gconst9=x105;
IkReal gconst10=x107;
IkReal gconst11=x110;
IkReal gconst12=x111;
IkReal gconst13=x107;
IkReal gconst14=x110;
IkReal gconst15=x111;
IkReal x112=px*px;
IkReal x113=sj3*sj3;
IkReal x114=((7.4640432e-5)*py);
IkReal x115=(gconst6*px);
IkReal x116=(gconst0*gconst5);
IkReal x117=(gconst12*gconst15);
IkReal x118=((0.06)*py);
IkReal x119=(gconst13*gconst14);
IkReal x120=((0.015)*gconst7);
IkReal x121=(gconst11*py);
IkReal x122=(gconst2*sj3);
IkReal x123=((0.03112512)*px);
IkReal x124=((0.03)*gconst15);
IkReal x125=(gconst4*gconst7);
IkReal x126=(gconst2*gconst8);
IkReal x127=((0.03)*px);
IkReal x128=(gconst15*px);
IkReal x129=(gconst14*py);
IkReal x130=((0.06225024)*sj3);
IkReal x131=((2.0)*py);
IkReal x132=((0.0049760288)*py);
IkReal x133=(gconst13*gconst8);
IkReal x134=((0.015)*gconst9);
IkReal x135=(gconst10*gconst11);
IkReal x136=(gconst0*gconst1);
IkReal x137=(gconst12*px);
IkReal x138=(gconst2*gconst9);
IkReal x139=(gconst10*gconst15);
IkReal x140=(gconst9*px);
IkReal x141=(gconst3*px);
IkReal x142=((0.015)*gconst6);
IkReal x143=(gconst2*gconst4);
IkReal x144=(gconst12*sj3);
IkReal x145=(gconst2*gconst5);
IkReal x146=(gconst7*px);
IkReal x147=((0.03)*py);
IkReal x148=(gconst12*gconst9);
IkReal x149=(gconst1*gconst5);
IkReal x150=((0.0024880144)*px);
IkReal x151=((0.000225)*gconst7);
IkReal x152=(gconst7*sj3);
IkReal x153=((1.0)*gconst6);
IkReal x154=(gconst3*gconst4);
IkReal x155=((0.015)*gconst12);
IkReal x156=(gconst10*gconst14);
IkReal x157=((0.03112512)*sj3);
IkReal x158=((0.0004668768)*x152);
IkReal x159=(px*x132);
IkReal x160=((0.389376)*x113);
IkReal x161=((1.0)*x135);
IkReal x162=(gconst3*x143);
IkReal x163=((1.0)*x112);
IkReal x164=(gconst8*x157);
IkReal x165=((4.0)*px*py);
IkReal x166=(x123*x152);
IkReal x167=(gconst7*x163);
op[0]=((((-1.0)*x119*x137))+(((-1.0)*x128*x161))+(((-1.0)*gconst12*gconst14*x160))+(((-1.0)*x123*x144))+(((-1.0)*x117*x127))+(((-0.015)*gconst15*x135))+(((-0.000225)*x117))+((x156*x157))+(((-1.0)*x117*x163))+(((3.7320216e-5)*gconst10))+(((-1.0)*x119*x161))+(((-1.0)*x119*x155))+((gconst10*x150))+(((-0.0004668768)*x144)));
op[1]=(((gconst10*x164))+(((-1.0)*x119*x120))+(((-1.0)*gconst14*gconst7*x160))+(((-1.0)*gconst10*x119*x153))+(((-1.0)*x115*x139))+(((-1.0)*x158))+(((-1.0)*x166))+(((-1.0)*x133*x161))+((x129*x130))+(((2.0)*x121*x139))+(((-2.0)*x121*x156))+(((-1.0)*x134*x135))+((gconst12*x119*x131))+(((-1.0)*x133*x155))+(((-2.0)*x121*x128))+(((-1.0)*x140*x161))+((x117*x165))+((gconst12*py*x130))+(((-1.0)*x124*x146))+(((-2.0)*x119*x121))+(((-1.0)*x139*x142))+x159+x114+(((-2.0)*x129*x137))+(((-1.0)*gconst10*x132))+(((-1.0)*x121*x124))+(((-1.0)*gconst15*x151))+(((-1.0)*x133*x137))+(((-1.0)*gconst15*x167))+(((-1.0)*x148*x163))+(((-0.03)*gconst12*x129))+(((-1.0)*x119*x146))+(((-0.000225)*x148))+(((-1.0)*gconst12*gconst8*x160))+((x117*x118))+(((-1.0)*x127*x148)));
op[2]=((((-0.015)*gconst13*gconst14*gconst2))+(((-0.0014006304)*gconst12*sj3))+((gconst10*gconst11*gconst15*px))+(((-0.000225)*gconst15*gconst2))+(((-0.0004668768)*gconst2*sj3))+(((-0.015)*gconst1*gconst10*gconst15))+(((-4.0)*gconst11*gconst14*(py*py)))+(((-0.000225)*gconst12*gconst5))+(((-4.0)*gconst12*gconst15*(py*py)))+(((-0.389376)*gconst12*gconst4*(sj3*sj3)))+(((-1.0)*gconst0*gconst11*gconst15*px))+(((-0.389376)*gconst7*gconst8*(sj3*sj3)))+(((-2.0)*gconst15*gconst6*px*py))+(((-0.015)*gconst10*gconst11*gconst15))+(((-1.0)*gconst1*gconst10*gconst13*gconst14))+(((-0.000225)*gconst7*gconst9))+(((-0.03)*gconst12*gconst8*py))+(((4.0)*gconst12*gconst9*px*py))+(((-0.015)*gconst13*gconst7*gconst8))+(((-0.03)*gconst7*gconst9*px))+(((-2.0)*gconst10*gconst14*gconst6*py))+(((-1.0)*gconst10*gconst11*gconst14*gconst3))+(((2.0)*gconst12*gconst15*(px*px)))+(((-1.0)*gconst10*gconst11*gconst5*px))+(((-1.0)*gconst10*gconst13*gconst6*gconst8))+(((0.03112512)*gconst0*gconst14*sj3))+(((0.000111960648)*gconst10))+(((-0.03)*gconst15*gconst2*px))+(((-2.0)*gconst14*gconst7*px*py))+(((0.0024880144)*gconst10*px))+(((-0.03)*gconst14*gconst7*py))+(((-0.015)*gconst12*gconst13*gconst14))+(((-0.03)*gconst11*gconst9*py))+(((-2.0)*gconst10*gconst11*gconst8*py))+(((4.0)*gconst11*gconst15*(py*py)))+(((-0.015)*gconst10*gconst6*gconst9))+(((-1.0)*gconst13*gconst7*gconst8*px))+(((-1.0)*gconst7*gconst9*(px*px)))+(((-2.0)*gconst12*gconst8*px*py))+(((-1.0)*gconst13*gconst14*gconst2*px))+(((-2.0)*gconst13*gconst14*gconst6*py))+(((2.0)*gconst10*gconst11*gconst9*py))+(((-2.0)*gconst11*gconst9*px*py))+(((-0.015)*gconst12*gconst14*gconst3))+(((-2.0)*gconst11*gconst13*gconst8*py))+(((-1.0)*gconst15*gconst2*(px*px)))+(((4.0)*gconst15*gconst7*px*py))+(((0.06225024)*gconst7*py*sj3))+(((-1.0)*gconst12*gconst13*gconst4*px))+(((0.0024880144)*gconst0*px))+(((-1.0)*gconst10*gconst6*gconst9*px))+(((-1.0)*gconst12*gconst5*(px*px)))+(((-0.0099520576)*(py*py)))+((gconst12*gconst13*gconst14*px))+(((-0.389376)*gconst14*gconst2*(sj3*sj3)))+(((2.0)*gconst12*gconst13*gconst8*py))+(((0.03112512)*gconst10*gconst4*sj3))+(((-0.03)*gconst15*gconst6*py))+(((4.0)*gconst12*gconst14*(py*py)))+(((-0.03112512)*gconst12*px*sj3))+(((-0.015)*gconst10*gconst11*gconst5))+(((0.06225024)*gconst10*gconst14*sj3))+(((2.0)*gconst13*gconst14*gconst7*py))+(((-0.015)*gconst0*gconst11*gconst15))+(((-1.0)*gconst12*gconst14*gconst3*px))+(((-0.015)*gconst12*gconst13*gconst4))+(((-0.03)*gconst12*gconst5*px))+(((-0.03112512)*gconst2*px*sj3))+(((-0.00045)*gconst12*gconst15))+(((-1.0)*gconst10*gconst11*gconst13*gconst4))+(((-0.778752)*gconst12*gconst14*(sj3*sj3)))+(((0.06)*gconst12*gconst9*py))+(((-1.0)*gconst1*gconst10*gconst15*px))+(((-1.0)*gconst0*gconst11*gconst13*gconst14))+(((3.7320216e-5)*gconst0))+(((2.0)*gconst10*gconst15*gconst6*py))+(((0.06)*gconst15*gconst7*py))+(((0.06225024)*gconst8*py*sj3)));
op[3]=((((-2.0)*gconst6*gconst9*px*py))+(((-0.015)*gconst13*gconst14*gconst7))+(((-0.00045)*gconst12*gconst9))+(((2.0)*gconst15*gconst7*(px*px)))+(((-4.0)*gconst12*gconst15*px*py))+(((-1.0)*gconst14*gconst3*gconst7*px))+(((-0.000225)*gconst2*gconst9))+(((2.0)*gconst12*gconst14*gconst3*py))+(((0.06225024)*gconst10*gconst8*sj3))+(((-4.0)*gconst11*gconst8*(py*py)))+(((-0.03)*gconst7*gconst8*py))+(((-0.03112512)*gconst7*px*sj3))+(((-0.015)*gconst0*gconst15*gconst6))+(((-1.0)*gconst12*gconst3*gconst8*px))+((gconst10*gconst11*gconst9*px))+(((2.0)*gconst10*gconst11*gconst5*py))+(((-2.0)*gconst7*gconst8*px*py))+(((4.0)*gconst14*gconst7*(py*py)))+(((-0.0014006304)*gconst7*sj3))+(((-0.000225)*gconst5*gconst7))+(((-0.03)*gconst12*gconst14*py))+(((-1.0)*gconst1*gconst10*gconst13*gconst8))+(((-2.0)*gconst1*gconst15*px*py))+(((-2.0)*gconst10*gconst6*gconst8*py))+(((-0.015)*gconst12*gconst3*gconst8))+(((-2.0)*gconst11*gconst14*gconst3*py))+(((-0.0099520576)*gconst10*py))+(((2.0)*gconst0*gconst11*gconst15*py))+(((-2.0)*gconst14*gconst2*px*py))+(((-0.015)*gconst13*gconst4*gconst7))+(((2.0)*gconst12*gconst9*(px*px)))+(((-0.03)*gconst2*gconst9*px))+(((-0.015)*gconst10*gconst15*gconst6))+(((-1.0)*gconst0*gconst11*gconst9*px))+(((0.12450048)*gconst14*py*sj3))+(((0.06225024)*gconst4*py*sj3))+(((0.12450048)*gconst12*py*sj3))+(((0.000223921296)*py))+((gconst12*gconst13*gconst8*px))+(((-2.0)*gconst10*gconst11*gconst4*py))+(((-1.0)*gconst10*gconst13*gconst4*gconst6))+(((-2.0)*gconst12*gconst4*px*py))+(((-1.0)*gconst13*gconst2*gconst8*px))+(((4.0)*gconst7*gconst9*px*py))+(((-1.0)*gconst10*gconst5*gconst6*px))+(((-2.0)*gconst1*gconst10*gconst14*py))+(((4.0)*gconst11*gconst9*(py*py)))+(((-1.0)*gconst10*gconst14*gconst3*gconst6))+(((-1.0)*gconst1*gconst10*gconst9*px))+(((-0.778752)*gconst14*gconst7*(sj3*sj3)))+(((0.06225024)*gconst2*py*sj3))+(((-0.03)*gconst5*gconst7*px))+(((0.06)*gconst12*gconst15*py))+(((-4.0)*gconst14*gconst6*(py*py)))+(((-0.015)*gconst13*gconst2*gconst8))+(((-2.0)*gconst11*gconst5*px*py))+(((-1.0)*gconst10*gconst11*gconst3*gconst8))+(((-2.0)*gconst1*gconst13*gconst14*py))+(((-0.389376)*gconst4*gconst7*(sj3*sj3)))+((gconst10*gconst15*gconst6*px))+(((4.0)*gconst12*gconst5*px*py))+(((-0.778752)*gconst12*gconst8*(sj3*sj3)))+(((-0.015)*gconst10*gconst5*gconst6))+(((-1.0)*gconst0*gconst15*gconst6*px))+(((-2.0)*gconst11*gconst13*gconst4*py))+(((-0.03)*gconst11*gconst5*py))+(((-1.0)*gconst13*gconst4*gconst7*px))+(((-0.03)*gconst11*gconst15*py))+(((2.0)*gconst13*gconst14*gconst2*py))+(((-4.0)*gconst12*gconst9*(py*py)))+(((2.0)*gconst10*gconst6*gconst9*py))+(((-1.0)*gconst5*gconst7*(px*px)))+(((2.0)*gconst1*gconst10*gconst15*py))+(((-0.015)*gconst0*gconst11*gconst9))+(((-1.0)*gconst2*gconst9*(px*px)))+(((-0.015)*gconst1*gconst10*gconst9))+(((-0.03)*gconst6*gconst9*py))+(((4.0)*gconst15*gconst2*px*py))+(((0.03112512)*gconst0*gconst8*sj3))+(((2.0)*gconst12*gconst14*px*py))+(((-0.015)*gconst10*gconst11*gconst9))+(((-0.389376)*gconst2*gconst8*(sj3*sj3)))+(((2.0)*gconst13*gconst7*gconst8*py))+(((0.06)*gconst7*gconst9*py))+(((-0.015)*gconst12*gconst13*gconst8))+(((4.0)*gconst15*gconst6*(py*py)))+(((0.0049760288)*px*py))+(((-0.03)*gconst14*gconst2*py))+(((-2.0)*gconst13*gconst6*gconst8*py))+(((-2.0)*gconst0*gconst11*gconst14*py))+(((2.0)*gconst12*gconst13*gconst4*py))+(((-0.0049760288)*gconst0*py))+(((-0.03)*gconst1*gconst15*py))+(((-0.03)*gconst12*gconst4*py))+(((2.0)*gconst11*gconst15*px*py))+(((-0.015)*gconst14*gconst3*gconst7))+(((-1.0)*gconst0*gconst13*gconst14*gconst6))+(((-0.00045)*gconst15*gconst7))+(((-1.0)*gconst0*gconst11*gconst13*gconst8))+((gconst13*gconst14*gconst7*px))+(((0.06)*gconst15*gconst2*py))+(((0.06)*gconst12*gconst5*py))+(((4.0)*gconst12*gconst8*(py*py)))+(((-4.0)*gconst15*gconst7*(py*py))));
op[4]=((((-0.778752)*gconst14*gconst2*(sj3*sj3)))+(((-0.015)*gconst13*gconst14*gconst2))+(((2.0)*gconst10*gconst5*gconst6*py))+(((-0.00045)*gconst12*gconst5))+(((-0.000225)*gconst2*gconst5))+(((-0.0014006304)*gconst12*sj3))+(((-2.0)*gconst10*gconst4*gconst6*py))+(((-1.0)*gconst1*gconst10*gconst5*px))+(((4.0)*gconst12*gconst4*(py*py)))+(((-1.0)*gconst0*gconst13*gconst6*gconst8))+(((0.12450048)*gconst8*py*sj3))+(((-0.015)*gconst0*gconst6*gconst9))+(((4.0)*gconst14*gconst2*(py*py)))+(((-0.015)*gconst0*gconst1*gconst15))+(((-4.0)*gconst15*gconst7*px*py))+(((4.0)*gconst11*gconst5*(py*py)))+(((-0.015)*gconst1*gconst10*gconst15))+(((4.0)*gconst7*gconst8*(py*py)))+(((-2.0)*gconst5*gconst6*px*py))+(((-2.0)*gconst13*gconst4*gconst6*py))+(((-4.0)*gconst15*gconst2*(py*py)))+(((-1.0)*gconst0*gconst11*gconst5*px))+(((2.0)*gconst7*gconst9*(px*px)))+(((2.0)*gconst13*gconst2*gconst8*py))+(((-1.0)*gconst1*gconst10*gconst13*gconst4))+(((2.0)*gconst0*gconst11*gconst9*py))+(((-0.015)*gconst12*gconst3*gconst4))+(((-0.03)*gconst1*gconst9*py))+(((-1.0)*gconst12*gconst3*gconst4*px))+(((2.0)*gconst0*gconst15*gconst6*py))+(((-0.03)*gconst12*gconst8*py))+(((-0.015)*gconst13*gconst7*gconst8))+(((0.12450048)*gconst7*py*sj3))+(((2.0)*gconst12*gconst3*gconst8*py))+(((4.0)*gconst5*gconst7*px*py))+(((0.03)*gconst12*gconst15*px))+(((-4.0)*gconst12*gconst5*(py*py)))+(((-1.0)*gconst10*gconst3*gconst6*gconst8))+(((2.0)*gconst12*gconst5*(px*px)))+(((-1.0)*gconst14*gconst2*gconst3*px))+(((-0.03)*gconst2*gconst5*px))+(((-0.0199041152)*(py*py)))+(((0.000111960648)*gconst10))+(((-2.0)*gconst11*gconst3*gconst8*py))+(((-0.015)*gconst13*gconst2*gconst4))+(((-0.03)*gconst14*gconst7*py))+(((-2.0)*gconst1*gconst10*gconst8*py))+(((-1.0)*gconst10*gconst11*gconst3*gconst4))+(((-0.03)*gconst11*gconst9*py))+(((-1.0)*gconst13*gconst2*gconst4*px))+((gconst12*gconst13*gconst4*px))+(((0.06)*gconst5*gconst7*py))+(((-0.03)*gconst4*gconst7*py))+(((-0.03)*gconst5*gconst6*py))+(((-0.03)*gconst2*gconst8*py))+((gconst10*gconst6*gconst9*px))+(((-0.015)*gconst10*gconst6*gconst9))+(((-0.0024880144)*gconst10*px))+(((-0.000225)*gconst12*gconst15))+(((-1.0)*gconst0*gconst6*gconst9*px))+(((-0.389376)*gconst2*gconst4*(sj3*sj3)))+(((2.0)*gconst11*gconst9*px*py))+(((2.0)*gconst14*gconst7*px*py))+(((-2.0)*gconst1*gconst9*px*py))+(((4.0)*gconst2*gconst9*px*py))+(((-0.015)*gconst3*gconst7*gconst8))+(((-1.0)*gconst0*gconst1*gconst15*px))+(((-0.015)*gconst12*gconst14*gconst3))+(((0.06225024)*gconst10*gconst4*sj3))+(((2.0)*gconst12*gconst8*px*py))+(((-0.0014006304)*gconst2*sj3))+((gconst1*gconst10*gconst15*px))+(((-1.0)*gconst0*gconst1*gconst13*gconst14))+(((0.03112512)*gconst10*gconst14*sj3))+(((-2.0)*gconst0*gconst14*gconst6*py))+(((-4.0)*gconst1*gconst14*(py*py)))+(((0.06225024)*gconst0*gconst14*sj3))+(((0.0024880144)*gconst0*px))+(((-2.0)*gconst1*gconst13*gconst8*py))+(((-0.00045)*gconst7*gconst9))+(((-0.015)*gconst14*gconst2*gconst3))+(((0.000111960648)*gconst0))+(((-0.015)*gconst0*gconst11*gconst5))+((gconst10*gconst11*gconst5*px))+(((-0.015)*gconst1*gconst10*gconst5))+(((-0.03)*gconst15*gconst6*py))+(((-1.0)*gconst0*gconst11*gconst14*gconst3))+((gconst13*gconst14*gconst2*px))+(((-1.0)*gconst12*gconst15*(px*px)))+(((-4.0)*gconst12*gconst9*px*py))+(((-0.015)*gconst10*gconst11*gconst5))+(((2.0)*gconst15*gconst2*(px*px)))+(((2.0)*gconst15*gconst6*px*py))+(((-0.015)*gconst0*gconst11*gconst15))+(((-4.0)*gconst11*gconst4*(py*py)))+(((4.0)*gconst1*gconst15*(py*py)))+(((-0.015)*gconst12*gconst13*gconst4))+(((0.06)*gconst2*gconst9*py))+(((-2.0)*gconst14*gconst3*gconst6*py))+(((4.0)*gconst6*gconst9*(py*py)))+(((-1.0)*gconst3*gconst7*gconst8*px))+(((2.0)*gconst1*gconst10*gconst9*py))+(((-0.389376)*gconst12*gconst14*(sj3*sj3)))+(((-0.03112512)*gconst2*px*sj3))+((gconst13*gconst7*gconst8*px))+(((-1.0)*gconst2*gconst5*(px*px)))+(((2.0)*gconst14*gconst3*gconst7*py))+(((-0.778752)*gconst12*gconst4*(sj3*sj3)))+((gconst12*gconst14*gconst3*px))+(((0.06)*gconst12*gconst9*py))+(((-0.778752)*gconst7*gconst8*(sj3*sj3)))+(((0.03112512)*gconst0*gconst4*sj3))+(((0.03112512)*gconst12*px*sj3))+((gconst0*gconst11*gconst15*px))+(((-0.00045)*gconst15*gconst2))+(((-1.0)*gconst0*gconst11*gconst13*gconst4))+(((-1.0)*gconst1*gconst10*gconst14*gconst3))+(((-4.0)*gconst7*gconst9*(py*py)))+(((2.0)*gconst13*gconst4*gconst7*py))+(((-2.0)*gconst4*gconst7*px*py))+(((0.06)*gconst15*gconst7*py))+(((-2.0)*gconst2*gconst8*px*py))+(((-2.0)*gconst0*gconst11*gconst8*py))+(((-4.0)*gconst6*gconst8*(py*py))));
op[5]=((((-1.0)*gconst0*gconst13*gconst4*gconst6))+(((-2.0)*gconst1*gconst10*gconst4*py))+(((2.0)*gconst14*gconst2*gconst3*py))+(((-4.0)*gconst5*gconst7*(py*py)))+(((-2.0)*gconst2*gconst4*px*py))+(((0.12450048)*gconst4*py*sj3))+(((-0.000225)*gconst15*gconst7))+(((-1.0)*gconst0*gconst5*gconst6*px))+((gconst14*gconst3*gconst7*px))+(((2.0)*gconst3*gconst7*gconst8*py))+(((2.0)*gconst6*gconst9*px*py))+(((-0.03)*gconst7*gconst8*py))+(((-2.0)*gconst1*gconst14*gconst3*py))+(((-2.0)*gconst0*gconst11*gconst4*py))+(((-0.778752)*gconst2*gconst8*(sj3*sj3)))+(((2.0)*gconst5*gconst7*(px*px)))+(((-0.015)*gconst0*gconst15*gconst6))+(((-1.0)*gconst0*gconst14*gconst3*gconst6))+(((-2.0)*gconst1*gconst13*gconst4*py))+(((-0.000225)*gconst12*gconst9))+(((-0.015)*gconst0*gconst1*gconst9))+(((0.03)*gconst12*gconst9*px))+(((2.0)*gconst0*gconst1*gconst15*py))+(((0.06)*gconst2*gconst5*py))+(((-0.0014006304)*gconst7*sj3))+(((2.0)*gconst2*gconst9*(px*px)))+(((-4.0)*gconst1*gconst8*(py*py)))+(((-1.0)*gconst10*gconst3*gconst4*gconst6))+(((-0.00045)*gconst5*gconst7))+(((-0.015)*gconst12*gconst3*gconst8))+(((2.0)*gconst11*gconst5*px*py))+(((-0.015)*gconst3*gconst4*gconst7))+(((-0.389376)*gconst14*gconst7*(sj3*sj3)))+(((-0.015)*gconst13*gconst4*gconst7))+(((2.0)*gconst12*gconst3*gconst4*py))+((gconst13*gconst4*gconst7*px))+(((-1.0)*gconst0*gconst1*gconst13*gconst8))+(((-0.015)*gconst0*gconst5*gconst6))+((gconst1*gconst10*gconst9*px))+(((-1.0)*gconst15*gconst7*(px*px)))+(((0.000223921296)*py))+(((-1.0)*gconst0*gconst11*gconst3*gconst8))+(((-0.00045)*gconst2*gconst9))+(((0.06225024)*gconst12*py*sj3))+(((2.0)*gconst13*gconst2*gconst4*py))+(((-4.0)*gconst2*gconst9*(py*py)))+(((-0.0049760288)*px*py))+(((0.06225024)*gconst14*py*sj3))+(((-0.015)*gconst13*gconst2*gconst8))+(((2.0)*gconst0*gconst6*gconst9*py))+(((-0.03)*gconst1*gconst5*py))+(((-0.0099520576)*gconst0*py))+(((-4.0)*gconst4*gconst6*(py*py)))+(((4.0)*gconst2*gconst5*px*py))+(((-2.0)*gconst11*gconst3*gconst4*py))+(((-0.015)*gconst2*gconst3*gconst8))+(((-0.015)*gconst10*gconst5*gconst6))+(((-0.03)*gconst2*gconst4*py))+(((-0.0049760288)*gconst10*py))+(((2.0)*gconst1*gconst15*px*py))+(((-1.0)*gconst0*gconst1*gconst9*px))+(((0.12450048)*gconst2*py*sj3))+(((-0.03)*gconst11*gconst5*py))+(((-2.0)*gconst1*gconst5*px*py))+(((2.0)*gconst7*gconst8*px*py))+(((4.0)*gconst4*gconst7*(py*py)))+(((-4.0)*gconst15*gconst2*px*py))+(((-4.0)*gconst7*gconst9*px*py))+((gconst13*gconst2*gconst8*px))+(((0.03)*gconst15*gconst7*px))+(((-0.015)*gconst0*gconst11*gconst9))+(((-1.0)*gconst1*gconst10*gconst3*gconst8))+(((4.0)*gconst1*gconst9*(py*py)))+(((0.03112512)*gconst7*px*sj3))+(((-0.778752)*gconst4*gconst7*(sj3*sj3)))+(((-0.015)*gconst1*gconst10*gconst9))+(((-0.03)*gconst6*gconst9*py))+((gconst12*gconst3*gconst8*px))+(((2.0)*gconst1*gconst10*gconst5*py))+(((-2.0)*gconst0*gconst6*gconst8*py))+(((0.06)*gconst7*gconst9*py))+((gconst0*gconst15*gconst6*px))+(((0.06225024)*gconst0*gconst8*sj3))+(((-1.0)*gconst2*gconst3*gconst8*px))+(((-4.0)*gconst12*gconst5*px*py))+((gconst0*gconst11*gconst9*px))+(((-0.03)*gconst14*gconst2*py))+(((-2.0)*gconst0*gconst1*gconst14*py))+(((4.0)*gconst2*gconst8*(py*py)))+(((2.0)*gconst14*gconst2*px*py))+(((-1.0)*gconst12*gconst9*(px*px)))+(((-0.03)*gconst1*gconst15*py))+((gconst10*gconst5*gconst6*px))+(((-0.03)*gconst12*gconst4*py))+(((2.0)*gconst12*gconst4*px*py))+(((-0.015)*gconst14*gconst3*gconst7))+(((0.03112512)*gconst10*gconst8*sj3))+(((-0.389376)*gconst12*gconst8*(sj3*sj3)))+(((4.0)*gconst5*gconst6*(py*py)))+(((-2.0)*gconst3*gconst6*gconst8*py))+(((-1.0)*gconst3*gconst4*gconst7*px))+(((0.06)*gconst15*gconst2*py))+(((2.0)*gconst0*gconst11*gconst5*py))+(((0.06)*gconst12*gconst5*py)));
op[6]=((((0.03112512)*gconst2*px*sj3))+(((-2.0)*gconst3*gconst4*gconst6*py))+(((-0.000225)*gconst15*gconst2))+(((2.0)*gconst0*gconst5*gconst6*py))+(((-2.0)*gconst1*gconst3*gconst8*py))+(((-4.0)*gconst2*gconst9*px*py))+(((-0.015)*gconst0*gconst6*gconst9))+(((-0.015)*gconst0*gconst1*gconst15))+(((-0.000225)*gconst12*gconst5))+(((0.06225024)*gconst0*gconst4*sj3))+(((-0.015)*gconst0*gconst1*gconst5))+(((-0.389376)*gconst12*gconst4*(sj3*sj3)))+(((-0.0024880144)*gconst0*px))+(((-0.389376)*gconst7*gconst8*(sj3*sj3)))+(((-0.015)*gconst12*gconst3*gconst4))+(((-0.03)*gconst1*gconst9*py))+(((-0.000225)*gconst7*gconst9))+(((-1.0)*gconst0*gconst1*gconst13*gconst4))+(((-4.0)*gconst1*gconst4*(py*py)))+(((2.0)*gconst1*gconst9*px*py))+((gconst3*gconst7*gconst8*px))+(((-1.0)*gconst0*gconst11*gconst3*gconst4))+((gconst0*gconst6*gconst9*px))+(((-0.00045)*gconst2*gconst5))+(((0.03)*gconst15*gconst2*px))+(((-4.0)*gconst5*gconst7*px*py))+(((0.03112512)*gconst0*gconst14*sj3))+((gconst13*gconst2*gconst4*px))+(((2.0)*gconst0*gconst1*gconst9*py))+(((0.03)*gconst7*gconst9*px))+(((-0.015)*gconst13*gconst2*gconst4))+(((0.06)*gconst5*gconst7*py))+(((-0.03)*gconst4*gconst7*py))+(((-0.03)*gconst5*gconst6*py))+(((-0.03)*gconst2*gconst8*py))+(((-0.015)*gconst2*gconst3*gconst4))+(((-0.0024880144)*gconst10*px))+(((2.0)*gconst2*gconst5*(px*px)))+(((-1.0)*gconst7*gconst9*(px*px)))+(((2.0)*gconst3*gconst4*gconst7*py))+(((4.0)*gconst1*gconst5*(py*py)))+((gconst12*gconst3*gconst4*px))+((gconst0*gconst1*gconst15*px))+(((-0.0004668768)*gconst12*sj3))+(((2.0)*gconst2*gconst8*px*py))+(((-1.0)*gconst0*gconst3*gconst6*gconst8))+(((-0.015)*gconst3*gconst7*gconst8))+(((-0.778752)*gconst2*gconst4*(sj3*sj3)))+(((4.0)*gconst2*gconst4*(py*py)))+(((-1.0)*gconst15*gconst2*(px*px)))+(((2.0)*gconst4*gconst7*px*py))+(((-4.0)*gconst2*gconst5*(py*py)))+(((-0.0014006304)*gconst2*sj3))+(((0.06225024)*gconst7*py*sj3))+(((-1.0)*gconst12*gconst5*(px*px)))+(((-0.015)*gconst14*gconst2*gconst3))+(((-0.0099520576)*(py*py)))+(((-0.389376)*gconst14*gconst2*(sj3*sj3)))+(((0.000111960648)*gconst0))+(((-0.015)*gconst0*gconst11*gconst5))+(((-1.0)*gconst1*gconst10*gconst3*gconst4))+(((0.03112512)*gconst10*gconst4*sj3))+(((-0.015)*gconst1*gconst10*gconst5))+(((3.7320216e-5)*gconst10))+((gconst0*gconst11*gconst5*px))+(((2.0)*gconst5*gconst6*px*py))+(((-1.0)*gconst2*gconst3*gconst4*px))+((gconst1*gconst10*gconst5*px))+(((0.06)*gconst2*gconst9*py))+(((2.0)*gconst2*gconst3*gconst8*py))+(((-1.0)*gconst0*gconst1*gconst5*px))+(((0.03)*gconst12*gconst5*px))+((gconst14*gconst2*gconst3*px))+(((0.03112512)*gconst12*px*sj3))+(((-2.0)*gconst0*gconst1*gconst8*py))+(((-2.0)*gconst0*gconst4*gconst6*py))+(((-1.0)*gconst0*gconst1*gconst14*gconst3))+(((0.06225024)*gconst8*py*sj3)));
op[7]=(((x127*x138))+((gconst1*x116*x131))+(((-1.0)*x158))+(((-1.0)*x159))+(((-1.0)*x143*x147))+(((-1.0)*gconst3*gconst8*x136))+(((-1.0)*gconst0*x132))+(((-0.015)*gconst3*x126))+(((-1.0)*x134*x136))+((x136*x140))+(((-1.0)*x120*x154))+((x126*x141))+((gconst4*py*x130))+(((-1.0)*gconst1*x131*x154))+(((-1.0)*x125*x160))+(((-0.000225)*x138))+((px*x131*x149))+((px*x131*x143))+((x118*x145))+(((-1.0)*x116*x142))+x166+x114+(((-1.0)*gconst5*x151))+(((-1.0)*x147*x149))+(((-1.0)*x145*x165))+((gconst5*gconst7*x127))+(((-1.0)*x126*x160))+(((-1.0)*gconst5*x167))+(((-1.0)*gconst4*x131*x136))+(((0.06225024)*py*x122))+((x115*x116))+(((-1.0)*gconst0*x153*x154))+((x125*x141))+((x131*x162))+(((-1.0)*x138*x163))+((gconst0*x164)));
op[8]=((((-1.0)*x143*x160))+(((-0.015)*gconst1*x116))+(((-0.015)*x162))+(((-1.0)*x136*x154))+((x122*x123))+((x141*x143))+((x127*x145))+(((-0.0004668768)*x122))+(((-1.0)*x145*x163))+((gconst0*gconst4*x157))+(((-1.0)*gconst0*x150))+(((-0.000225)*x145))+((gconst1*px*x116))+(((3.7320216e-5)*gconst0)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x168=px*px;
IkReal x169=cj1*cj1;
IkReal x170=py*py;
IkReal x171=pz*pz;
IkReal x172=((0.623)*sj3);
IkReal x173=((16.0)*sj3);
IkReal x174=(px*sj1);
IkReal x175=((64.0)*sj3);
IkReal x176=(cj1*py);
IkReal x177=((0.15575)*sj3);
IkReal x178=(x169*x170);
IkReal x179=(x168*x169);
j2eval[0]=((((-1.0)*x175*x178))+(((-1.0)*sj3))+((x173*x174))+((x175*x179))+(((-1.0)*x171*x175))+(((-1.0)*x168*x175))+(((-1.0)*x173*x176))+(((128.0)*sj3*x174*x176)));
j2eval[1]=IKsign(((((1.246)*sj3*x174*x176))+((x172*x179))+((x174*x177))+(((-1.0)*x171*x172))+(((-0.009734375)*sj3))+(((-1.0)*x176*x177))+(((-1.0)*x168*x172))+(((-1.0)*x172*x178))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((0.918792520896516)+(((-5.12358074122732)*pp))+(((0.15370742223682)*py*sj1))+(((0.15370742223682)*cj1*px))+(((-1.28089518530683)*cj1*py))+(((1.28089518530683)*px*sj1)))) < -1-IKFAST_SINCOS_THRESH || (((0.918792520896516)+(((-5.12358074122732)*pp))+(((0.15370742223682)*py*sj1))+(((0.15370742223682)*cj1*px))+(((-1.28089518530683)*cj1*py))+(((1.28089518530683)*px*sj1)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x180=IKasin(((0.918792520896516)+(((-5.12358074122732)*pp))+(((0.15370742223682)*py*sj1))+(((0.15370742223682)*cj1*px))+(((-1.28089518530683)*cj1*py))+(((1.28089518530683)*px*sj1))));
j4array[0]=((-1.4426638995112)+(((-1.0)*x180)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((1.69892875407859)+x180);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x181=cj4*cj4;
IkReal x182=((8.0)*pz);
IkReal x183=(px*sj1);
IkReal x184=((0.02)*sj4);
IkReal x185=(pz*sj4);
IkReal x186=(cj1*py);
IkReal x187=((0.02)*pz);
IkReal x188=((0.312)*cj4);
IkReal x189=(cj4*sj4);
IkReal x190=((8.0)*sj4);
IkReal x191=((124.8)*cj4);
j2eval[0]=((15.575)+sj4+((x186*x190))+((x186*x191))+(((-124.8)*x185))+(((-124.6)*x183))+(((-1.0)*x182))+(((-1.0)*x183*x190))+(((-1.0)*x183*x191))+(((124.6)*x186))+((cj4*x182))+(((15.6)*cj4)));
j2eval[1]=((IKabs(((-0.09743225)+(((-0.01246)*sj4))+(pz*pz)+(((-0.01248)*x189))+(((-0.096944)*x181))+(((-0.194376)*cj4)))))+(IKabs(((-0.01247)+(((0.125)*pz))+((pz*x186))+(((-0.097588)*sj4))+(((-1.0)*pz*x183))+(((0.01248)*x181))+(((-1.0e-5)*cj4))+(((-0.096944)*x189))))));
j2eval[2]=IKsign(((0.0389375)+((x186*x188))+(((0.3115)*x186))+(((-1.0)*x187))+((x184*x186))+(((0.0025)*sj4))+(((-0.312)*x185))+(((0.039)*cj4))+(((-1.0)*x183*x184))+(((-1.0)*x183*x188))+(((-0.3115)*x183))+((cj4*x187))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x192=cj4*cj4;
IkReal x193=(cj4*pz);
IkReal x194=(cj1*py);
IkReal x195=(pz*sj4);
IkReal x196=(px*sj1);
IkReal x197=((8.0)*cj4);
IkReal x198=((124.8)*sj4);
IkReal x199=((0.312)*sj4);
IkReal x200=((0.01248)*sj4);
IkReal x201=((0.02)*cj4);
j2eval[0]=((1.0)+(((-1.0)*x196*x198))+(((124.6)*pz))+(((-1.0)*x194*x197))+(((-8.0)*x196))+(((124.8)*x193))+((x196*x197))+((x194*x198))+(((8.0)*x194))+(((8.0)*x195))+(((-1.0)*cj4))+(((15.6)*sj4)));
j2eval[1]=((IKabs(((-0.01247)+(((-0.097588)*sj4))+(((-1.0)*pz*x194))+(((-0.125)*pz))+(((0.01248)*x192))+(((-0.096944)*cj4*sj4))+(((-1.0e-5)*cj4))+((pz*x196)))))+(IKabs(((-0.097744)+(((-1.0)*x200))+((cj4*x200))+(pz*pz)+(((0.096944)*x192))+(((0.0008)*cj4))))));
j2eval[2]=IKsign(((0.0025)+(((-1.0)*x196*x199))+(((-1.0)*x194*x201))+(((-0.0025)*cj4))+((x196*x201))+(((-0.02)*x196))+(((0.039)*sj4))+((x194*x199))+(((0.3115)*pz))+(((0.312)*x193))+(((0.02)*x194))+(((0.02)*x195))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x202=(cj4*pz);
IkReal x203=(cj1*py);
IkReal x204=((124.8)*sj4);
IkReal x205=(pz*sj4);
IkReal x206=(px*sj1);
IkReal x207=((0.312)*sj4);
IkReal x208=(cj4*x206);
j2eval[0]=((1.0)+(((-1.0)*x204*x206))+(((124.6)*pz))+(((-8.0)*cj4*x203))+(((8.0)*x208))+(((8.0)*x203))+(((8.0)*x205))+(((-8.0)*x206))+(((124.8)*x202))+((x203*x204))+(((-1.0)*cj4))+(((15.6)*sj4)));
j2eval[1]=IKsign(((0.0025)+(((-0.0025)*cj4))+(((0.312)*x202))+(((0.02)*x203))+(((0.02)*x205))+(((0.02)*x208))+(((-1.0)*x206*x207))+(((0.039)*sj4))+(((0.3115)*pz))+((x203*x207))+(((-0.02)*x206))+(((-0.02)*cj4*x203))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
IkReal x209=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x209);
rxp0_1=(px*r20);
rxp1_0=(r21*x209);
rxp1_1=(px*r21);
rxp2_0=(r22*x209);
rxp2_1=(px*r22);
j2eval[0]=((-1.0)+(((-8.0)*cj1*py))+(((8.0)*px*sj1)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x210=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x210);
rxp0_1=(px*r20);
rxp1_0=(r21*x210);
rxp1_1=(px*r21);
rxp2_0=(r22*x210);
rxp2_1=(px*r22);
IkReal x211=cj1*cj1;
IkReal x212=px*px;
IkReal x213=(px*sj1);
IkReal x214=(cj1*py);
IkReal x215=((64.0)*x212);
j2eval[0]=((-1.0)+(((16.0)*x213))+((x211*x215))+(((-16.0)*x214))+(((128.0)*x213*x214))+(((-64.0)*x211*(py*py)))+(((-1.0)*x215)));
j2eval[1]=((1.0)+(((8.0)*x214))+(((-8.0)*x213)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x216=px*px;
IkReal x217=py*py;
IkReal x218=cj1*cj1;
IkReal x219=(cj1*py);
IkReal x220=((60.0)*cj1);
IkReal x221=((2000.0)*sj1);
IkReal x222=(px*py);
IkReal x223=(px*sj1);
IkReal x224=(sj1*x217);
IkReal x225=((80.0)*x216);
IkReal x226=(x217*x218);
CheckValue<IkReal> x227=IKPowWithIntegerCheck(((-1.25)+(((-80.0)*x226))+(((20.0)*x223))+(((-20.0)*x219))+((x218*x225))+(((160.0)*x219*x223))+(((-1.0)*x225))),-1);
if(!x227.valid){
continue;
}
CheckValue<IkReal> x228=IKPowWithIntegerCheck(((250.0)+(((2000.0)*x219))+(((-1.0)*px*x221))),-1);
if(!x228.valid){
continue;
}
if( IKabs(((x227.value)*(((-93.2255625)+(((-500.0)*x216*x218))+(((683.3045)*x223))+(((60.0)*x222))+(((-7.5)*py*sj1))+(((-1.0)*x221*(px*px*px)))+(((2000.0)*x216*x219))+((sj1*x216*x220))+(((750.0)*x216))+(((-1.0)*x220*x224))+(((-120.0)*x218*x222))+(((2000.0)*x219*(py*py)))+(((-7.5)*cj1*px))+(((500.0)*x226))+(((-1.0)*px*x217*x221))+(((-1000.0)*x219*x223))+(((250.0)*x217))+(((-683.3045)*x219)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1247.0)*(x228.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x227.value)*(((-93.2255625)+(((-500.0)*x216*x218))+(((683.3045)*x223))+(((60.0)*x222))+(((-7.5)*py*sj1))+(((-1.0)*x221*(px*px*px)))+(((2000.0)*x216*x219))+((sj1*x216*x220))+(((750.0)*x216))+(((-1.0)*x220*x224))+(((-120.0)*x218*x222))+(((2000.0)*x219*(py*py)))+(((-7.5)*cj1*px))+(((500.0)*x226))+(((-1.0)*px*x217*x221))+(((-1000.0)*x219*x223))+(((250.0)*x217))+(((-683.3045)*x219))))))+IKsqr(((-1247.0)*(x228.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x227.value)*(((-93.2255625)+(((-500.0)*x216*x218))+(((683.3045)*x223))+(((60.0)*x222))+(((-7.5)*py*sj1))+(((-1.0)*x221*(px*px*px)))+(((2000.0)*x216*x219))+((sj1*x216*x220))+(((750.0)*x216))+(((-1.0)*x220*x224))+(((-120.0)*x218*x222))+(((2000.0)*x219*(py*py)))+(((-7.5)*cj1*px))+(((500.0)*x226))+(((-1.0)*px*x217*x221))+(((-1000.0)*x219*x223))+(((250.0)*x217))+(((-683.3045)*x219))))), ((-1247.0)*(x228.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x229=IKsin(j2);
IkReal x230=IKcos(j2);
IkReal x231=(px*sj1);
IkReal x232=(cj1*py);
IkReal x233=((0.623)*x230);
IkReal x234=((0.04)*x229);
evalcond[0]=((0.6235)*x229);
evalcond[1]=((0.125)+(((0.6235)*x230))+x232+(((-1.0)*x231)));
evalcond[2]=(((x229*x231))+(((-1.0)*x229*x232))+(((-0.125)*x229)));
evalcond[3]=((0.6235)+(((-1.0)*x230*x231))+((x230*x232))+(((0.125)*x230)));
evalcond[4]=((-0.01553825)+(((-1.0)*(px*px)))+(((-0.25)*x232))+(((-0.005)*x229))+(((-0.077875)*x230))+(((0.03)*cj1*px))+(((0.25)*x231))+(((0.03)*py*sj1))+(((-1.0)*(py*py)))+((x231*x234))+((x231*x233))+(((-1.0)*x232*x234))+(((-1.0)*x232*x233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1597=px*px;
IkReal x1598=cj1*cj1;
IkReal x1599=py*py;
IkReal x1600=(px*sj1);
IkReal x1601=(cj1*py);
IkReal x1602=((1246.0)*x1598);
CheckValue<IkReal> x1603=IKPowWithIntegerCheck(((-6.235)+(((-49.88)*x1601))+(((49.88)*x1600))),-1);
if(!x1603.valid){
continue;
}
if( IKabs(((x1603.value)*(((-0.09255225)+(((0.25)*x1601))+(((-1.0)*x1599*x1602))+x1597+(((-37.41)*cj1*px))+(((1247.0)*x1599))+(((-37.41)*py*sj1))+(((-0.25)*x1600))+(((2492.0)*x1600*x1601))+((x1597*x1602)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.200481154771451)+(((-1.60384923817161)*x1601))+(((1.60384923817161)*x1600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1603.value)*(((-0.09255225)+(((0.25)*x1601))+(((-1.0)*x1599*x1602))+x1597+(((-37.41)*cj1*px))+(((1247.0)*x1599))+(((-37.41)*py*sj1))+(((-0.25)*x1600))+(((2492.0)*x1600*x1601))+((x1597*x1602))))))+IKsqr(((-0.200481154771451)+(((-1.60384923817161)*x1601))+(((1.60384923817161)*x1600))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1603.value)*(((-0.09255225)+(((0.25)*x1601))+(((-1.0)*x1599*x1602))+x1597+(((-37.41)*cj1*px))+(((1247.0)*x1599))+(((-37.41)*py*sj1))+(((-0.25)*x1600))+(((2492.0)*x1600*x1601))+((x1597*x1602))))), ((-0.200481154771451)+(((-1.60384923817161)*x1601))+(((1.60384923817161)*x1600))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1604=IKsin(j2);
IkReal x1605=IKcos(j2);
IkReal x1606=(px*sj1);
IkReal x1607=(cj1*py);
IkReal x1608=((0.623)*x1605);
IkReal x1609=((0.04)*x1604);
evalcond[0]=((0.6235)*x1604);
evalcond[1]=((0.125)+(((-1.0)*x1606))+x1607+(((0.6235)*x1605)));
evalcond[2]=((((-0.125)*x1604))+(((-1.0)*x1604*x1607))+((x1604*x1606)));
evalcond[3]=((0.6235)+(((-1.0)*x1605*x1606))+((x1605*x1607))+(((0.125)*x1605)));
evalcond[4]=((-0.01553825)+(((-1.0)*x1607*x1609))+(((-1.0)*x1607*x1608))+(((-1.0)*(px*px)))+(((-0.077875)*x1605))+(((0.03)*cj1*px))+(((0.25)*x1606))+(((-0.005)*x1604))+(((0.03)*py*sj1))+(((-0.25)*x1607))+(((-1.0)*(py*py)))+((x1606*x1608))+((x1606*x1609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1610=cj1*cj1;
IkReal x1611=px*px;
IkReal x1612=cj4*cj4;
IkReal x1613=(cj1*py);
IkReal x1614=(px*sj1);
IkReal x1615=((0.312)*sj4);
IkReal x1616=((0.02)*cj4);
IkReal x1617=(cj4*sj4);
CheckValue<IkReal> x1618=IKPowWithIntegerCheck(IKsign(((0.0025)+(((0.02)*x1613))+(((-0.0025)*cj4))+(((0.02)*pz*sj4))+(((0.312)*cj4*pz))+((x1614*x1616))+(((0.039)*sj4))+(((0.3115)*pz))+(((-1.0)*x1614*x1615))+(((-1.0)*x1613*x1616))+(((-0.02)*x1614))+((x1613*x1615)))),-1);
if(!x1618.valid){
continue;
}
CheckValue<IkReal> x1619 = IKatan2WithCheck(IkReal(((0.08180725)+(((-1.0)*x1611))+(((0.25)*x1614))+(((-1.0)*x1610*(py*py)))+(((-0.25)*x1613))+(((0.01248)*x1617))+(((0.01246)*sj4))+(((0.194376)*cj4))+((x1610*x1611))+(((0.096944)*x1612))+(((2.0)*x1613*x1614)))),IkReal(((-0.01247)+((pz*x1614))+(((-0.097588)*sj4))+(((-0.125)*pz))+(((0.01248)*x1612))+(((-0.096944)*x1617))+(((-1.0)*pz*x1613))+(((-1.0e-5)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1619.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1618.value)))+(x1619.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1620=IKcos(j2);
IkReal x1621=IKsin(j2);
IkReal x1622=((0.02)*cj4);
IkReal x1623=(px*sj1);
IkReal x1624=(cj1*py);
IkReal x1625=((0.312)*sj4);
IkReal x1626=((0.312)*cj4);
IkReal x1627=((0.623)*x1620);
IkReal x1628=((1.0)*x1621);
IkReal x1629=(pz*x1620);
IkReal x1630=((0.04)*x1621);
IkReal x1631=((0.02)*x1621);
IkReal x1632=((0.02)*x1620);
evalcond[0]=((0.3115)+((x1620*x1624))+(((0.02)*sj4))+x1626+(((-1.0)*pz*x1628))+(((-1.0)*x1620*x1623))+(((0.125)*x1620)));
evalcond[1]=((-0.02)+(((-1.0)*x1629))+x1622+(((-1.0)*x1625))+(((-1.0)*x1624*x1628))+(((-0.125)*x1621))+((x1621*x1623)));
evalcond[2]=(((x1620*x1622))+(((-1.0)*x1632))+(((0.3115)*x1621))+(((-1.0)*pz))+(((-1.0)*x1620*x1625))+((sj4*x1631))+((x1621*x1626)));
evalcond[3]=((0.125)+((x1620*x1626))+(((-1.0)*x1623))+x1624+x1631+(((0.3115)*x1620))+(((-1.0)*x1621*x1622))+((sj4*x1632))+((x1621*x1625)));
evalcond[4]=((-0.01553825)+(((-0.077875)*x1620))+(((0.25)*x1623))+((x1623*x1627))+(((-1.0)*x1624*x1630))+(((0.03)*cj1*px))+(((-0.04)*x1629))+(((-1.0)*pp))+(((-0.005)*x1621))+((x1623*x1630))+(((-0.25)*x1624))+(((0.623)*pz*x1621))+(((-1.0)*x1624*x1627))+(((0.03)*py*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1633=cj4*cj4;
IkReal x1634=(px*sj1);
IkReal x1635=((0.312)*sj4);
IkReal x1636=(cj4*sj4);
IkReal x1637=(cj1*py);
IkReal x1638=((0.02)*x1637);
CheckValue<IkReal> x1639=IKPowWithIntegerCheck(IKsign(((0.0025)+(((-0.0025)*cj4))+(((-1.0)*x1634*x1635))+(((0.02)*cj4*x1634))+x1638+(((0.02)*pz*sj4))+(((0.312)*cj4*pz))+(((0.039)*sj4))+((x1635*x1637))+(((-0.02)*x1634))+(((0.3115)*pz))+(((-1.0)*cj4*x1638)))),-1);
if(!x1639.valid){
continue;
}
CheckValue<IkReal> x1640 = IKatan2WithCheck(IkReal(((-0.097744)+(((0.096944)*x1633))+(pz*pz)+(((-0.01248)*sj4))+(((0.01248)*x1636))+(((0.0008)*cj4)))),IkReal(((-0.01247)+(((-0.096944)*x1636))+(((-0.097588)*sj4))+(((-1.0)*pz*x1637))+((pz*x1634))+(((-0.125)*pz))+(((0.01248)*x1633))+(((-1.0e-5)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1640.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1639.value)))+(x1640.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1641=IKcos(j2);
IkReal x1642=IKsin(j2);
IkReal x1643=((0.02)*cj4);
IkReal x1644=(px*sj1);
IkReal x1645=(cj1*py);
IkReal x1646=((0.312)*sj4);
IkReal x1647=((0.312)*cj4);
IkReal x1648=((0.623)*x1641);
IkReal x1649=((1.0)*x1642);
IkReal x1650=(pz*x1641);
IkReal x1651=((0.04)*x1642);
IkReal x1652=((0.02)*x1642);
IkReal x1653=((0.02)*x1641);
evalcond[0]=((0.3115)+(((0.02)*sj4))+x1647+(((-1.0)*x1641*x1644))+((x1641*x1645))+(((0.125)*x1641))+(((-1.0)*pz*x1649)));
evalcond[1]=((-0.02)+x1643+(((-1.0)*x1645*x1649))+(((-1.0)*x1650))+(((-1.0)*x1646))+((x1642*x1644))+(((-0.125)*x1642)));
evalcond[2]=((((-1.0)*x1641*x1646))+((x1641*x1643))+(((-1.0)*pz))+(((-1.0)*x1653))+(((0.3115)*x1642))+((x1642*x1647))+((sj4*x1652)));
evalcond[3]=((0.125)+x1652+x1645+((x1641*x1647))+(((-1.0)*x1642*x1643))+(((-1.0)*x1644))+(((0.3115)*x1641))+((x1642*x1646))+((sj4*x1653)));
evalcond[4]=((-0.01553825)+(((0.25)*x1644))+(((0.03)*cj1*px))+(((-1.0)*x1645*x1648))+(((-1.0)*x1645*x1651))+((x1644*x1651))+(((-0.25)*x1645))+((x1644*x1648))+(((-1.0)*pp))+(((-0.04)*x1650))+(((-0.005)*x1642))+(((0.03)*py*sj1))+(((0.623)*pz*x1642))+(((-0.077875)*x1641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1654=cj4*cj4;
IkReal x1655=(px*sj1);
IkReal x1656=((0.02)*sj4);
IkReal x1657=(cj1*py);
IkReal x1658=((0.02)*pz);
IkReal x1659=(cj4*sj4);
IkReal x1660=((0.312)*cj4);
CheckValue<IkReal> x1661=IKPowWithIntegerCheck(IKsign(((0.0389375)+((x1656*x1657))+((cj4*x1658))+(((-0.3115)*x1655))+(((-1.0)*x1655*x1656))+(((-1.0)*x1655*x1660))+(((0.0025)*sj4))+(((-1.0)*x1658))+(((-0.312)*pz*sj4))+(((0.039)*cj4))+((x1657*x1660))+(((0.3115)*x1657)))),-1);
if(!x1661.valid){
continue;
}
CheckValue<IkReal> x1662 = IKatan2WithCheck(IkReal(((-0.01247)+(((0.125)*pz))+(((-1.0)*pz*x1655))+(((-0.097588)*sj4))+((pz*x1657))+(((0.01248)*x1654))+(((-1.0e-5)*cj4))+(((-0.096944)*x1659)))),IkReal(((-0.09743225)+(((-0.01246)*sj4))+(pz*pz)+(((-0.01248)*x1659))+(((-0.194376)*cj4))+(((-0.096944)*x1654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1662.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1661.value)))+(x1662.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1663=IKcos(j2);
IkReal x1664=IKsin(j2);
IkReal x1665=((0.02)*cj4);
IkReal x1666=(px*sj1);
IkReal x1667=(cj1*py);
IkReal x1668=((0.312)*sj4);
IkReal x1669=((0.312)*cj4);
IkReal x1670=((0.623)*x1663);
IkReal x1671=((1.0)*x1664);
IkReal x1672=(pz*x1663);
IkReal x1673=((0.04)*x1664);
IkReal x1674=((0.02)*x1664);
IkReal x1675=((0.02)*x1663);
evalcond[0]=((0.3115)+(((0.02)*sj4))+x1669+(((-1.0)*x1663*x1666))+(((-1.0)*pz*x1671))+(((0.125)*x1663))+((x1663*x1667)));
evalcond[1]=((-0.02)+(((-1.0)*x1667*x1671))+x1665+(((-1.0)*x1672))+(((-1.0)*x1668))+(((-0.125)*x1664))+((x1664*x1666)));
evalcond[2]=(((sj4*x1674))+(((-1.0)*x1663*x1668))+(((-1.0)*pz))+(((0.3115)*x1664))+(((-1.0)*x1675))+((x1664*x1669))+((x1663*x1665)));
evalcond[3]=((0.125)+((sj4*x1675))+x1667+x1674+(((-1.0)*x1666))+(((0.3115)*x1663))+((x1664*x1668))+((x1663*x1669))+(((-1.0)*x1664*x1665)));
evalcond[4]=((-0.01553825)+((x1666*x1673))+((x1666*x1670))+(((-1.0)*x1667*x1670))+(((-1.0)*x1667*x1673))+(((0.03)*cj1*px))+(((-0.25)*x1667))+(((-1.0)*pp))+(((0.03)*py*sj1))+(((-0.04)*x1672))+(((-0.005)*x1664))+(((0.623)*pz*x1664))+(((-0.077875)*x1663))+(((0.25)*x1666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((0.918792520896516)+(((-5.12358074122732)*pp))+(((0.15370742223682)*py*sj1))+(((0.15370742223682)*cj1*px))+(((-1.28089518530683)*cj1*py))+(((1.28089518530683)*px*sj1)))) < -1-IKFAST_SINCOS_THRESH || (((0.918792520896516)+(((-5.12358074122732)*pp))+(((0.15370742223682)*py*sj1))+(((0.15370742223682)*cj1*px))+(((-1.28089518530683)*cj1*py))+(((1.28089518530683)*px*sj1)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1676=IKasin(((0.918792520896516)+(((-5.12358074122732)*pp))+(((0.15370742223682)*py*sj1))+(((0.15370742223682)*cj1*px))+(((-1.28089518530683)*cj1*py))+(((1.28089518530683)*px*sj1))));
j4array[0]=((-1.4426638995112)+(((-1.0)*x1676)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((1.69892875407859)+x1676);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1677=cj4*cj4;
IkReal x1678=(cj4*pz);
IkReal x1679=(cj1*py);
IkReal x1680=(pz*sj4);
IkReal x1681=((124.8)*sj4);
IkReal x1682=(px*sj1);
IkReal x1683=(cj4*sj4);
IkReal x1684=((0.312)*sj4);
IkReal x1685=(cj4*x1682);
j2eval[0]=((-1.0)+((x1681*x1682))+(((124.6)*pz))+(((-15.6)*sj4))+cj4+(((8.0)*cj4*x1679))+(((-8.0)*x1685))+(((124.8)*x1678))+(((-1.0)*x1679*x1681))+(((8.0)*x1680))+(((8.0)*x1682))+(((-8.0)*x1679)));
j2eval[1]=IKsign(((-0.0025)+(((0.02)*x1682))+(((0.02)*x1680))+(((0.0025)*cj4))+(((0.02)*cj4*x1679))+(((-0.039)*sj4))+(((-1.0)*x1679*x1684))+(((-0.02)*x1679))+(((-0.02)*x1685))+(((0.3115)*pz))+((x1682*x1684))+(((0.312)*x1678))));
j2eval[2]=((IKabs(((-0.097744)+(((0.096944)*x1677))+(pz*pz)+(((-0.01248)*sj4))+(((0.0008)*cj4))+(((0.01248)*x1683)))))+(IKabs(((0.01247)+(((0.096944)*x1683))+(((0.097588)*sj4))+(((-0.125)*pz))+(((1.0e-5)*cj4))+(((-0.01248)*x1677))+((pz*x1682))+(((-1.0)*pz*x1679))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1686=cj4*cj4;
IkReal x1687=((8.0)*pz);
IkReal x1688=(px*sj1);
IkReal x1689=((0.02)*sj4);
IkReal x1690=(pz*sj4);
IkReal x1691=(cj4*sj4);
IkReal x1692=(cj1*py);
IkReal x1693=((0.312)*cj4);
IkReal x1694=((0.02)*pz);
IkReal x1695=((124.8)*cj4);
IkReal x1696=((8.0)*sj4);
j2eval[0]=((15.575)+(((-1.0)*x1688*x1696))+(((-1.0)*x1688*x1695))+sj4+x1687+(((-124.6)*x1688))+(((124.6)*x1692))+(((-1.0)*cj4*x1687))+((x1692*x1696))+((x1692*x1695))+(((124.8)*x1690))+(((15.6)*cj4)));
j2eval[1]=IKsign(((0.0389375)+(((-1.0)*x1688*x1693))+(((0.3115)*x1692))+x1694+(((-0.3115)*x1688))+((x1692*x1693))+(((-1.0)*cj4*x1694))+((x1689*x1692))+(((0.312)*x1690))+(((0.0025)*sj4))+(((0.039)*cj4))+(((-1.0)*x1688*x1689))));
j2eval[2]=((IKabs(((0.01247)+(((0.125)*pz))+(((-0.01248)*x1686))+(((0.096944)*x1691))+(((0.097588)*sj4))+(((1.0e-5)*cj4))+((pz*x1692))+(((-1.0)*pz*x1688)))))+(IKabs(((-0.09743225)+(((-0.096944)*x1686))+(((-0.01248)*x1691))+(((-0.01246)*sj4))+(pz*pz)+(((-0.194376)*cj4))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1697=((0.02)*pz);
IkReal x1698=((8.0)*pz);
IkReal x1699=(cj1*py);
IkReal x1700=(px*sj1);
IkReal x1701=((0.02)*sj4);
IkReal x1702=((8.0)*sj4);
IkReal x1703=(pz*sj4);
IkReal x1704=((124.8)*cj4);
IkReal x1705=((0.312)*cj4);
j2eval[0]=((15.575)+sj4+x1698+(((124.6)*x1699))+(((-1.0)*cj4*x1698))+(((124.8)*x1703))+(((-1.0)*x1700*x1702))+(((-1.0)*x1700*x1704))+(((-124.6)*x1700))+((x1699*x1704))+((x1699*x1702))+(((15.6)*cj4)));
j2eval[1]=IKsign(((0.0389375)+(((0.3115)*x1699))+(((0.312)*x1703))+x1697+(((-1.0)*cj4*x1697))+(((0.0025)*sj4))+(((0.039)*cj4))+(((-1.0)*x1700*x1701))+(((-1.0)*x1700*x1705))+(((-0.3115)*x1700))+((x1699*x1705))+((x1699*x1701))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
IkReal x1706=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1706);
rxp0_1=(px*r20);
rxp1_0=(r21*x1706);
rxp1_1=(px*r21);
rxp2_0=(r22*x1706);
rxp2_1=(px*r22);
j2eval[0]=((1.0)+(((8.0)*cj1*py))+(((-8.0)*px*sj1)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x1707=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1707);
rxp0_1=(px*r20);
rxp1_0=(r21*x1707);
rxp1_1=(px*r21);
rxp2_0=(r22*x1707);
rxp2_1=(px*r22);
IkReal x1708=cj1*cj1;
IkReal x1709=px*px;
IkReal x1710=(px*sj1);
IkReal x1711=(cj1*py);
IkReal x1712=((64.0)*x1709);
j2eval[0]=((1.0)+(((64.0)*x1708*(py*py)))+x1712+(((-16.0)*x1710))+(((-1.0)*x1708*x1712))+(((-128.0)*x1710*x1711))+(((16.0)*x1711)));
j2eval[1]=((1.0)+(((8.0)*x1711))+(((-8.0)*x1710)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1713=px*px;
IkReal x1714=py*py;
IkReal x1715=cj1*cj1;
IkReal x1716=(cj1*py);
IkReal x1717=((60.0)*cj1);
IkReal x1718=((2000.0)*sj1);
IkReal x1719=(px*py);
IkReal x1720=(px*sj1);
IkReal x1721=(sj1*x1714);
IkReal x1722=((80.0)*x1713);
IkReal x1723=(x1714*x1715);
CheckValue<IkReal> x1724=IKPowWithIntegerCheck(((1.25)+(((-1.0)*x1715*x1722))+x1722+(((80.0)*x1723))+(((-20.0)*x1720))+(((-160.0)*x1716*x1720))+(((20.0)*x1716))),-1);
if(!x1724.valid){
continue;
}
CheckValue<IkReal> x1725=IKPowWithIntegerCheck(((250.0)+(((-1.0)*px*x1718))+(((2000.0)*x1716))),-1);
if(!x1725.valid){
continue;
}
if( IKabs(((x1724.value)*(((-93.2255625)+(((-683.3045)*x1716))+(((250.0)*x1714))+(((60.0)*x1719))+(((-1.0)*px*x1714*x1718))+(((500.0)*x1723))+(((-500.0)*x1713*x1715))+(((-7.5)*py*sj1))+(((683.3045)*x1720))+(((-1.0)*x1718*(px*px*px)))+(((-1.0)*x1717*x1721))+(((-120.0)*x1715*x1719))+((sj1*x1713*x1717))+(((750.0)*x1713))+(((2000.0)*x1716*(py*py)))+(((-1000.0)*x1716*x1720))+(((-7.5)*cj1*px))+(((2000.0)*x1713*x1716)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1247.0)*(x1725.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1724.value)*(((-93.2255625)+(((-683.3045)*x1716))+(((250.0)*x1714))+(((60.0)*x1719))+(((-1.0)*px*x1714*x1718))+(((500.0)*x1723))+(((-500.0)*x1713*x1715))+(((-7.5)*py*sj1))+(((683.3045)*x1720))+(((-1.0)*x1718*(px*px*px)))+(((-1.0)*x1717*x1721))+(((-120.0)*x1715*x1719))+((sj1*x1713*x1717))+(((750.0)*x1713))+(((2000.0)*x1716*(py*py)))+(((-1000.0)*x1716*x1720))+(((-7.5)*cj1*px))+(((2000.0)*x1713*x1716))))))+IKsqr(((-1247.0)*(x1725.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1724.value)*(((-93.2255625)+(((-683.3045)*x1716))+(((250.0)*x1714))+(((60.0)*x1719))+(((-1.0)*px*x1714*x1718))+(((500.0)*x1723))+(((-500.0)*x1713*x1715))+(((-7.5)*py*sj1))+(((683.3045)*x1720))+(((-1.0)*x1718*(px*px*px)))+(((-1.0)*x1717*x1721))+(((-120.0)*x1715*x1719))+((sj1*x1713*x1717))+(((750.0)*x1713))+(((2000.0)*x1716*(py*py)))+(((-1000.0)*x1716*x1720))+(((-7.5)*cj1*px))+(((2000.0)*x1713*x1716))))), ((-1247.0)*(x1725.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1726=IKsin(j2);
IkReal x1727=IKcos(j2);
IkReal x1728=(px*sj1);
IkReal x1729=(cj1*py);
IkReal x1730=((0.623)*x1727);
IkReal x1731=((0.04)*x1726);
evalcond[0]=((0.6235)*x1726);
evalcond[1]=((0.125)+(((0.6235)*x1727))+x1729+(((-1.0)*x1728)));
evalcond[2]=(((x1726*x1729))+(((-1.0)*x1726*x1728))+(((0.125)*x1726)));
evalcond[3]=((0.6235)+(((0.125)*x1727))+((x1727*x1729))+(((-1.0)*x1727*x1728)));
evalcond[4]=((-0.01553825)+((x1728*x1730))+(((-1.0)*(px*px)))+(((-1.0)*x1728*x1731))+(((-0.25)*x1729))+(((0.03)*cj1*px))+(((-1.0)*x1729*x1730))+(((0.25)*x1728))+((x1729*x1731))+(((-0.077875)*x1727))+(((0.005)*x1726))+(((0.03)*py*sj1))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1732=px*px;
IkReal x1733=cj1*cj1;
IkReal x1734=py*py;
IkReal x1735=(px*sj1);
IkReal x1736=(cj1*py);
IkReal x1737=((1246.0)*x1733);
CheckValue<IkReal> x1738=IKPowWithIntegerCheck(((6.235)+(((-49.88)*x1735))+(((49.88)*x1736))),-1);
if(!x1738.valid){
continue;
}
if( IKabs(((x1738.value)*(((-0.09255225)+(((2492.0)*x1735*x1736))+x1732+(((-0.25)*x1735))+(((0.25)*x1736))+((x1732*x1737))+(((-37.41)*cj1*px))+(((-1.0)*x1734*x1737))+(((-37.41)*py*sj1))+(((1247.0)*x1734)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.200481154771451)+(((1.60384923817161)*x1735))+(((-1.60384923817161)*x1736)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1738.value)*(((-0.09255225)+(((2492.0)*x1735*x1736))+x1732+(((-0.25)*x1735))+(((0.25)*x1736))+((x1732*x1737))+(((-37.41)*cj1*px))+(((-1.0)*x1734*x1737))+(((-37.41)*py*sj1))+(((1247.0)*x1734))))))+IKsqr(((-0.200481154771451)+(((1.60384923817161)*x1735))+(((-1.60384923817161)*x1736))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1738.value)*(((-0.09255225)+(((2492.0)*x1735*x1736))+x1732+(((-0.25)*x1735))+(((0.25)*x1736))+((x1732*x1737))+(((-37.41)*cj1*px))+(((-1.0)*x1734*x1737))+(((-37.41)*py*sj1))+(((1247.0)*x1734))))), ((-0.200481154771451)+(((1.60384923817161)*x1735))+(((-1.60384923817161)*x1736))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1739=IKsin(j2);
IkReal x1740=IKcos(j2);
IkReal x1741=(px*sj1);
IkReal x1742=(cj1*py);
IkReal x1743=((0.623)*x1740);
IkReal x1744=((0.04)*x1739);
evalcond[0]=((0.6235)*x1739);
evalcond[1]=((0.125)+x1742+(((-1.0)*x1741))+(((0.6235)*x1740)));
evalcond[2]=(((x1739*x1742))+(((-1.0)*x1739*x1741))+(((0.125)*x1739)));
evalcond[3]=((0.6235)+(((-1.0)*x1740*x1741))+((x1740*x1742))+(((0.125)*x1740)));
evalcond[4]=((-0.01553825)+(((-1.0)*x1741*x1744))+(((-1.0)*(px*px)))+(((0.03)*cj1*px))+(((0.005)*x1739))+(((-0.077875)*x1740))+(((-0.25)*x1742))+((x1742*x1744))+(((0.25)*x1741))+(((0.03)*py*sj1))+(((-1.0)*x1742*x1743))+(((-1.0)*(py*py)))+((x1741*x1743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1745=cj1*cj1;
IkReal x1746=px*px;
IkReal x1747=cj4*cj4;
IkReal x1748=(px*sj1);
IkReal x1749=((0.02)*sj4);
IkReal x1750=(cj1*py);
IkReal x1751=((0.01248)*sj4);
IkReal x1752=((0.02)*pz);
IkReal x1753=((0.312)*cj4);
CheckValue<IkReal> x1754 = IKatan2WithCheck(IkReal(((0.01247)+(((-0.01248)*x1747))+(((0.125)*pz))+((pz*x1750))+(((-1.0)*pz*x1748))+(((0.097588)*sj4))+(((1.0e-5)*cj4))+(((0.096944)*cj4*sj4)))),IkReal(((0.082119)+(((-1.0)*cj4*x1751))+x1751+((x1745*x1746))+(((-0.0008)*cj4))+(((-0.096944)*x1747))+(((-1.0)*x1746))+(((-0.25)*x1750))+(((0.25)*x1748))+(((-1.0)*x1745*(py*py)))+(((2.0)*x1748*x1750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1754.valid){
continue;
}
CheckValue<IkReal> x1755=IKPowWithIntegerCheck(IKsign(((0.0389375)+(((0.312)*pz*sj4))+(((-1.0)*cj4*x1752))+(((0.3115)*x1750))+(((-1.0)*x1748*x1753))+(((-1.0)*x1748*x1749))+(((-0.3115)*x1748))+((x1749*x1750))+x1752+((x1750*x1753))+(((0.0025)*sj4))+(((0.039)*cj4)))),-1);
if(!x1755.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1754.value)+(((1.5707963267949)*(x1755.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1756=IKsin(j2);
IkReal x1757=IKcos(j2);
IkReal x1758=((0.02)*cj4);
IkReal x1759=(px*sj1);
IkReal x1760=(cj1*py);
IkReal x1761=((0.312)*sj4);
IkReal x1762=((0.312)*cj4);
IkReal x1763=((0.623)*x1757);
IkReal x1764=((1.0)*x1756);
IkReal x1765=(pz*x1757);
IkReal x1766=((0.04)*x1756);
IkReal x1767=((0.02)*x1756);
IkReal x1768=((0.02)*x1757);
evalcond[0]=((-0.02)+(((-1.0)*x1761))+x1765+x1758+(((-1.0)*x1759*x1764))+((x1756*x1760))+(((0.125)*x1756)));
evalcond[1]=((0.3115)+(((-1.0)*pz*x1764))+(((0.02)*sj4))+x1762+((x1757*x1760))+(((0.125)*x1757))+(((-1.0)*x1757*x1759)));
evalcond[2]=((((0.3115)*x1756))+(((-1.0)*x1757*x1758))+x1768+((x1756*x1762))+(((-1.0)*pz))+((x1757*x1761))+((sj4*x1767)));
evalcond[3]=((0.125)+(((0.3115)*x1757))+(((-1.0)*x1767))+x1760+(((-1.0)*x1756*x1761))+((x1757*x1762))+(((-1.0)*x1759))+((sj4*x1768))+((x1756*x1758)));
evalcond[4]=((-0.01553825)+(((-0.25)*x1760))+((x1759*x1763))+(((0.03)*cj1*px))+(((0.005)*x1756))+(((-1.0)*x1759*x1766))+(((-1.0)*pp))+(((-1.0)*x1760*x1763))+(((0.25)*x1759))+(((-0.077875)*x1757))+(((0.04)*x1765))+(((0.03)*py*sj1))+(((0.623)*pz*x1756))+((x1760*x1766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1769=cj4*cj4;
IkReal x1770=(px*sj1);
IkReal x1771=((0.02)*sj4);
IkReal x1772=(cj1*py);
IkReal x1773=((0.02)*pz);
IkReal x1774=(cj4*sj4);
IkReal x1775=((0.312)*cj4);
CheckValue<IkReal> x1776 = IKatan2WithCheck(IkReal(((0.01247)+(((0.125)*pz))+(((0.097588)*sj4))+(((-0.01248)*x1769))+(((1.0e-5)*cj4))+((pz*x1772))+(((0.096944)*x1774))+(((-1.0)*pz*x1770)))),IkReal(((-0.09743225)+(((-0.096944)*x1769))+(((-0.01246)*sj4))+(((-0.01248)*x1774))+(pz*pz)+(((-0.194376)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1776.valid){
continue;
}
CheckValue<IkReal> x1777=IKPowWithIntegerCheck(IKsign(((0.0389375)+(((0.312)*pz*sj4))+x1773+((x1771*x1772))+(((0.0025)*sj4))+(((-1.0)*cj4*x1773))+(((0.039)*cj4))+(((-1.0)*x1770*x1775))+(((-1.0)*x1770*x1771))+((x1772*x1775))+(((0.3115)*x1772))+(((-0.3115)*x1770)))),-1);
if(!x1777.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1776.value)+(((1.5707963267949)*(x1777.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1778=IKsin(j2);
IkReal x1779=IKcos(j2);
IkReal x1780=((0.02)*cj4);
IkReal x1781=(px*sj1);
IkReal x1782=(cj1*py);
IkReal x1783=((0.312)*sj4);
IkReal x1784=((0.312)*cj4);
IkReal x1785=((0.623)*x1779);
IkReal x1786=((1.0)*x1778);
IkReal x1787=(pz*x1779);
IkReal x1788=((0.04)*x1778);
IkReal x1789=((0.02)*x1778);
IkReal x1790=((0.02)*x1779);
evalcond[0]=((-0.02)+(((-1.0)*x1783))+x1780+x1787+(((0.125)*x1778))+((x1778*x1782))+(((-1.0)*x1781*x1786)));
evalcond[1]=((0.3115)+(((0.02)*sj4))+x1784+(((0.125)*x1779))+((x1779*x1782))+(((-1.0)*pz*x1786))+(((-1.0)*x1779*x1781)));
evalcond[2]=(x1790+((x1779*x1783))+((x1778*x1784))+(((-1.0)*pz))+((sj4*x1789))+(((-1.0)*x1779*x1780))+(((0.3115)*x1778)));
evalcond[3]=((0.125)+(((-1.0)*x1789))+x1782+((x1779*x1784))+((x1778*x1780))+(((-1.0)*x1781))+((sj4*x1790))+(((-1.0)*x1778*x1783))+(((0.3115)*x1779)));
evalcond[4]=((-0.01553825)+((x1782*x1788))+(((0.04)*x1787))+(((-0.25)*x1782))+(((0.25)*x1781))+(((0.03)*cj1*px))+(((-1.0)*pp))+(((0.623)*pz*x1778))+(((0.03)*py*sj1))+(((-1.0)*x1781*x1788))+(((0.005)*x1778))+((x1781*x1785))+(((-1.0)*x1782*x1785))+(((-0.077875)*x1779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1791=cj4*cj4;
IkReal x1792=(px*sj1);
IkReal x1793=((0.02)*cj4);
IkReal x1794=((0.312)*sj4);
IkReal x1795=((0.01248)*sj4);
IkReal x1796=(cj1*py);
CheckValue<IkReal> x1797=IKPowWithIntegerCheck(IKsign(((-0.0025)+(((-1.0)*x1792*x1793))+((x1793*x1796))+(((0.0025)*cj4))+(((0.02)*pz*sj4))+(((-0.039)*sj4))+(((0.312)*cj4*pz))+(((-0.02)*x1796))+((x1792*x1794))+(((0.3115)*pz))+(((0.02)*x1792))+(((-1.0)*x1794*x1796)))),-1);
if(!x1797.valid){
continue;
}
CheckValue<IkReal> x1798 = IKatan2WithCheck(IkReal(((-0.097744)+(((-1.0)*x1795))+(((0.096944)*x1791))+(pz*pz)+((cj4*x1795))+(((0.0008)*cj4)))),IkReal(((0.01247)+((pz*x1792))+(((0.097588)*sj4))+(((-0.125)*pz))+(((1.0e-5)*cj4))+(((-1.0)*pz*x1796))+(((0.096944)*cj4*sj4))+(((-0.01248)*x1791)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1798.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1797.value)))+(x1798.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1799=IKsin(j2);
IkReal x1800=IKcos(j2);
IkReal x1801=((0.02)*cj4);
IkReal x1802=(px*sj1);
IkReal x1803=(cj1*py);
IkReal x1804=((0.312)*sj4);
IkReal x1805=((0.312)*cj4);
IkReal x1806=((0.623)*x1800);
IkReal x1807=((1.0)*x1799);
IkReal x1808=(pz*x1800);
IkReal x1809=((0.04)*x1799);
IkReal x1810=((0.02)*x1799);
IkReal x1811=((0.02)*x1800);
evalcond[0]=((-0.02)+((x1799*x1803))+(((-1.0)*x1802*x1807))+(((-1.0)*x1804))+(((0.125)*x1799))+x1801+x1808);
evalcond[1]=((0.3115)+(((-1.0)*x1800*x1802))+(((0.02)*sj4))+((x1800*x1803))+(((0.125)*x1800))+(((-1.0)*pz*x1807))+x1805);
evalcond[2]=(((x1799*x1805))+((x1800*x1804))+(((0.3115)*x1799))+(((-1.0)*pz))+(((-1.0)*x1800*x1801))+x1811+((sj4*x1810)));
evalcond[3]=((0.125)+(((-1.0)*x1810))+(((0.3115)*x1800))+((x1799*x1801))+((x1800*x1805))+(((-1.0)*x1799*x1804))+x1803+((sj4*x1811))+(((-1.0)*x1802)));
evalcond[4]=((-0.01553825)+((x1802*x1806))+(((0.25)*x1802))+(((0.623)*pz*x1799))+(((0.03)*cj1*px))+(((-1.0)*x1802*x1809))+(((0.005)*x1799))+((x1803*x1809))+(((-1.0)*pp))+(((0.04)*x1808))+(((-0.25)*x1803))+(((0.03)*py*sj1))+(((-0.077875)*x1800))+(((-1.0)*x1803*x1806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1812=px*px;
IkReal x1813=cj1*cj1;
IkReal x1814=py*py;
IkReal x1815=(cj1*sj1);
IkReal x1816=((0.03)*sj3);
IkReal x1817=(cj1*py);
IkReal x1818=((0.009345)*cj3);
IkReal x1819=((0.15575)*sj3);
IkReal x1820=(cj1*px);
IkReal x1821=((0.077875)*cj3);
IkReal x1822=(pp*sj3);
IkReal x1823=((0.04)*pz);
IkReal x1824=(py*sj1);
IkReal x1825=(pz*sj3);
IkReal x1826=(px*py);
IkReal x1827=((0.623)*cj3);
IkReal x1828=((0.04678825)*sj3);
IkReal x1829=(px*sj1);
IkReal x1830=((0.00375)*sj3);
IkReal x1831=((0.623)*x1814);
IkReal x1832=(sj3*x1813);
IkReal x1833=((0.623)*x1812);
IkReal x1834=((0.25)*x1812);
CheckValue<IkReal> x1835 = IKatan2WithCheck(IkReal(((((-0.25)*x1817*x1825))+(((-1.0)*x1821*x1824))+(((-1.246)*cj3*x1813*x1826))+(((-1.0)*x1814*x1815*x1827))+(((-1.0)*pz*x1822))+((x1826*x1827))+(((0.0006)*pz))+(((-1.0)*x1818*x1829))+(((0.001168125)*cj3))+((x1817*x1818))+((x1812*x1815*x1827))+(((-0.01553825)*x1825))+(((-1.0)*x1823*x1824))+(((-1.0)*x1820*x1823))+(((-1.0)*x1820*x1821))+(((0.25)*x1825*x1829))+((pz*x1816*x1824))+((pz*x1816*x1820)))),IkReal(((-7.5e-5)+(((-0.04)*x1812*x1815))+(((-1.0)*x1832*x1834))+(((-0.04)*x1826))+(((-0.0006)*x1817))+(((0.125)*x1822))+(((0.00194228125)*sj3))+((sj3*x1834))+(((-1.0)*pz*x1824*x1827))+(((-1.0)*x1814*x1815*x1816))+(((0.25)*x1814*x1832))+((pz*x1818))+(((0.0006)*x1829))+(((-1.0)*x1828*x1829))+(((-1.0)*x1822*x1829))+(((-1.0)*x1820*x1830))+(((-0.06)*x1826*x1832))+(((-0.5)*sj3*x1815*x1826))+((x1812*x1815*x1816))+((x1816*x1826))+(((0.005)*x1824))+(((0.005)*x1820))+((x1817*x1828))+((x1817*x1822))+(((0.04)*x1814*x1815))+(((-1.0)*x1824*x1830))+(((0.08)*x1813*x1826))+(((-1.0)*pz*x1820*x1827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1835.valid){
continue;
}
CheckValue<IkReal> x1836=IKPowWithIntegerCheck(IKsign((((x1819*x1829))+(((-0.623)*pz*x1825))+(((-1.0)*sj3*x1833))+(((-0.009734375)*sj3))+((x1832*x1833))+(((-1.0)*x1831*x1832))+(((1.246)*sj3*x1815*x1826))+(((-1.0)*x1817*x1819)))),-1);
if(!x1836.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1835.value)+(((1.5707963267949)*(x1836.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x1837=IKsin(j2);
IkReal x1838=IKcos(j2);
IkReal x1839=(sj1*sj3);
IkReal x1840=((0.04)*py);
IkReal x1841=(cj1*px);
IkReal x1842=((1.0)*cj3);
IkReal x1843=(cj1*py);
IkReal x1844=(px*sj1);
IkReal x1845=(py*sj1);
IkReal x1846=((0.04)*cj3);
IkReal x1847=(px*x1837);
IkReal x1848=(sj3*x1837);
IkReal x1849=((0.623)*x1838);
IkReal x1850=(cj3*x1837);
IkReal x1851=(pz*x1838);
evalcond[0]=((((-1.0)*x1842*x1845))+(((-1.0)*x1841*x1842))+(((-1.0)*x1839*x1847))+(((0.125)*x1848))+((x1843*x1848))+((sj3*x1851))+(((0.015)*cj3)));
evalcond[1]=((-0.01553825)+(((0.623)*pz*x1837))+(((-1.0)*cj1*x1840*x1850))+(((-1.0)*x1843*x1849))+(((0.03)*x1841))+(((0.03)*x1845))+(((-0.04)*sj3*x1841))+(((-1.0)*x1839*x1840))+((x1844*x1849))+(((0.0006)*sj3))+((x1837*x1844*x1846))+(((-0.005)*x1850))+(((0.25)*x1844))+(((-1.0)*pp))+(((-0.077875)*x1838))+(((-1.0)*x1846*x1851))+(((-0.25)*x1843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1852=((49.5109674251105)*cj2);
IkReal x1853=(px*sj1);
IkReal x1854=(pz*sj2);
IkReal x1855=(cj1*py);
IkReal x1856=(cj1*px);
IkReal x1857=((6.37890816827631)*cj2);
IkReal x1858=(py*sj1);
if( IKabs(((1.11237876493698)+((x1852*x1855))+(((6.18887092813881)*cj2))+(((-2.39400883941725)*x1858))+(((-2.39400883941725)*x1856))+(((-1.0)*x1852*x1853))+(((-49.5109674251105)*x1854))+(((19.9500736618104)*x1855))+(((79.8002946472418)*pp))+(((-19.9500736618104)*x1853)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.06970376698314)+(((-0.797363521034539)*cj2))+(((6.37890816827631)*x1854))+(((-5.11540350302832)*pp))+(((0.15346210509085)*x1856))+(((0.15346210509085)*x1858))+(((1.27885087575708)*x1853))+((x1853*x1857))+(((-1.0)*x1855*x1857))+(((-1.27885087575708)*x1855)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.11237876493698)+((x1852*x1855))+(((6.18887092813881)*cj2))+(((-2.39400883941725)*x1858))+(((-2.39400883941725)*x1856))+(((-1.0)*x1852*x1853))+(((-49.5109674251105)*x1854))+(((19.9500736618104)*x1855))+(((79.8002946472418)*pp))+(((-19.9500736618104)*x1853))))+IKsqr(((-1.06970376698314)+(((-0.797363521034539)*cj2))+(((6.37890816827631)*x1854))+(((-5.11540350302832)*pp))+(((0.15346210509085)*x1856))+(((0.15346210509085)*x1858))+(((1.27885087575708)*x1853))+((x1853*x1857))+(((-1.0)*x1855*x1857))+(((-1.27885087575708)*x1855))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.11237876493698)+((x1852*x1855))+(((6.18887092813881)*cj2))+(((-2.39400883941725)*x1858))+(((-2.39400883941725)*x1856))+(((-1.0)*x1852*x1853))+(((-49.5109674251105)*x1854))+(((19.9500736618104)*x1855))+(((79.8002946472418)*pp))+(((-19.9500736618104)*x1853))), ((-1.06970376698314)+(((-0.797363521034539)*cj2))+(((6.37890816827631)*x1854))+(((-5.11540350302832)*pp))+(((0.15346210509085)*x1856))+(((0.15346210509085)*x1858))+(((1.27885087575708)*x1853))+((x1853*x1857))+(((-1.0)*x1855*x1857))+(((-1.27885087575708)*x1855))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1859=IKcos(j4);
IkReal x1860=IKsin(j4);
IkReal x1861=(cj1*px);
IkReal x1862=((0.02)*sj3);
IkReal x1863=(px*sj1);
IkReal x1864=(cj1*py);
IkReal x1865=((1.0)*pz);
IkReal x1866=((0.02)*cj3);
IkReal x1867=(py*sj1);
IkReal x1868=(cj2*cj3);
IkReal x1869=(cj3*sj2);
IkReal x1870=((1.0)*sj3);
IkReal x1871=((0.312)*x1860);
IkReal x1872=((0.02)*x1860);
IkReal x1873=(sj2*x1859);
IkReal x1874=((0.312)*x1859);
evalcond[0]=((-0.015)+((sj3*x1871))+x1861+x1862+x1867+(((-1.0)*x1859*x1862)));
evalcond[1]=((0.3115)+(((-1.0)*cj2*x1863))+x1874+x1872+(((-1.0)*sj2*x1865))+(((0.125)*cj2))+((cj2*x1864)));
evalcond[2]=((0.17932625)+(((0.03)*x1861))+(((0.03)*x1867))+(((0.02494)*x1860))+(((-1.0)*pp))+(((0.193576)*x1859))+(((0.25)*x1863))+(((-0.25)*x1864)));
evalcond[3]=((((-1.0)*x1868*x1871))+((sj2*x1872))+(((0.312)*x1873))+(((-1.0)*cj2*x1866))+(((0.3115)*sj2))+((cj2*x1859*x1866))+(((-1.0)*x1865)));
evalcond[4]=((0.125)+((cj2*x1874))+((cj2*x1872))+(((-1.0)*x1866*x1873))+x1864+((sj2*x1866))+(((0.3115)*cj2))+((x1869*x1871))+(((-1.0)*x1863)));
evalcond[5]=((-0.02)+(((-1.0)*x1871))+(((-1.0)*x1864*x1869))+(((0.02)*x1859))+(((-1.0)*x1865*x1868))+((x1863*x1869))+(((-1.0)*x1867*x1870))+(((0.015)*sj3))+(((-1.0)*x1861*x1870))+(((-0.125)*x1869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1875=(pp*sj3);
IkReal x1876=(py*sj1);
IkReal x1877=((585000.0)*sj3);
IkReal x1878=(cj1*sj3);
IkReal x1879=(cj1*px);
IkReal x1880=(px*sj1*sj3);
CheckValue<IkReal> x1881 = IKatan2WithCheck(IkReal(((181477.5)+(((-312500.0)*x1880))+(((-466127.8125)*sj3))+(((1250000.0)*x1875))+(((-12098500.0)*x1876))+(((-12098500.0)*x1879))+(((-37500.0)*sj3*x1876))+(((312500.0)*py*x1878))+(((-37500.0)*px*x1878)))),IkReal(((-23381.25)+(((1558750.0)*x1876))+(((1558750.0)*x1879))+(((-1.0)*x1876*x1877))+(((4875000.0)*py*x1878))+(((-1.0)*x1877*x1879))+(((-4875000.0)*x1880))+(((-3465686.875)*sj3))+(((19500000.0)*x1875)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1881.valid){
continue;
}
CheckValue<IkReal> x1882=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1881.value)+(((1.5707963267949)*(x1882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1883=IKsin(j4);
IkReal x1884=IKcos(j4);
IkReal x1885=(cj1*px);
IkReal x1886=(py*sj1);
IkReal x1887=((0.02)*sj3);
evalcond[0]=((-0.015)+(((0.312)*sj3*x1883))+(((-1.0)*x1884*x1887))+x1887+x1886+x1885);
evalcond[1]=((0.17932625)+(((0.193576)*x1884))+(((0.25)*px*sj1))+(((-0.25)*cj1*py))+(((-1.0)*pp))+(((0.02494)*x1883))+(((0.03)*x1885))+(((0.03)*x1886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
IkReal x1888=(px*sj1);
IkReal x1889=((0.02)*sj4);
IkReal x1890=(cj1*py);
IkReal x1891=((0.312)*cj4);
IkReal x1892=(cj3*pz);
IkReal x1893=((8.0)*sj4);
IkReal x1894=((124.8)*cj4);
j2eval[0]=((15.575)+sj4+(((8.0)*cj4*x1892))+(((-124.8)*sj4*x1892))+(((-1.0)*x1888*x1893))+(((-1.0)*x1888*x1894))+(((-124.6)*x1888))+(((-8.0)*x1892))+(((124.6)*x1890))+(((15.6)*cj4))+((x1890*x1894))+((x1890*x1893)));
j2eval[1]=IKsign(((0.0389375)+(((0.02)*cj4*x1892))+(((-0.3115)*x1888))+(((-0.312)*sj4*x1892))+(((-1.0)*x1888*x1889))+(((-1.0)*x1888*x1891))+(((0.0025)*sj4))+(((-0.02)*x1892))+(((0.3115)*x1890))+(((0.039)*cj4))+((x1889*x1890))+((x1890*x1891))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x1895=(cj4*pz);
IkReal x1896=(cj3*sj4);
IkReal x1897=(pz*sj4);
IkReal x1898=(cj3*cj4);
IkReal x1899=(cj1*py);
IkReal x1900=(px*sj1);
IkReal x1901=(cj3*x1900);
j2eval[0]=((((-8.0)*x1898*x1899))+(((124.6)*pz))+cj3+(((8.0)*cj3*x1899))+(((-8.0)*x1901))+(((-124.8)*x1896*x1900))+(((15.6)*x1896))+(((124.8)*x1896*x1899))+(((-1.0)*x1898))+(((8.0)*x1897))+(((8.0)*x1898*x1900))+(((124.8)*x1895)));
j2eval[1]=IKsign(((((-0.0025)*x1898))+(((-0.312)*x1896*x1900))+(((0.02)*x1898*x1900))+(((0.0025)*cj3))+(((0.312)*x1896*x1899))+(((-0.02)*x1901))+(((0.02)*cj3*x1899))+(((0.039)*x1896))+(((0.312)*x1895))+(((0.3115)*pz))+(((0.02)*x1897))+(((-0.02)*x1898*x1899))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x1902=cj1*cj1;
IkReal x1903=px*px;
IkReal x1904=py*py;
IkReal x1905=pz*pz;
IkReal x1906=((4.0)*sj3);
IkReal x1907=(px*sj1*sj3);
IkReal x1908=(cj1*py*sj3);
IkReal x1909=(x1902*x1904);
IkReal x1910=(x1902*x1903);
IkReal x1911=(cj1*py*x1907);
j2eval[0]=((((0.0625)*sj3))+((x1905*x1906))+(((-8.0)*x1911))+((x1903*x1906))+(((-1.0)*x1907))+x1908+((x1906*x1909))+(((-1.0)*x1906*x1910)));
j2eval[1]=IKsign(((((0.015625)*sj3))+(((-2.0)*x1911))+(((-1.0)*sj3*x1910))+(((-0.25)*x1907))+(((0.25)*x1908))+((sj3*x1905))+((sj3*x1903))+((sj3*x1909))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1912=cj4*cj4;
IkReal x1913=((8.0)*pz);
IkReal x1914=(px*sj1);
IkReal x1915=((0.02)*sj4);
IkReal x1916=(pz*sj4);
IkReal x1917=(cj1*py);
IkReal x1918=((0.02)*pz);
IkReal x1919=((0.312)*cj4);
IkReal x1920=(cj4*sj4);
IkReal x1921=((8.0)*sj4);
IkReal x1922=((124.8)*cj4);
j2eval[0]=((15.575)+sj4+(((-124.6)*x1914))+(((124.6)*x1917))+(((-1.0)*x1914*x1922))+(((-1.0)*x1914*x1921))+((x1917*x1921))+((x1917*x1922))+(((-124.8)*x1916))+(((-1.0)*x1913))+((cj4*x1913))+(((15.6)*cj4)));
j2eval[1]=((IKabs(((-0.09743225)+(((-0.01246)*sj4))+(pz*pz)+(((-0.096944)*x1912))+(((-0.01248)*x1920))+(((-0.194376)*cj4)))))+(IKabs(((-0.01247)+(((0.125)*pz))+(((-0.097588)*sj4))+((pz*x1917))+(((-0.096944)*x1920))+(((-1.0)*pz*x1914))+(((0.01248)*x1912))+(((-1.0e-5)*cj4))))));
j2eval[2]=IKsign(((0.0389375)+(((-1.0)*x1914*x1915))+(((-1.0)*x1914*x1919))+(((-0.312)*x1916))+(((0.3115)*x1917))+((x1917*x1919))+(((0.0025)*sj4))+(((0.039)*cj4))+(((-0.3115)*x1914))+((x1915*x1917))+(((-1.0)*x1918))+((cj4*x1918))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1923=cj4*cj4;
IkReal x1924=(cj4*pz);
IkReal x1925=(cj1*py);
IkReal x1926=(pz*sj4);
IkReal x1927=(px*sj1);
IkReal x1928=((8.0)*cj4);
IkReal x1929=((124.8)*sj4);
IkReal x1930=((0.312)*sj4);
IkReal x1931=((0.01248)*sj4);
IkReal x1932=((0.02)*cj4);
j2eval[0]=((1.0)+(((124.6)*pz))+((x1927*x1928))+(((8.0)*x1926))+(((8.0)*x1925))+(((124.8)*x1924))+(((-1.0)*x1927*x1929))+(((-1.0)*x1925*x1928))+(((-8.0)*x1927))+(((-1.0)*cj4))+((x1925*x1929))+(((15.6)*sj4)));
j2eval[1]=((IKabs(((-0.097744)+((cj4*x1931))+(((0.096944)*x1923))+(pz*pz)+(((0.0008)*cj4))+(((-1.0)*x1931)))))+(IKabs(((-0.01247)+((pz*x1927))+(((-0.097588)*sj4))+(((-1.0)*pz*x1925))+(((0.01248)*x1923))+(((-0.125)*pz))+(((-0.096944)*cj4*sj4))+(((-1.0e-5)*cj4))))));
j2eval[2]=IKsign(((0.0025)+(((0.02)*x1926))+(((0.02)*x1925))+(((-0.0025)*cj4))+((x1925*x1930))+(((-1.0)*x1925*x1932))+(((0.039)*sj4))+(((0.3115)*pz))+(((-0.02)*x1927))+((x1927*x1932))+(((-1.0)*x1927*x1930))+(((0.312)*x1924))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1933=(cj4*pz);
IkReal x1934=(cj1*py);
IkReal x1935=((124.8)*sj4);
IkReal x1936=(pz*sj4);
IkReal x1937=(px*sj1);
IkReal x1938=((0.312)*sj4);
IkReal x1939=(cj4*x1937);
j2eval[0]=((1.0)+(((124.8)*x1933))+(((124.6)*pz))+(((-8.0)*cj4*x1934))+((x1934*x1935))+(((-8.0)*x1937))+(((8.0)*x1939))+(((8.0)*x1936))+(((8.0)*x1934))+(((-1.0)*cj4))+(((-1.0)*x1935*x1937))+(((15.6)*sj4)));
j2eval[1]=IKsign(((0.0025)+(((-1.0)*x1937*x1938))+(((-0.0025)*cj4))+((x1934*x1938))+(((-0.02)*x1937))+(((-0.02)*cj4*x1934))+(((0.039)*sj4))+(((0.312)*x1933))+(((0.3115)*pz))+(((0.02)*x1939))+(((0.02)*x1936))+(((0.02)*x1934))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
IkReal x1940=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1940);
rxp0_1=(px*r20);
rxp1_0=(r21*x1940);
rxp1_1=(px*r21);
rxp2_0=(r22*x1940);
rxp2_1=(px*r22);
j2eval[0]=((-1.0)+(((-8.0)*cj1*py))+(((8.0)*px*sj1)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x1941=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1941);
rxp0_1=(px*r20);
rxp1_0=(r21*x1941);
rxp1_1=(px*r21);
rxp2_0=(r22*x1941);
rxp2_1=(px*r22);
IkReal x1942=cj1*cj1;
IkReal x1943=px*px;
IkReal x1944=(px*sj1);
IkReal x1945=(cj1*py);
IkReal x1946=((64.0)*x1943);
j2eval[0]=((-1.0)+(((-1.0)*x1946))+(((16.0)*x1944))+(((128.0)*x1944*x1945))+(((-16.0)*x1945))+(((-64.0)*x1942*(py*py)))+((x1942*x1946)));
j2eval[1]=((1.0)+(((-8.0)*x1944))+(((8.0)*x1945)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1947=px*px;
IkReal x1948=py*py;
IkReal x1949=cj1*cj1;
IkReal x1950=(cj1*py);
IkReal x1951=((60.0)*cj1);
IkReal x1952=((2000.0)*sj1);
IkReal x1953=(px*py);
IkReal x1954=(px*sj1);
IkReal x1955=(sj1*x1948);
IkReal x1956=((80.0)*x1947);
IkReal x1957=(x1948*x1949);
CheckValue<IkReal> x1958=IKPowWithIntegerCheck(((-1.25)+(((160.0)*x1950*x1954))+(((-1.0)*x1956))+(((-80.0)*x1957))+(((20.0)*x1954))+((x1949*x1956))+(((-20.0)*x1950))),-1);
if(!x1958.valid){
continue;
}
CheckValue<IkReal> x1959=IKPowWithIntegerCheck(((250.0)+(((-1.0)*px*x1952))+(((2000.0)*x1950))),-1);
if(!x1959.valid){
continue;
}
if( IKabs(((x1958.value)*(((-93.2255625)+((sj1*x1947*x1951))+(((-1000.0)*x1950*x1954))+(((-120.0)*x1949*x1953))+(((500.0)*x1957))+(((-7.5)*py*sj1))+(((2000.0)*x1950*(py*py)))+(((-500.0)*x1947*x1949))+(((-1.0)*x1951*x1955))+(((-683.3045)*x1950))+(((750.0)*x1947))+(((2000.0)*x1947*x1950))+(((60.0)*x1953))+(((-1.0)*x1952*(px*px*px)))+(((-7.5)*cj1*px))+(((250.0)*x1948))+(((-1.0)*px*x1948*x1952))+(((683.3045)*x1954)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1247.0)*(x1959.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1958.value)*(((-93.2255625)+((sj1*x1947*x1951))+(((-1000.0)*x1950*x1954))+(((-120.0)*x1949*x1953))+(((500.0)*x1957))+(((-7.5)*py*sj1))+(((2000.0)*x1950*(py*py)))+(((-500.0)*x1947*x1949))+(((-1.0)*x1951*x1955))+(((-683.3045)*x1950))+(((750.0)*x1947))+(((2000.0)*x1947*x1950))+(((60.0)*x1953))+(((-1.0)*x1952*(px*px*px)))+(((-7.5)*cj1*px))+(((250.0)*x1948))+(((-1.0)*px*x1948*x1952))+(((683.3045)*x1954))))))+IKsqr(((-1247.0)*(x1959.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1958.value)*(((-93.2255625)+((sj1*x1947*x1951))+(((-1000.0)*x1950*x1954))+(((-120.0)*x1949*x1953))+(((500.0)*x1957))+(((-7.5)*py*sj1))+(((2000.0)*x1950*(py*py)))+(((-500.0)*x1947*x1949))+(((-1.0)*x1951*x1955))+(((-683.3045)*x1950))+(((750.0)*x1947))+(((2000.0)*x1947*x1950))+(((60.0)*x1953))+(((-1.0)*x1952*(px*px*px)))+(((-7.5)*cj1*px))+(((250.0)*x1948))+(((-1.0)*px*x1948*x1952))+(((683.3045)*x1954))))), ((-1247.0)*(x1959.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1960=IKsin(j2);
IkReal x1961=IKcos(j2);
IkReal x1962=(px*sj1);
IkReal x1963=(cj1*py);
IkReal x1964=((0.623)*x1961);
IkReal x1965=((0.04)*x1960);
evalcond[0]=((0.6235)*x1960);
evalcond[1]=((0.125)+(((-1.0)*x1962))+x1963+(((0.6235)*x1961)));
evalcond[2]=((((-1.0)*x1960*x1963))+((x1960*x1962))+(((-0.125)*x1960)));
evalcond[3]=((0.6235)+(((-1.0)*x1961*x1962))+((x1961*x1963))+(((0.125)*x1961)));
evalcond[4]=((-0.01553825)+(((-1.0)*(px*px)))+(((0.03)*cj1*px))+(((-0.25)*x1963))+(((0.25)*x1962))+(((-0.005)*x1960))+((x1962*x1964))+((x1962*x1965))+(((0.03)*py*sj1))+(((-1.0)*x1963*x1965))+(((-1.0)*x1963*x1964))+(((-1.0)*(py*py)))+(((-0.077875)*x1961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1966=px*px;
IkReal x1967=cj1*cj1;
IkReal x1968=py*py;
IkReal x1969=(px*sj1);
IkReal x1970=(cj1*py);
IkReal x1971=((1246.0)*x1967);
CheckValue<IkReal> x1972=IKPowWithIntegerCheck(((-6.235)+(((-49.88)*x1970))+(((49.88)*x1969))),-1);
if(!x1972.valid){
continue;
}
if( IKabs(((x1972.value)*(((-0.09255225)+(((-0.25)*x1969))+(((0.25)*x1970))+(((-1.0)*x1968*x1971))+x1966+(((-37.41)*cj1*px))+((x1966*x1971))+(((-37.41)*py*sj1))+(((2492.0)*x1969*x1970))+(((1247.0)*x1968)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.200481154771451)+(((1.60384923817161)*x1969))+(((-1.60384923817161)*x1970)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1972.value)*(((-0.09255225)+(((-0.25)*x1969))+(((0.25)*x1970))+(((-1.0)*x1968*x1971))+x1966+(((-37.41)*cj1*px))+((x1966*x1971))+(((-37.41)*py*sj1))+(((2492.0)*x1969*x1970))+(((1247.0)*x1968))))))+IKsqr(((-0.200481154771451)+(((1.60384923817161)*x1969))+(((-1.60384923817161)*x1970))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1972.value)*(((-0.09255225)+(((-0.25)*x1969))+(((0.25)*x1970))+(((-1.0)*x1968*x1971))+x1966+(((-37.41)*cj1*px))+((x1966*x1971))+(((-37.41)*py*sj1))+(((2492.0)*x1969*x1970))+(((1247.0)*x1968))))), ((-0.200481154771451)+(((1.60384923817161)*x1969))+(((-1.60384923817161)*x1970))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1973=IKsin(j2);
IkReal x1974=IKcos(j2);
IkReal x1975=(px*sj1);
IkReal x1976=(cj1*py);
IkReal x1977=((0.623)*x1974);
IkReal x1978=((0.04)*x1973);
evalcond[0]=((0.6235)*x1973);
evalcond[1]=((0.125)+(((-1.0)*x1975))+x1976+(((0.6235)*x1974)));
evalcond[2]=((((-1.0)*x1973*x1976))+((x1973*x1975))+(((-0.125)*x1973)));
evalcond[3]=((0.6235)+(((-1.0)*x1974*x1975))+((x1974*x1976))+(((0.125)*x1974)));
evalcond[4]=((-0.01553825)+(((-1.0)*x1976*x1978))+(((-1.0)*x1976*x1977))+(((-1.0)*(px*px)))+((x1975*x1977))+((x1975*x1978))+(((0.03)*cj1*px))+(((-0.25)*x1976))+(((0.25)*x1975))+(((-0.005)*x1973))+(((0.03)*py*sj1))+(((-1.0)*(py*py)))+(((-0.077875)*x1974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1979=cj1*cj1;
IkReal x1980=px*px;
IkReal x1981=cj4*cj4;
IkReal x1982=(cj1*py);
IkReal x1983=(px*sj1);
IkReal x1984=((0.312)*sj4);
IkReal x1985=((0.02)*cj4);
IkReal x1986=(cj4*sj4);
CheckValue<IkReal> x1987=IKPowWithIntegerCheck(IKsign(((0.0025)+(((-1.0)*x1983*x1984))+(((-0.0025)*cj4))+(((-0.02)*x1983))+(((0.02)*pz*sj4))+(((0.312)*cj4*pz))+(((0.02)*x1982))+((x1982*x1984))+(((0.039)*sj4))+(((0.3115)*pz))+(((-1.0)*x1982*x1985))+((x1983*x1985)))),-1);
if(!x1987.valid){
continue;
}
CheckValue<IkReal> x1988 = IKatan2WithCheck(IkReal(((0.08180725)+(((2.0)*x1982*x1983))+(((-0.25)*x1982))+(((0.25)*x1983))+((x1979*x1980))+(((0.01246)*sj4))+(((-1.0)*x1979*(py*py)))+(((0.194376)*cj4))+(((-1.0)*x1980))+(((0.096944)*x1981))+(((0.01248)*x1986)))),IkReal(((-0.01247)+(((-0.097588)*sj4))+((pz*x1983))+(((-0.125)*pz))+(((-1.0e-5)*cj4))+(((-0.096944)*x1986))+(((-1.0)*pz*x1982))+(((0.01248)*x1981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1988.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1987.value)))+(x1988.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1989=IKcos(j2);
IkReal x1990=IKsin(j2);
IkReal x1991=((0.02)*cj4);
IkReal x1992=(px*sj1);
IkReal x1993=(cj1*py);
IkReal x1994=((0.312)*sj4);
IkReal x1995=((0.312)*cj4);
IkReal x1996=((0.623)*x1989);
IkReal x1997=((1.0)*x1990);
IkReal x1998=(pz*x1989);
IkReal x1999=((0.04)*x1990);
IkReal x2000=((0.02)*x1990);
IkReal x2001=((0.02)*x1989);
evalcond[0]=((0.3115)+(((0.02)*sj4))+(((-1.0)*x1989*x1992))+x1995+(((-1.0)*pz*x1997))+((x1989*x1993))+(((0.125)*x1989)));
evalcond[1]=((-0.02)+(((-1.0)*x1993*x1997))+(((-0.125)*x1990))+x1991+(((-1.0)*x1994))+((x1990*x1992))+(((-1.0)*x1998)));
evalcond[2]=((((0.3115)*x1990))+(((-1.0)*x1989*x1994))+(((-1.0)*pz))+(((-1.0)*x2001))+((x1989*x1991))+((x1990*x1995))+((sj4*x2000)));
evalcond[3]=((0.125)+x2000+x1993+((x1989*x1995))+(((0.3115)*x1989))+(((-1.0)*x1990*x1991))+((x1990*x1994))+((sj4*x2001))+(((-1.0)*x1992)));
evalcond[4]=((-0.01553825)+(((-1.0)*x1993*x1999))+(((-1.0)*x1993*x1996))+(((-0.25)*x1993))+(((0.25)*x1992))+(((0.03)*cj1*px))+(((-1.0)*pp))+(((-0.005)*x1990))+(((-0.077875)*x1989))+(((0.03)*py*sj1))+(((0.623)*pz*x1990))+((x1992*x1996))+((x1992*x1999))+(((-0.04)*x1998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2002=cj4*cj4;
IkReal x2003=(px*sj1);
IkReal x2004=((0.312)*sj4);
IkReal x2005=(cj4*sj4);
IkReal x2006=(cj1*py);
IkReal x2007=((0.02)*x2006);
CheckValue<IkReal> x2008=IKPowWithIntegerCheck(IKsign(((0.0025)+(((-0.0025)*cj4))+(((-1.0)*x2003*x2004))+x2007+(((-0.02)*x2003))+(((0.02)*pz*sj4))+(((0.02)*cj4*x2003))+(((0.312)*cj4*pz))+(((-1.0)*cj4*x2007))+(((0.039)*sj4))+(((0.3115)*pz))+((x2004*x2006)))),-1);
if(!x2008.valid){
continue;
}
CheckValue<IkReal> x2009 = IKatan2WithCheck(IkReal(((-0.097744)+(pz*pz)+(((-0.01248)*sj4))+(((0.096944)*x2002))+(((0.01248)*x2005))+(((0.0008)*cj4)))),IkReal(((-0.01247)+(((-0.097588)*sj4))+(((-1.0)*pz*x2006))+(((-0.096944)*x2005))+(((-0.125)*pz))+((pz*x2003))+(((0.01248)*x2002))+(((-1.0e-5)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2009.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2008.value)))+(x2009.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2010=IKcos(j2);
IkReal x2011=IKsin(j2);
IkReal x2012=((0.02)*cj4);
IkReal x2013=(px*sj1);
IkReal x2014=(cj1*py);
IkReal x2015=((0.312)*sj4);
IkReal x2016=((0.312)*cj4);
IkReal x2017=((0.623)*x2010);
IkReal x2018=((1.0)*x2011);
IkReal x2019=(pz*x2010);
IkReal x2020=((0.04)*x2011);
IkReal x2021=((0.02)*x2011);
IkReal x2022=((0.02)*x2010);
evalcond[0]=((0.3115)+(((-1.0)*pz*x2018))+(((0.02)*sj4))+x2016+((x2010*x2014))+(((0.125)*x2010))+(((-1.0)*x2010*x2013)));
evalcond[1]=((-0.02)+(((-1.0)*x2015))+x2012+((x2011*x2013))+(((-1.0)*x2014*x2018))+(((-1.0)*x2019))+(((-0.125)*x2011)));
evalcond[2]=((((-1.0)*x2010*x2015))+((x2011*x2016))+((x2010*x2012))+(((-1.0)*pz))+(((0.3115)*x2011))+(((-1.0)*x2022))+((sj4*x2021)));
evalcond[3]=((0.125)+x2021+x2014+((x2011*x2015))+((x2010*x2016))+(((0.3115)*x2010))+(((-1.0)*x2011*x2012))+(((-1.0)*x2013))+((sj4*x2022)));
evalcond[4]=((-0.01553825)+(((0.25)*x2013))+(((-0.04)*x2019))+(((0.03)*cj1*px))+(((-1.0)*x2014*x2017))+(((-1.0)*pp))+(((-0.005)*x2011))+(((-0.077875)*x2010))+((x2013*x2020))+(((-1.0)*x2014*x2020))+(((0.03)*py*sj1))+(((0.623)*pz*x2011))+(((-0.25)*x2014))+((x2013*x2017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2023=cj4*cj4;
IkReal x2024=(px*sj1);
IkReal x2025=((0.02)*sj4);
IkReal x2026=(cj1*py);
IkReal x2027=((0.02)*pz);
IkReal x2028=(cj4*sj4);
IkReal x2029=((0.312)*cj4);
CheckValue<IkReal> x2030=IKPowWithIntegerCheck(IKsign(((0.0389375)+((cj4*x2027))+((x2026*x2029))+(((0.3115)*x2026))+((x2025*x2026))+(((0.0025)*sj4))+(((-1.0)*x2024*x2029))+(((-1.0)*x2024*x2025))+(((-0.312)*pz*sj4))+(((0.039)*cj4))+(((-1.0)*x2027))+(((-0.3115)*x2024)))),-1);
if(!x2030.valid){
continue;
}
CheckValue<IkReal> x2031 = IKatan2WithCheck(IkReal(((-0.01247)+(((0.125)*pz))+(((-1.0)*pz*x2024))+(((-0.097588)*sj4))+(((-0.096944)*x2028))+((pz*x2026))+(((-1.0e-5)*cj4))+(((0.01248)*x2023)))),IkReal(((-0.09743225)+(((-0.096944)*x2023))+(((-0.01248)*x2028))+(((-0.01246)*sj4))+(pz*pz)+(((-0.194376)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2031.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2030.value)))+(x2031.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2032=IKcos(j2);
IkReal x2033=IKsin(j2);
IkReal x2034=((0.02)*cj4);
IkReal x2035=(px*sj1);
IkReal x2036=(cj1*py);
IkReal x2037=((0.312)*sj4);
IkReal x2038=((0.312)*cj4);
IkReal x2039=((0.623)*x2032);
IkReal x2040=((1.0)*x2033);
IkReal x2041=(pz*x2032);
IkReal x2042=((0.04)*x2033);
IkReal x2043=((0.02)*x2033);
IkReal x2044=((0.02)*x2032);
evalcond[0]=((0.3115)+(((0.02)*sj4))+x2038+((x2032*x2036))+(((-1.0)*x2032*x2035))+(((0.125)*x2032))+(((-1.0)*pz*x2040)));
evalcond[1]=((-0.02)+((x2033*x2035))+x2034+(((-0.125)*x2033))+(((-1.0)*x2041))+(((-1.0)*x2037))+(((-1.0)*x2036*x2040)));
evalcond[2]=((((0.3115)*x2033))+(((-1.0)*x2044))+((x2033*x2038))+((x2032*x2034))+((sj4*x2043))+(((-1.0)*pz))+(((-1.0)*x2032*x2037)));
evalcond[3]=((0.125)+(((0.3115)*x2032))+((x2033*x2037))+x2043+x2036+((x2032*x2038))+((sj4*x2044))+(((-1.0)*x2035))+(((-1.0)*x2033*x2034)));
evalcond[4]=((-0.01553825)+(((-1.0)*x2036*x2039))+(((-0.005)*x2033))+(((-0.25)*x2036))+(((0.03)*cj1*px))+(((0.623)*pz*x2033))+(((-1.0)*pp))+(((0.25)*x2035))+(((-1.0)*x2036*x2042))+((x2035*x2039))+(((0.03)*py*sj1))+(((-0.077875)*x2032))+((x2035*x2042))+(((-0.04)*x2041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2045=cj4*cj4;
IkReal x2046=(cj4*pz);
IkReal x2047=(cj1*py);
IkReal x2048=(pz*sj4);
IkReal x2049=((124.8)*sj4);
IkReal x2050=(px*sj1);
IkReal x2051=(cj4*sj4);
IkReal x2052=((0.312)*sj4);
IkReal x2053=(cj4*x2050);
j2eval[0]=((-1.0)+(((124.6)*pz))+(((-15.6)*sj4))+(((-8.0)*x2047))+cj4+((x2049*x2050))+(((8.0)*cj4*x2047))+(((-8.0)*x2053))+(((8.0)*x2050))+(((-1.0)*x2047*x2049))+(((124.8)*x2046))+(((8.0)*x2048)));
j2eval[1]=IKsign(((-0.0025)+(((0.312)*x2046))+(((-0.02)*x2053))+(((0.0025)*cj4))+(((-0.039)*sj4))+(((0.02)*cj4*x2047))+(((0.02)*x2050))+(((-0.02)*x2047))+(((0.02)*x2048))+(((0.3115)*pz))+((x2050*x2052))+(((-1.0)*x2047*x2052))));
j2eval[2]=((IKabs(((-0.097744)+(((0.096944)*x2045))+(pz*pz)+(((-0.01248)*sj4))+(((0.01248)*x2051))+(((0.0008)*cj4)))))+(IKabs(((0.01247)+(((-0.01248)*x2045))+(((0.097588)*sj4))+(((-0.125)*pz))+(((1.0e-5)*cj4))+((pz*x2050))+(((-1.0)*pz*x2047))+(((0.096944)*x2051))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2054=cj4*cj4;
IkReal x2055=((8.0)*pz);
IkReal x2056=(px*sj1);
IkReal x2057=((0.02)*sj4);
IkReal x2058=(pz*sj4);
IkReal x2059=(cj4*sj4);
IkReal x2060=(cj1*py);
IkReal x2061=((0.312)*cj4);
IkReal x2062=((0.02)*pz);
IkReal x2063=((124.8)*cj4);
IkReal x2064=((8.0)*sj4);
j2eval[0]=((15.575)+sj4+(((124.8)*x2058))+x2055+(((-124.6)*x2056))+((x2060*x2063))+((x2060*x2064))+(((-1.0)*x2056*x2063))+(((-1.0)*x2056*x2064))+(((-1.0)*cj4*x2055))+(((124.6)*x2060))+(((15.6)*cj4)));
j2eval[1]=IKsign(((0.0389375)+(((-0.3115)*x2056))+(((0.3115)*x2060))+x2062+(((0.0025)*sj4))+(((-1.0)*x2056*x2057))+((x2060*x2061))+(((0.039)*cj4))+(((-1.0)*x2056*x2061))+(((-1.0)*cj4*x2062))+((x2057*x2060))+(((0.312)*x2058))));
j2eval[2]=((IKabs(((0.01247)+(((0.125)*pz))+(((-1.0)*pz*x2056))+(((-0.01248)*x2054))+(((0.097588)*sj4))+(((1.0e-5)*cj4))+((pz*x2060))+(((0.096944)*x2059)))))+(IKabs(((-0.09743225)+(((-0.096944)*x2054))+(((-0.01248)*x2059))+(((-0.01246)*sj4))+(pz*pz)+(((-0.194376)*cj4))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2065=((0.02)*pz);
IkReal x2066=((8.0)*pz);
IkReal x2067=(cj1*py);
IkReal x2068=(px*sj1);
IkReal x2069=((0.02)*sj4);
IkReal x2070=((8.0)*sj4);
IkReal x2071=(pz*sj4);
IkReal x2072=((124.8)*cj4);
IkReal x2073=((0.312)*cj4);
j2eval[0]=((15.575)+sj4+x2066+(((-124.6)*x2068))+(((124.8)*x2071))+(((-1.0)*cj4*x2066))+(((124.6)*x2067))+(((-1.0)*x2068*x2070))+(((-1.0)*x2068*x2072))+((x2067*x2070))+((x2067*x2072))+(((15.6)*cj4)));
j2eval[1]=IKsign(((0.0389375)+((x2067*x2069))+(((0.3115)*x2067))+x2065+(((0.0025)*sj4))+(((0.039)*cj4))+(((-1.0)*cj4*x2065))+(((-1.0)*x2068*x2073))+(((-1.0)*x2068*x2069))+(((0.312)*x2071))+((x2067*x2073))+(((-0.3115)*x2068))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
IkReal x2074=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2074);
rxp0_1=(px*r20);
rxp1_0=(r21*x2074);
rxp1_1=(px*r21);
rxp2_0=(r22*x2074);
rxp2_1=(px*r22);
j2eval[0]=((1.0)+(((8.0)*cj1*py))+(((-8.0)*px*sj1)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x2075=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2075);
rxp0_1=(px*r20);
rxp1_0=(r21*x2075);
rxp1_1=(px*r21);
rxp2_0=(r22*x2075);
rxp2_1=(px*r22);
IkReal x2076=cj1*cj1;
IkReal x2077=px*px;
IkReal x2078=(px*sj1);
IkReal x2079=(cj1*py);
IkReal x2080=((64.0)*x2077);
j2eval[0]=((1.0)+x2080+(((-1.0)*x2076*x2080))+(((-16.0)*x2078))+(((-128.0)*x2078*x2079))+(((64.0)*x2076*(py*py)))+(((16.0)*x2079)));
j2eval[1]=((1.0)+(((8.0)*x2079))+(((-8.0)*x2078)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2081=px*px;
IkReal x2082=py*py;
IkReal x2083=cj1*cj1;
IkReal x2084=(cj1*py);
IkReal x2085=((60.0)*cj1);
IkReal x2086=((2000.0)*sj1);
IkReal x2087=(px*py);
IkReal x2088=(px*sj1);
IkReal x2089=(sj1*x2082);
IkReal x2090=((80.0)*x2081);
IkReal x2091=(x2082*x2083);
CheckValue<IkReal> x2092=IKPowWithIntegerCheck(((1.25)+(((-1.0)*x2083*x2090))+(((-160.0)*x2084*x2088))+x2090+(((-20.0)*x2088))+(((80.0)*x2091))+(((20.0)*x2084))),-1);
if(!x2092.valid){
continue;
}
CheckValue<IkReal> x2093=IKPowWithIntegerCheck(((250.0)+(((2000.0)*x2084))+(((-1.0)*px*x2086))),-1);
if(!x2093.valid){
continue;
}
if( IKabs(((x2092.value)*(((-93.2255625)+(((750.0)*x2081))+((sj1*x2081*x2085))+(((250.0)*x2082))+(((-1.0)*x2086*(px*px*px)))+(((683.3045)*x2088))+(((500.0)*x2091))+(((-7.5)*py*sj1))+(((-1.0)*x2085*x2089))+(((-1.0)*px*x2082*x2086))+(((2000.0)*x2081*x2084))+(((-500.0)*x2081*x2083))+(((-120.0)*x2083*x2087))+(((-1000.0)*x2084*x2088))+(((-683.3045)*x2084))+(((2000.0)*x2084*(py*py)))+(((-7.5)*cj1*px))+(((60.0)*x2087)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1247.0)*(x2093.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2092.value)*(((-93.2255625)+(((750.0)*x2081))+((sj1*x2081*x2085))+(((250.0)*x2082))+(((-1.0)*x2086*(px*px*px)))+(((683.3045)*x2088))+(((500.0)*x2091))+(((-7.5)*py*sj1))+(((-1.0)*x2085*x2089))+(((-1.0)*px*x2082*x2086))+(((2000.0)*x2081*x2084))+(((-500.0)*x2081*x2083))+(((-120.0)*x2083*x2087))+(((-1000.0)*x2084*x2088))+(((-683.3045)*x2084))+(((2000.0)*x2084*(py*py)))+(((-7.5)*cj1*px))+(((60.0)*x2087))))))+IKsqr(((-1247.0)*(x2093.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x2092.value)*(((-93.2255625)+(((750.0)*x2081))+((sj1*x2081*x2085))+(((250.0)*x2082))+(((-1.0)*x2086*(px*px*px)))+(((683.3045)*x2088))+(((500.0)*x2091))+(((-7.5)*py*sj1))+(((-1.0)*x2085*x2089))+(((-1.0)*px*x2082*x2086))+(((2000.0)*x2081*x2084))+(((-500.0)*x2081*x2083))+(((-120.0)*x2083*x2087))+(((-1000.0)*x2084*x2088))+(((-683.3045)*x2084))+(((2000.0)*x2084*(py*py)))+(((-7.5)*cj1*px))+(((60.0)*x2087))))), ((-1247.0)*(x2093.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2094=IKsin(j2);
IkReal x2095=IKcos(j2);
IkReal x2096=(px*sj1);
IkReal x2097=(cj1*py);
IkReal x2098=((0.623)*x2095);
IkReal x2099=((0.04)*x2094);
evalcond[0]=((0.6235)*x2094);
evalcond[1]=((0.125)+x2097+(((0.6235)*x2095))+(((-1.0)*x2096)));
evalcond[2]=(((x2094*x2097))+(((0.125)*x2094))+(((-1.0)*x2094*x2096)));
evalcond[3]=((0.6235)+(((0.125)*x2095))+(((-1.0)*x2095*x2096))+((x2095*x2097)));
evalcond[4]=((-0.01553825)+(((-1.0)*(px*px)))+(((-1.0)*x2096*x2099))+(((-1.0)*x2097*x2098))+(((0.25)*x2096))+(((0.03)*cj1*px))+((x2096*x2098))+((x2097*x2099))+(((-0.077875)*x2095))+(((0.03)*py*sj1))+(((-0.25)*x2097))+(((-1.0)*(py*py)))+(((0.005)*x2094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2100=px*px;
IkReal x2101=cj1*cj1;
IkReal x2102=py*py;
IkReal x2103=(px*sj1);
IkReal x2104=(cj1*py);
IkReal x2105=((1246.0)*x2101);
CheckValue<IkReal> x2106=IKPowWithIntegerCheck(((6.235)+(((49.88)*x2104))+(((-49.88)*x2103))),-1);
if(!x2106.valid){
continue;
}
if( IKabs(((x2106.value)*(((-0.09255225)+(((-0.25)*x2103))+(((-1.0)*x2102*x2105))+(((1247.0)*x2102))+x2100+((x2100*x2105))+(((2492.0)*x2103*x2104))+(((-37.41)*cj1*px))+(((0.25)*x2104))+(((-37.41)*py*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.200481154771451)+(((-1.60384923817161)*x2104))+(((1.60384923817161)*x2103)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2106.value)*(((-0.09255225)+(((-0.25)*x2103))+(((-1.0)*x2102*x2105))+(((1247.0)*x2102))+x2100+((x2100*x2105))+(((2492.0)*x2103*x2104))+(((-37.41)*cj1*px))+(((0.25)*x2104))+(((-37.41)*py*sj1))))))+IKsqr(((-0.200481154771451)+(((-1.60384923817161)*x2104))+(((1.60384923817161)*x2103))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x2106.value)*(((-0.09255225)+(((-0.25)*x2103))+(((-1.0)*x2102*x2105))+(((1247.0)*x2102))+x2100+((x2100*x2105))+(((2492.0)*x2103*x2104))+(((-37.41)*cj1*px))+(((0.25)*x2104))+(((-37.41)*py*sj1))))), ((-0.200481154771451)+(((-1.60384923817161)*x2104))+(((1.60384923817161)*x2103))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2107=IKsin(j2);
IkReal x2108=IKcos(j2);
IkReal x2109=(px*sj1);
IkReal x2110=(cj1*py);
IkReal x2111=((0.623)*x2108);
IkReal x2112=((0.04)*x2107);
evalcond[0]=((0.6235)*x2107);
evalcond[1]=((0.125)+x2110+(((-1.0)*x2109))+(((0.6235)*x2108)));
evalcond[2]=((((0.125)*x2107))+((x2107*x2110))+(((-1.0)*x2107*x2109)));
evalcond[3]=((0.6235)+(((-1.0)*x2108*x2109))+(((0.125)*x2108))+((x2108*x2110)));
evalcond[4]=((-0.01553825)+((x2109*x2111))+(((-1.0)*(px*px)))+(((0.03)*cj1*px))+(((-0.077875)*x2108))+(((0.005)*x2107))+(((-0.25)*x2110))+((x2110*x2112))+(((-1.0)*x2109*x2112))+(((-1.0)*x2110*x2111))+(((0.25)*x2109))+(((0.03)*py*sj1))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2113=cj1*cj1;
IkReal x2114=px*px;
IkReal x2115=cj4*cj4;
IkReal x2116=(px*sj1);
IkReal x2117=((0.02)*sj4);
IkReal x2118=(cj1*py);
IkReal x2119=((0.01248)*sj4);
IkReal x2120=((0.02)*pz);
IkReal x2121=((0.312)*cj4);
CheckValue<IkReal> x2122 = IKatan2WithCheck(IkReal(((0.01247)+(((0.125)*pz))+(((-1.0)*pz*x2116))+(((0.097588)*sj4))+(((1.0e-5)*cj4))+(((-0.01248)*x2115))+((pz*x2118))+(((0.096944)*cj4*sj4)))),IkReal(((0.082119)+(((-0.096944)*x2115))+(((0.25)*x2116))+x2119+(((-1.0)*cj4*x2119))+(((-0.0008)*cj4))+(((-0.25)*x2118))+(((2.0)*x2116*x2118))+(((-1.0)*x2114))+((x2113*x2114))+(((-1.0)*x2113*(py*py))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2122.valid){
continue;
}
CheckValue<IkReal> x2123=IKPowWithIntegerCheck(IKsign(((0.0389375)+(((0.312)*pz*sj4))+((x2117*x2118))+(((-1.0)*x2116*x2121))+(((-1.0)*x2116*x2117))+x2120+(((0.0025)*sj4))+(((0.3115)*x2118))+(((0.039)*cj4))+(((-0.3115)*x2116))+((x2118*x2121))+(((-1.0)*cj4*x2120)))),-1);
if(!x2123.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2122.value)+(((1.5707963267949)*(x2123.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2124=IKsin(j2);
IkReal x2125=IKcos(j2);
IkReal x2126=((0.02)*cj4);
IkReal x2127=(px*sj1);
IkReal x2128=(cj1*py);
IkReal x2129=((0.312)*sj4);
IkReal x2130=((0.312)*cj4);
IkReal x2131=((0.623)*x2125);
IkReal x2132=((1.0)*x2124);
IkReal x2133=(pz*x2125);
IkReal x2134=((0.04)*x2124);
IkReal x2135=((0.02)*x2124);
IkReal x2136=((0.02)*x2125);
evalcond[0]=((-0.02)+(((0.125)*x2124))+x2126+x2133+(((-1.0)*x2129))+(((-1.0)*x2127*x2132))+((x2124*x2128)));
evalcond[1]=((0.3115)+((x2125*x2128))+(((0.125)*x2125))+(((0.02)*sj4))+x2130+(((-1.0)*x2125*x2127))+(((-1.0)*pz*x2132)));
evalcond[2]=(((x2125*x2129))+(((-1.0)*x2125*x2126))+((sj4*x2135))+x2136+((x2124*x2130))+(((0.3115)*x2124))+(((-1.0)*pz)));
evalcond[3]=((0.125)+(((-1.0)*x2135))+((sj4*x2136))+x2128+(((-1.0)*x2127))+(((0.3115)*x2125))+((x2124*x2126))+((x2125*x2130))+(((-1.0)*x2124*x2129)));
evalcond[4]=((-0.01553825)+(((0.03)*cj1*px))+(((0.04)*x2133))+(((0.25)*x2127))+(((-1.0)*pp))+(((-1.0)*x2127*x2134))+(((-1.0)*x2128*x2131))+((x2127*x2131))+(((0.005)*x2124))+((x2128*x2134))+(((-0.25)*x2128))+(((-0.077875)*x2125))+(((0.03)*py*sj1))+(((0.623)*pz*x2124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2137=cj4*cj4;
IkReal x2138=(px*sj1);
IkReal x2139=((0.02)*sj4);
IkReal x2140=(cj1*py);
IkReal x2141=((0.02)*pz);
IkReal x2142=(cj4*sj4);
IkReal x2143=((0.312)*cj4);
CheckValue<IkReal> x2144 = IKatan2WithCheck(IkReal(((0.01247)+(((0.125)*pz))+(((0.097588)*sj4))+(((-0.01248)*x2137))+(((1.0e-5)*cj4))+((pz*x2140))+(((0.096944)*x2142))+(((-1.0)*pz*x2138)))),IkReal(((-0.09743225)+(((-0.01248)*x2142))+(((-0.096944)*x2137))+(((-0.01246)*sj4))+(pz*pz)+(((-0.194376)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2144.valid){
continue;
}
CheckValue<IkReal> x2145=IKPowWithIntegerCheck(IKsign(((0.0389375)+(((0.312)*pz*sj4))+(((-1.0)*x2138*x2143))+(((-0.3115)*x2138))+x2141+(((-1.0)*cj4*x2141))+(((0.0025)*sj4))+((x2140*x2143))+(((0.039)*cj4))+(((0.3115)*x2140))+(((-1.0)*x2138*x2139))+((x2139*x2140)))),-1);
if(!x2145.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2144.value)+(((1.5707963267949)*(x2145.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2146=IKsin(j2);
IkReal x2147=IKcos(j2);
IkReal x2148=((0.02)*cj4);
IkReal x2149=(px*sj1);
IkReal x2150=(cj1*py);
IkReal x2151=((0.312)*sj4);
IkReal x2152=((0.312)*cj4);
IkReal x2153=((0.623)*x2147);
IkReal x2154=((1.0)*x2146);
IkReal x2155=(pz*x2147);
IkReal x2156=((0.04)*x2146);
IkReal x2157=((0.02)*x2146);
IkReal x2158=((0.02)*x2147);
evalcond[0]=((-0.02)+(((-1.0)*x2149*x2154))+((x2146*x2150))+(((0.125)*x2146))+x2155+x2148+(((-1.0)*x2151)));
evalcond[1]=((0.3115)+((x2147*x2150))+(((0.02)*sj4))+(((0.125)*x2147))+x2152+(((-1.0)*pz*x2154))+(((-1.0)*x2147*x2149)));
evalcond[2]=(((x2147*x2151))+((x2146*x2152))+x2158+(((-1.0)*pz))+((sj4*x2157))+(((0.3115)*x2146))+(((-1.0)*x2147*x2148)));
evalcond[3]=((0.125)+((x2146*x2148))+(((-1.0)*x2149))+((x2147*x2152))+x2150+((sj4*x2158))+(((-1.0)*x2157))+(((0.3115)*x2147))+(((-1.0)*x2146*x2151)));
evalcond[4]=((-0.01553825)+(((-1.0)*x2149*x2156))+(((-0.077875)*x2147))+((x2149*x2153))+(((0.623)*pz*x2146))+(((0.03)*cj1*px))+(((0.25)*x2149))+((x2150*x2156))+(((-1.0)*pp))+(((0.03)*py*sj1))+(((-0.25)*x2150))+(((0.005)*x2146))+(((-1.0)*x2150*x2153))+(((0.04)*x2155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2159=cj4*cj4;
IkReal x2160=(px*sj1);
IkReal x2161=((0.02)*cj4);
IkReal x2162=((0.312)*sj4);
IkReal x2163=((0.01248)*sj4);
IkReal x2164=(cj1*py);
CheckValue<IkReal> x2165=IKPowWithIntegerCheck(IKsign(((-0.0025)+(((-1.0)*x2160*x2161))+(((0.0025)*cj4))+(((-0.02)*x2164))+(((0.02)*x2160))+(((0.02)*pz*sj4))+(((-0.039)*sj4))+((x2161*x2164))+(((0.312)*cj4*pz))+(((0.3115)*pz))+((x2160*x2162))+(((-1.0)*x2162*x2164)))),-1);
if(!x2165.valid){
continue;
}
CheckValue<IkReal> x2166 = IKatan2WithCheck(IkReal(((-0.097744)+((cj4*x2163))+(pz*pz)+(((-1.0)*x2163))+(((0.0008)*cj4))+(((0.096944)*x2159)))),IkReal(((0.01247)+(((-0.01248)*x2159))+(((-1.0)*pz*x2164))+(((0.097588)*sj4))+(((-0.125)*pz))+(((1.0e-5)*cj4))+((pz*x2160))+(((0.096944)*cj4*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2166.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2165.value)))+(x2166.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2167=IKsin(j2);
IkReal x2168=IKcos(j2);
IkReal x2169=((0.02)*cj4);
IkReal x2170=(px*sj1);
IkReal x2171=(cj1*py);
IkReal x2172=((0.312)*sj4);
IkReal x2173=((0.312)*cj4);
IkReal x2174=((0.623)*x2168);
IkReal x2175=((1.0)*x2167);
IkReal x2176=(pz*x2168);
IkReal x2177=((0.04)*x2167);
IkReal x2178=((0.02)*x2167);
IkReal x2179=((0.02)*x2168);
evalcond[0]=((-0.02)+(((-1.0)*x2170*x2175))+x2176+x2169+(((0.125)*x2167))+((x2167*x2171))+(((-1.0)*x2172)));
evalcond[1]=((0.3115)+(((-1.0)*x2168*x2170))+(((0.02)*sj4))+x2173+(((-1.0)*pz*x2175))+(((0.125)*x2168))+((x2168*x2171)));
evalcond[2]=((((-1.0)*x2168*x2169))+x2179+(((-1.0)*pz))+(((0.3115)*x2167))+((x2167*x2173))+((x2168*x2172))+((sj4*x2178)));
evalcond[3]=((0.125)+x2171+(((0.3115)*x2168))+((x2167*x2169))+(((-1.0)*x2170))+(((-1.0)*x2178))+((x2168*x2173))+((sj4*x2179))+(((-1.0)*x2167*x2172)));
evalcond[4]=((-0.01553825)+(((-1.0)*x2171*x2174))+(((-1.0)*x2170*x2177))+(((0.25)*x2170))+((x2170*x2174))+(((-0.077875)*x2168))+(((0.03)*cj1*px))+((x2171*x2177))+(((-0.25)*x2171))+(((0.04)*x2176))+(((-1.0)*pp))+(((0.03)*py*sj1))+(((0.005)*x2167))+(((0.623)*pz*x2167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2180=cj1*cj1;
IkReal x2181=px*px;
IkReal x2182=py*py;
IkReal x2183=(cj3*py);
IkReal x2184=((2.0)*px);
IkReal x2185=((0.312)*cj4);
IkReal x2186=(cj1*cj3);
IkReal x2187=(cj1*py);
IkReal x2188=(pz*sj3);
IkReal x2189=((0.015)*cj3);
IkReal x2190=(px*sj1*sj3);
IkReal x2191=((0.02)*sj3*sj4);
IkReal x2192=(sj3*x2181);
CheckValue<IkReal> x2193=IKPowWithIntegerCheck(IKsign((((pz*x2188))+(((-1.0)*x2180*x2192))+(((-1.0)*sj1*sj3*x2184*x2187))+x2192+(((0.015625)*sj3))+(((-0.25)*x2190))+((sj3*x2180*x2182))+(((0.25)*sj3*x2187)))),-1);
if(!x2193.valid){
continue;
}
CheckValue<IkReal> x2194 = IKatan2WithCheck(IkReal((((px*sj1*x2189))+(((-0.001875)*cj3))+((sj1*x2182*x2186))+(((0.125)*sj1*x2183))+(((-1.0)*sj1*x2181*x2186))+((x2180*x2183*x2184))+(((0.125)*px*x2186))+(((0.02)*sj4*x2188))+(((0.3115)*x2188))+(((-1.0)*px*x2183))+(((-0.015)*cj1*x2183))+((x2185*x2188)))),IkReal(((((-1.0)*x2187*x2191))+(((-1.0)*pz*x2189))+(((-0.3115)*sj3*x2187))+((px*pz*x2186))+(((0.3115)*x2190))+((pz*sj1*x2183))+(((-1.0)*sj3*x2185*x2187))+(((-0.0389375)*sj3))+((x2185*x2190))+(((-0.0025)*sj3*sj4))+(((0.02)*sj4*x2190))+(((-0.039)*cj4*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2194.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2193.value)))+(x2194.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2195=IKcos(j2);
IkReal x2196=IKsin(j2);
IkReal x2197=(sj1*sj3);
IkReal x2198=((0.04)*py);
IkReal x2199=(cj1*px);
IkReal x2200=((0.312)*sj4);
IkReal x2201=((1.0)*cj3);
IkReal x2202=((1.0)*pz);
IkReal x2203=((1.0)*px);
IkReal x2204=(cj1*py);
IkReal x2205=(px*sj1);
IkReal x2206=((0.312)*cj4);
IkReal x2207=((0.02)*cj4);
IkReal x2208=((0.02)*sj4);
IkReal x2209=(py*sj1);
IkReal x2210=(cj3*x2195);
IkReal x2211=(cj3*x2196);
IkReal x2212=((0.623)*x2195);
IkReal x2213=(x2196*x2204);
IkReal x2214=((0.02)*x2211);
evalcond[0]=((0.3115)+(((0.125)*x2195))+(((-1.0)*sj1*x2195*x2203))+x2206+x2208+(((-1.0)*x2196*x2202))+((x2195*x2204)));
evalcond[1]=((((-1.0)*x2202))+(((-1.0)*x2200*x2210))+((x2207*x2210))+(((0.3115)*x2196))+((x2196*x2208))+((x2196*x2206))+(((-0.02)*x2210)));
evalcond[2]=(((sj3*x2213))+(((-1.0)*x2196*x2197*x2203))+(((0.125)*sj3*x2196))+(((-1.0)*x2199*x2201))+((pz*sj3*x2195))+(((-1.0)*x2201*x2209))+(((0.015)*cj3)));
evalcond[3]=((0.125)+x2204+x2214+(((-1.0)*sj1*x2203))+(((-1.0)*x2207*x2211))+((x2200*x2211))+(((0.3115)*x2195))+((x2195*x2208))+((x2195*x2206)));
evalcond[4]=((-0.02)+x2207+(((-1.0)*x2200))+(((-1.0)*py*x2197))+((x2205*x2211))+(((0.015)*sj3))+(((-1.0)*pz*x2195*x2201))+(((-1.0)*sj3*x2199))+(((-1.0)*x2201*x2213))+(((-0.125)*x2211)));
evalcond[5]=((-0.01553825)+(((0.03)*x2199))+(((-0.04)*pz*x2210))+(((-1.0)*x2204*x2212))+(((-0.04)*sj3*x2199))+(((0.623)*pz*x2196))+(((0.0006)*sj3))+(((-0.25)*x2204))+(((-1.0)*x2197*x2198))+((x2205*x2212))+(((-1.0)*pp))+(((0.04)*x2205*x2211))+(((-1.0)*cj1*x2198*x2211))+(((0.25)*x2205))+(((0.03)*x2209))+(((-0.077875)*x2195))+(((-0.005)*x2211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2215=cj1*cj1;
IkReal x2216=px*px;
IkReal x2217=cj4*cj4;
IkReal x2218=(cj3*sj4);
IkReal x2219=(cj1*py);
IkReal x2220=(px*sj1);
IkReal x2221=((0.02)*cj3);
IkReal x2222=((0.0025)*cj3);
CheckValue<IkReal> x2223 = IKatan2WithCheck(IkReal(((0.08180725)+(((0.01248)*cj4*sj4))+(((-1.0)*x2216))+(((0.25)*x2220))+(((-0.25)*x2219))+(((0.01246)*sj4))+(((0.096944)*x2217))+(((2.0)*x2219*x2220))+(((0.194376)*cj4))+((x2215*x2216))+(((-1.0)*x2215*(py*py))))),IkReal(((((-1.0e-5)*cj3*cj4))+(((-1.0)*pz*x2219))+(((-0.125)*pz))+(((0.01248)*cj3*x2217))+(((-0.01247)*cj3))+(((-0.096944)*cj4*x2218))+(((-0.097588)*x2218))+((pz*x2220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2223.valid){
continue;
}
CheckValue<IkReal> x2224=IKPowWithIntegerCheck(IKsign(((((0.312)*x2218*x2219))+x2222+(((-1.0)*x2220*x2221))+(((0.02)*pz*sj4))+(((-0.312)*x2218*x2220))+((cj4*x2220*x2221))+(((0.312)*cj4*pz))+(((0.039)*x2218))+(((-1.0)*cj4*x2222))+((x2219*x2221))+(((0.3115)*pz))+(((-1.0)*cj4*x2219*x2221)))),-1);
if(!x2224.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2223.value)+(((1.5707963267949)*(x2224.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2225=IKcos(j2);
IkReal x2226=IKsin(j2);
IkReal x2227=(sj1*sj3);
IkReal x2228=((0.04)*py);
IkReal x2229=(cj1*px);
IkReal x2230=((0.312)*sj4);
IkReal x2231=((1.0)*cj3);
IkReal x2232=((1.0)*pz);
IkReal x2233=((1.0)*px);
IkReal x2234=(cj1*py);
IkReal x2235=(px*sj1);
IkReal x2236=((0.312)*cj4);
IkReal x2237=((0.02)*cj4);
IkReal x2238=((0.02)*sj4);
IkReal x2239=(py*sj1);
IkReal x2240=(cj3*x2225);
IkReal x2241=(cj3*x2226);
IkReal x2242=((0.623)*x2225);
IkReal x2243=(x2226*x2234);
IkReal x2244=((0.02)*x2241);
evalcond[0]=((0.3115)+(((-1.0)*sj1*x2225*x2233))+x2238+x2236+(((-1.0)*x2226*x2232))+((x2225*x2234))+(((0.125)*x2225)));
evalcond[1]=(((x2226*x2238))+((x2226*x2236))+(((-1.0)*x2230*x2240))+(((-1.0)*x2232))+(((-0.02)*x2240))+((x2237*x2240))+(((0.3115)*x2226)));
evalcond[2]=((((0.125)*sj3*x2226))+(((-1.0)*x2226*x2227*x2233))+((pz*sj3*x2225))+(((-1.0)*x2229*x2231))+((sj3*x2243))+(((-1.0)*x2231*x2239))+(((0.015)*cj3)));
evalcond[3]=((0.125)+(((-1.0)*x2237*x2241))+x2234+x2244+((x2230*x2241))+((x2225*x2236))+((x2225*x2238))+(((-1.0)*sj1*x2233))+(((0.3115)*x2225)));
evalcond[4]=((-0.02)+(((-1.0)*py*x2227))+x2237+((x2235*x2241))+(((-1.0)*x2231*x2243))+(((-1.0)*pz*x2225*x2231))+(((-1.0)*x2230))+(((0.015)*sj3))+(((-1.0)*sj3*x2229))+(((-0.125)*x2241)));
evalcond[5]=((-0.01553825)+(((-0.005)*x2241))+(((0.03)*x2229))+(((0.25)*x2235))+(((-1.0)*x2234*x2242))+(((0.03)*x2239))+(((-1.0)*x2227*x2228))+(((0.04)*x2235*x2241))+(((0.623)*pz*x2226))+(((0.0006)*sj3))+((x2235*x2242))+(((-0.04)*pz*x2240))+(((-1.0)*pp))+(((-0.04)*sj3*x2229))+(((-1.0)*cj1*x2228*x2241))+(((-0.077875)*x2225))+(((-0.25)*x2234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2245=cj4*cj4;
IkReal x2246=(px*sj1);
IkReal x2247=((0.02)*sj4);
IkReal x2248=(cj1*py);
IkReal x2249=(cj3*sj4);
IkReal x2250=((0.312)*cj4);
IkReal x2251=((0.02)*cj3*pz);
CheckValue<IkReal> x2252 = IKatan2WithCheck(IkReal(((((0.125)*pz))+(((-1.0e-5)*cj3*cj4))+(((0.01248)*cj3*x2245))+(((-0.096944)*cj4*x2249))+(((-0.097588)*x2249))+(((-0.01247)*cj3))+(((-1.0)*pz*x2246))+((pz*x2248)))),IkReal(((-0.09743225)+(((-0.096944)*x2245))+(((-0.01246)*sj4))+(pz*pz)+(((-0.01248)*cj4*sj4))+(((-0.194376)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2252.valid){
continue;
}
CheckValue<IkReal> x2253=IKPowWithIntegerCheck(IKsign(((0.0389375)+((x2247*x2248))+(((-1.0)*x2251))+(((0.0025)*sj4))+(((-0.312)*pz*x2249))+(((0.039)*cj4))+((cj4*x2251))+(((-0.3115)*x2246))+(((-1.0)*x2246*x2250))+(((-1.0)*x2246*x2247))+(((0.3115)*x2248))+((x2248*x2250)))),-1);
if(!x2253.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2252.value)+(((1.5707963267949)*(x2253.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2254=IKcos(j2);
IkReal x2255=IKsin(j2);
IkReal x2256=(sj1*sj3);
IkReal x2257=((0.04)*py);
IkReal x2258=(cj1*px);
IkReal x2259=((0.312)*sj4);
IkReal x2260=((1.0)*cj3);
IkReal x2261=((1.0)*pz);
IkReal x2262=((1.0)*px);
IkReal x2263=(cj1*py);
IkReal x2264=(px*sj1);
IkReal x2265=((0.312)*cj4);
IkReal x2266=((0.02)*cj4);
IkReal x2267=((0.02)*sj4);
IkReal x2268=(py*sj1);
IkReal x2269=(cj3*x2254);
IkReal x2270=(cj3*x2255);
IkReal x2271=((0.623)*x2254);
IkReal x2272=(x2255*x2263);
IkReal x2273=((0.02)*x2270);
evalcond[0]=((0.3115)+x2267+x2265+(((-1.0)*x2255*x2261))+((x2254*x2263))+(((0.125)*x2254))+(((-1.0)*sj1*x2254*x2262)));
evalcond[1]=((((-0.02)*x2269))+((x2255*x2267))+((x2255*x2265))+(((-1.0)*x2259*x2269))+(((0.3115)*x2255))+((x2266*x2269))+(((-1.0)*x2261)));
evalcond[2]=((((0.125)*sj3*x2255))+(((-1.0)*x2260*x2268))+(((-1.0)*x2258*x2260))+((pz*sj3*x2254))+(((-1.0)*x2255*x2256*x2262))+((sj3*x2272))+(((0.015)*cj3)));
evalcond[3]=((0.125)+(((-1.0)*x2266*x2270))+x2263+x2273+((x2259*x2270))+(((0.3115)*x2254))+((x2254*x2265))+((x2254*x2267))+(((-1.0)*sj1*x2262)));
evalcond[4]=((-0.02)+(((-1.0)*pz*x2254*x2260))+x2266+(((-1.0)*x2260*x2272))+(((-0.125)*x2270))+(((-1.0)*x2259))+(((0.015)*sj3))+(((-1.0)*sj3*x2258))+((x2264*x2270))+(((-1.0)*py*x2256)));
evalcond[5]=((-0.01553825)+(((0.25)*x2264))+(((-0.077875)*x2254))+(((0.623)*pz*x2255))+(((-1.0)*cj1*x2257*x2270))+(((-1.0)*x2256*x2257))+(((0.03)*x2268))+(((0.0006)*sj3))+(((-0.005)*x2270))+(((0.04)*x2264*x2270))+(((-1.0)*pp))+(((-1.0)*x2263*x2271))+(((-0.04)*pz*x2269))+(((-0.04)*sj3*x2258))+(((-0.25)*x2263))+((x2264*x2271))+(((0.03)*x2258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x235=(sj1*sj3);
IkReal x236=((1.0)*sj4);
IkReal x237=(cj3*sj2);
IkReal x238=((1.0)*sj1);
IkReal x239=(cj1*sj3);
IkReal x240=(cj2*cj3);
IkReal x241=(cj4*x239);
IkReal x242=((-1.0)*sj1);
IkReal x243=((-1.0)*sj4);
IkReal x244=((1.0)*cj2*sj3);
IkReal x245=((((-1.0)*sj2*x239))+((cj3*sj1)));
IkReal x246=(((sj2*x235))+((cj1*cj3)));
IkReal x247=(((cj4*x237))+(((-1.0)*cj2*x236)));
IkReal x248=(((sj2*sj4))+((cj4*x240)));
IkReal x249=((((-1.0)*x236*x240))+((cj4*sj2)));
IkReal x250=((((-1.0)*cj2*cj4))+(((-1.0)*x236*x237)));
IkReal x251=(cj1*x250);
IkReal x252=(((cj1*x247))+((cj4*x235)));
IkReal x253=(x241+(((-1.0)*x238*x247)));
IkReal x254=((((-1.0)*x235*x236))+x251);
IkReal x255=(((x242*x250))+((x239*x243)));
new_r00=(((r00*x246))+((r10*x245))+(((-1.0)*r20*x244)));
new_r01=(((r01*x246))+((r11*x245))+(((-1.0)*r21*x244)));
new_r02=(((r02*x246))+((r12*x245))+(((-1.0)*r22*x244)));
new_r10=(((r00*x253))+((r10*x252))+((r20*x248)));
new_r11=(((r11*x252))+((r21*x248))+((r01*((x241+((x242*x247)))))));
new_r12=(((r22*x248))+((r12*x252))+((r02*x253)));
new_r20=(((r00*x255))+((r10*x254))+((r20*x249)));
new_r21=(((r11*x254))+((r01*x255))+((r21*x249)));
new_r22=(((r22*x249))+((r02*(((((-1.0)*x238*x250))+(((-1.0)*x236*x239))))))+((r12*((x251+((x235*x243)))))));
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
cj6array[0]=new_r22;
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j5eval[3];
j5eval[0]=sj6;
j5eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j5eval[2]=IKsign(sj6);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
j7eval[0]=sj6;
j7eval[1]=((IKabs(new_r20))+(IKabs(new_r21)));
j7eval[2]=IKsign(sj6);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=new_r12;
j5eval[1]=sj6;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j7mul = 1;
j7=0;
j5mul=-1.0;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5=IKatan2(new_r00, ((-1.0)*new_r10));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].fmul = j5mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].fmul = j7mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j7mul = 1;
j7=0;
j5mul=1.0;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r01));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].fmul = j5mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].fmul = j7mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x256=new_r22*new_r22;
IkReal x257=((16.0)*new_r11);
IkReal x258=((16.0)*new_r00);
IkReal x259=((16.0)*new_r22);
IkReal x260=((8.0)*new_r22);
IkReal x261=((16.0)*x256);
IkReal x262=(x256*x257);
IkReal x263=(x256*x258);
j5eval[0]=((IKabs((x262+(((-1.0)*x257)))))+(IKabs((((new_r10*x259))+(((32.0)*new_r01*x256))+(((-16.0)*new_r01)))))+(IKabs(((((8.0)*new_r01))+((new_r10*x260)))))+(IKabs(((((-1.0)*new_r01*x259))+(((-32.0)*new_r10))+((new_r10*x261)))))+(IKabs((x257+(((-1.0)*x262)))))+(IKabs(((((-1.0)*new_r01*x260))+(((-8.0)*new_r10*x256)))))+(IKabs((x263+(((-1.0)*x258)))))+(IKabs((x258+(((-1.0)*x263))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5, j7]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j5evalpoly[1];
IkReal x264=new_r22*new_r22;
IkReal x265=((16.0)*new_r11);
IkReal x266=(new_r10*new_r22);
IkReal x267=(x264*x265);
IkReal x268=((((8.0)*x266))+(((8.0)*new_r01)));
op[0]=x268;
op[1]=(x267+(((-1.0)*x265)));
op[2]=((((32.0)*new_r01*x264))+(((-16.0)*new_r01))+(((16.0)*x266)));
op[3]=(x265+(((-1.0)*x267)));
op[4]=x268;
polyroots4(op,zeror,numroots);
IkReal j5array[4], cj5array[4], sj5array[4], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[4]={true,true,true,true};
_nj5 = 4;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x269=((16.0)*new_r00);
IkReal x270=new_r22*new_r22;
IkReal x271=(new_r01*new_r22);
IkReal x272=((16.0)*x270);
IkReal x273=(x269*x270);
IkReal x274=((((8.0)*x271))+(((8.0)*new_r10*x270)));
j5evalpoly[0]=(((htj5*((x273+(((-1.0)*x269))))))+(((-1.0)*x274*(htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*((x269+(((-1.0)*x273))))))+(((-1.0)*x274))+(((htj5*htj5)*(((((-16.0)*x271))+(((-32.0)*new_r10))+((new_r10*x272)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j7eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x275=cj5*cj5;
IkReal x276=(cj5*new_r22);
IkReal x277=((1.0)+(((-1.0)*x275))+((x275*(new_r22*new_r22))));
j7eval[0]=x277;
j7eval[1]=((IKabs((((new_r00*sj5))+((new_r01*x276)))))+(IKabs(((((-1.0)*new_r01*sj5))+((new_r00*x276))))));
j7eval[2]=IKsign(x277);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=sj5;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=new_r22;
j7eval[1]=sj5;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x278=IKcos(j7);
IkReal x279=IKsin(j7);
evalcond[0]=(x278+new_r10);
evalcond[1]=((-1.0)*x279);
evalcond[2]=((-1.0)*x278);
evalcond[3]=((((-1.0)*x279))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x280=IKcos(j7);
IkReal x281=IKsin(j7);
evalcond[0]=((-1.0)*x281);
evalcond[1]=((-1.0)*x280);
evalcond[2]=(x280+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x281))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x282=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x282.valid){
continue;
}
if((((-1.0)*(x282.value))) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(((-1.0)*(x282.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj5)))))+(IKabs(((((-1.0)*gconst50))+cj5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
sj5=IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50)))));
cj5=gconst50;
if( (gconst50) < -1-IKFAST_SINCOS_THRESH || (gconst50) > 1+IKFAST_SINCOS_THRESH )
    continue;
j5=IKacos(gconst50);
CheckValue<IkReal> x283=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x283.valid){
continue;
}
if((((-1.0)*(x283.value))) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(((-1.0)*(x283.value)))));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x284=IKPowWithIntegerCheck(gconst50,-1);
if(!x284.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
if( IKabs((new_r11*(x284.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst50*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r11*(x284.value)))+IKsqr(((((-1.0)*gconst50*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r11*(x284.value)), ((((-1.0)*gconst50*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x285=IKcos(j7);
IkReal x286=IKsin(j7);
IkReal x287=((1.0)*x286);
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
IkReal x288=IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50)))));
IkReal x289=((1.0)*x288);
evalcond[0]=((-1.0)*x286);
evalcond[1]=((-1.0)*x285);
evalcond[2]=(((gconst50*x285))+new_r10);
evalcond[3]=((((-1.0)*gconst50*x287))+new_r11);
evalcond[4]=(((x286*x288))+new_r01);
evalcond[5]=((((-1.0)*x285*x289))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x289))+x285+((gconst50*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x289))+(((-1.0)*x287))+((gconst50*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x290=IKPowWithIntegerCheck(IKsign(gconst50),-1);
if(!x290.valid){
continue;
}
CheckValue<IkReal> x291 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x291.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x290.value)))+(x291.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x292=IKcos(j7);
IkReal x293=IKsin(j7);
IkReal x294=((1.0)*x293);
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
IkReal x295=IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50)))));
IkReal x296=((1.0)*x295);
evalcond[0]=((-1.0)*x293);
evalcond[1]=((-1.0)*x292);
evalcond[2]=(((gconst50*x292))+new_r10);
evalcond[3]=((((-1.0)*gconst50*x294))+new_r11);
evalcond[4]=(new_r01+((x293*x295)));
evalcond[5]=(new_r00+(((-1.0)*x292*x296)));
evalcond[6]=(x292+(((-1.0)*new_r00*x296))+((gconst50*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x296))+(((-1.0)*x294))+((gconst50*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x297=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x297.valid){
continue;
}
if((((-1.0)*(x297.value))) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(((-1.0)*(x297.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst50))+cj5)))+(IKabs(((1.0)+(IKsign(sj5)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
sj5=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50)))))));
cj5=gconst50;
if( (gconst50) < -1-IKFAST_SINCOS_THRESH || (gconst50) > 1+IKFAST_SINCOS_THRESH )
    continue;
j5=((-1.0)*(IKacos(gconst50)));
CheckValue<IkReal> x298=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x298.valid){
continue;
}
if((((-1.0)*(x298.value))) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(((-1.0)*(x298.value)))));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x299=IKPowWithIntegerCheck(gconst50,-1);
if(!x299.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
if( IKabs((new_r11*(x299.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))+(((-1.0)*gconst50*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r11*(x299.value)))+IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))+(((-1.0)*gconst50*new_r10))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r11*(x299.value)), ((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))+(((-1.0)*gconst50*new_r10))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x300=IKcos(j7);
IkReal x301=IKsin(j7);
IkReal x302=((1.0)*x301);
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
IkReal x303=IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50)))));
evalcond[0]=((-1.0)*x301);
evalcond[1]=((-1.0)*x300);
evalcond[2]=(((gconst50*x300))+new_r10);
evalcond[3]=((((-1.0)*gconst50*x302))+new_r11);
evalcond[4]=(new_r00+((x300*x303)));
evalcond[5]=((((-1.0)*x302*x303))+new_r01);
evalcond[6]=(((new_r00*x303))+x300+((gconst50*new_r10)));
evalcond[7]=(((new_r01*x303))+(((-1.0)*x302))+((gconst50*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x304=IKPowWithIntegerCheck(IKsign(gconst50),-1);
if(!x304.valid){
continue;
}
CheckValue<IkReal> x305 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x305.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x304.value)))+(x305.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x306=IKcos(j7);
IkReal x307=IKsin(j7);
IkReal x308=((1.0)*x307);
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
IkReal x309=IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50)))));
evalcond[0]=((-1.0)*x307);
evalcond[1]=((-1.0)*x306);
evalcond[2]=(((gconst50*x306))+new_r10);
evalcond[3]=((((-1.0)*gconst50*x308))+new_r11);
evalcond[4]=(new_r00+((x306*x309)));
evalcond[5]=((((-1.0)*x308*x309))+new_r01);
evalcond[6]=(((new_r00*x309))+x306+((gconst50*new_r10)));
evalcond[7]=(((new_r01*x309))+(((-1.0)*x308))+((gconst50*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x310=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x310.valid){
continue;
}
if((((-1.0)*(x310.value))) < -0.00001)
continue;
IkReal gconst51=IKsqrt(((-1.0)*(x310.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj5)))))+(IKabs(((((-1.0)*gconst51))+cj5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
sj5=IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))));
cj5=gconst51;
if( (gconst51) < -1-IKFAST_SINCOS_THRESH || (gconst51) > 1+IKFAST_SINCOS_THRESH )
    continue;
j5=IKacos(gconst51);
CheckValue<IkReal> x311=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x311.valid){
continue;
}
if((((-1.0)*(x311.value))) < -0.00001)
continue;
IkReal gconst51=IKsqrt(((-1.0)*(x311.value)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x312=IKPowWithIntegerCheck(gconst51,-1);
if(!x312.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
if( IKabs((new_r11*(x312.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst51*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r11*(x312.value)))+IKsqr(((((-1.0)*gconst51*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r11*(x312.value)), ((((-1.0)*gconst51*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x313=IKcos(j7);
IkReal x314=IKsin(j7);
IkReal x315=((1.0)*x314);
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
IkReal x316=IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))));
IkReal x317=((1.0)*x316);
evalcond[0]=((-1.0)*x314);
evalcond[1]=((-1.0)*x313);
evalcond[2]=(((gconst51*x313))+new_r10);
evalcond[3]=((((-1.0)*gconst51*x315))+new_r11);
evalcond[4]=(new_r01+((x314*x316)));
evalcond[5]=((((-1.0)*x313*x317))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x317))+x313+((gconst51*new_r10)));
evalcond[7]=((((-1.0)*x315))+(((-1.0)*new_r01*x317))+((gconst51*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x318=IKPowWithIntegerCheck(IKsign(gconst51),-1);
if(!x318.valid){
continue;
}
CheckValue<IkReal> x319 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x319.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x318.value)))+(x319.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x320=IKcos(j7);
IkReal x321=IKsin(j7);
IkReal x322=((1.0)*x321);
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
IkReal x323=IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))));
IkReal x324=((1.0)*x323);
evalcond[0]=((-1.0)*x321);
evalcond[1]=((-1.0)*x320);
evalcond[2]=(((gconst51*x320))+new_r10);
evalcond[3]=((((-1.0)*gconst51*x322))+new_r11);
evalcond[4]=(new_r01+((x321*x323)));
evalcond[5]=((((-1.0)*x320*x324))+new_r00);
evalcond[6]=(x320+(((-1.0)*new_r00*x324))+((gconst51*new_r10)));
evalcond[7]=((((-1.0)*x322))+(((-1.0)*new_r01*x324))+((gconst51*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x325=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x325.valid){
continue;
}
if((((-1.0)*(x325.value))) < -0.00001)
continue;
IkReal gconst51=IKsqrt(((-1.0)*(x325.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj5)))))+(IKabs(((((-1.0)*gconst51))+cj5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
sj5=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))))));
cj5=gconst51;
if( (gconst51) < -1-IKFAST_SINCOS_THRESH || (gconst51) > 1+IKFAST_SINCOS_THRESH )
    continue;
j5=((-1.0)*(IKacos(gconst51)));
CheckValue<IkReal> x326=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x326.valid){
continue;
}
if((((-1.0)*(x326.value))) < -0.00001)
continue;
IkReal gconst51=IKsqrt(((-1.0)*(x326.value)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x327=IKPowWithIntegerCheck(gconst51,-1);
if(!x327.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
if( IKabs((new_r11*(x327.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst51*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r11*(x327.value)))+IKsqr(((((-1.0)*gconst51*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r11*(x327.value)), ((((-1.0)*gconst51*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x328=IKcos(j7);
IkReal x329=IKsin(j7);
IkReal x330=((1.0)*x329);
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
IkReal x331=IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))));
evalcond[0]=((-1.0)*x329);
evalcond[1]=((-1.0)*x328);
evalcond[2]=(((gconst51*x328))+new_r10);
evalcond[3]=((((-1.0)*gconst51*x330))+new_r11);
evalcond[4]=(((x328*x331))+new_r00);
evalcond[5]=((((-1.0)*x330*x331))+new_r01);
evalcond[6]=(((new_r00*x331))+x328+((gconst51*new_r10)));
evalcond[7]=(((new_r01*x331))+(((-1.0)*x330))+((gconst51*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x332=IKPowWithIntegerCheck(IKsign(gconst51),-1);
if(!x332.valid){
continue;
}
CheckValue<IkReal> x333 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x333.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x332.value)))+(x333.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x334=IKcos(j7);
IkReal x335=IKsin(j7);
IkReal x336=((1.0)*x335);
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
IkReal x337=IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))));
evalcond[0]=((-1.0)*x335);
evalcond[1]=((-1.0)*x334);
evalcond[2]=(((gconst51*x334))+new_r10);
evalcond[3]=((((-1.0)*gconst51*x336))+new_r11);
evalcond[4]=(((x334*x337))+new_r00);
evalcond[5]=(new_r01+(((-1.0)*x336*x337)));
evalcond[6]=(((new_r00*x337))+x334+((gconst51*new_r10)));
evalcond[7]=(((new_r01*x337))+(((-1.0)*x336))+((gconst51*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x338=((1.0)*new_r10);
IkReal x339=(new_r00*sj5);
CheckValue<IkReal> x340=IKPowWithIntegerCheck(new_r22,-1);
if(!x340.valid){
continue;
}
CheckValue<IkReal> x341=IKPowWithIntegerCheck(sj5,-1);
if(!x341.valid){
continue;
}
if( IKabs(((x340.value)*(x341.value)*((((cj5*x339))+new_r10+(((-1.0)*x338*(cj5*cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*x338))+x339)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x340.value)*(x341.value)*((((cj5*x339))+new_r10+(((-1.0)*x338*(cj5*cj5)))))))+IKsqr(((((-1.0)*cj5*x338))+x339))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x340.value)*(x341.value)*((((cj5*x339))+new_r10+(((-1.0)*x338*(cj5*cj5)))))), ((((-1.0)*cj5*x338))+x339));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x342=IKsin(j7);
IkReal x343=IKcos(j7);
IkReal x344=(new_r10*sj5);
IkReal x345=((1.0)*sj5);
IkReal x346=(cj5*new_r01);
IkReal x347=(new_r11*sj5);
IkReal x348=(cj5*new_r00);
IkReal x349=((1.0)*x342);
IkReal x350=(cj5*x343);
IkReal x351=(new_r22*x343);
IkReal x352=(new_r22*x349);
evalcond[0]=(((cj5*new_r10))+x343+(((-1.0)*new_r00*x345)));
evalcond[1]=(((cj5*new_r11))+(((-1.0)*new_r01*x345))+(((-1.0)*x349)));
evalcond[2]=((((-1.0)*x352))+x344+x348);
evalcond[3]=((((-1.0)*x351))+x346+x347);
evalcond[4]=((((-1.0)*new_r22*x350))+((sj5*x342))+new_r01);
evalcond[5]=((((-1.0)*new_r22*x342*x345))+x350+new_r10);
evalcond[6]=(((new_r22*x348))+((new_r22*x344))+(((-1.0)*x349)));
evalcond[7]=(((new_r22*x347))+((new_r22*x346))+(((-1.0)*x343)));
evalcond[8]=((((-1.0)*x343*x345))+new_r00+(((-1.0)*cj5*x352)));
evalcond[9]=((((-1.0)*x345*x351))+(((-1.0)*cj5*x349))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x353=(new_r00*sj5);
IkReal x354=((1.0)*new_r10);
CheckValue<IkReal> x355=IKPowWithIntegerCheck(sj5,-1);
if(!x355.valid){
continue;
}
if( IKabs(((x355.value)*(((((-1.0)*new_r22*x354*(cj5*cj5)))+((cj5*new_r22*x353))+(((-1.0)*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x353+(((-1.0)*cj5*x354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x355.value)*(((((-1.0)*new_r22*x354*(cj5*cj5)))+((cj5*new_r22*x353))+(((-1.0)*new_r01))))))+IKsqr((x353+(((-1.0)*cj5*x354))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x355.value)*(((((-1.0)*new_r22*x354*(cj5*cj5)))+((cj5*new_r22*x353))+(((-1.0)*new_r01))))), (x353+(((-1.0)*cj5*x354))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x356=IKsin(j7);
IkReal x357=IKcos(j7);
IkReal x358=(new_r10*sj5);
IkReal x359=((1.0)*sj5);
IkReal x360=(cj5*new_r01);
IkReal x361=(new_r11*sj5);
IkReal x362=(cj5*new_r00);
IkReal x363=((1.0)*x356);
IkReal x364=(cj5*x357);
IkReal x365=(new_r22*x357);
IkReal x366=(new_r22*x363);
evalcond[0]=(((cj5*new_r10))+x357+(((-1.0)*new_r00*x359)));
evalcond[1]=(((cj5*new_r11))+(((-1.0)*x363))+(((-1.0)*new_r01*x359)));
evalcond[2]=((((-1.0)*x366))+x358+x362);
evalcond[3]=((((-1.0)*x365))+x360+x361);
evalcond[4]=(((sj5*x356))+(((-1.0)*new_r22*x364))+new_r01);
evalcond[5]=((((-1.0)*new_r22*x356*x359))+x364+new_r10);
evalcond[6]=(((new_r22*x362))+((new_r22*x358))+(((-1.0)*x363)));
evalcond[7]=(((new_r22*x361))+((new_r22*x360))+(((-1.0)*x357)));
evalcond[8]=((((-1.0)*cj5*x366))+(((-1.0)*x357*x359))+new_r00);
evalcond[9]=((((-1.0)*cj5*x363))+(((-1.0)*x359*x365))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x367=cj5*cj5;
IkReal x368=(cj5*new_r22);
CheckValue<IkReal> x369 = IKatan2WithCheck(IkReal(((((-1.0)*new_r01*sj5))+((new_r00*x368)))),IkReal((((new_r00*sj5))+((new_r01*x368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x369.valid){
continue;
}
CheckValue<IkReal> x370=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x367))+((x367*(new_r22*new_r22))))),-1);
if(!x370.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x369.value)+(((1.5707963267949)*(x370.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x371=IKsin(j7);
IkReal x372=IKcos(j7);
IkReal x373=(new_r10*sj5);
IkReal x374=((1.0)*sj5);
IkReal x375=(cj5*new_r01);
IkReal x376=(new_r11*sj5);
IkReal x377=(cj5*new_r00);
IkReal x378=((1.0)*x371);
IkReal x379=(cj5*x372);
IkReal x380=(new_r22*x372);
IkReal x381=(new_r22*x378);
evalcond[0]=((((-1.0)*new_r00*x374))+((cj5*new_r10))+x372);
evalcond[1]=(((cj5*new_r11))+(((-1.0)*x378))+(((-1.0)*new_r01*x374)));
evalcond[2]=(x377+x373+(((-1.0)*x381)));
evalcond[3]=(x376+x375+(((-1.0)*x380)));
evalcond[4]=(((sj5*x371))+new_r01+(((-1.0)*new_r22*x379)));
evalcond[5]=((((-1.0)*new_r22*x371*x374))+x379+new_r10);
evalcond[6]=((((-1.0)*x378))+((new_r22*x377))+((new_r22*x373)));
evalcond[7]=((((-1.0)*x372))+((new_r22*x375))+((new_r22*x376)));
evalcond[8]=((((-1.0)*x372*x374))+(((-1.0)*cj5*x381))+new_r00);
evalcond[9]=((((-1.0)*cj5*x378))+(((-1.0)*x374*x380))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5, j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x383=IKPowWithIntegerCheck(sj6,-1);
if(!x383.valid){
continue;
}
IkReal x382=x383.value;
CheckValue<IkReal> x384=IKPowWithIntegerCheck(new_r12,-1);
if(!x384.valid){
continue;
}
if( IKabs((x382*(x384.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj6*cj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x382)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x382*(x384.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj6*cj6)))))))+IKsqr((new_r02*x382))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x382*(x384.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj6*cj6)))))), (new_r02*x382));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x385=IKcos(j5);
IkReal x386=IKsin(j5);
IkReal x387=((1.0)*sj6);
IkReal x388=((1.0)*cj6);
IkReal x389=(new_r12*x386);
IkReal x390=(new_r02*x385);
evalcond[0]=(new_r02+(((-1.0)*x385*x387)));
evalcond[1]=((((-1.0)*x386*x387))+new_r12);
evalcond[2]=(((new_r12*x385))+(((-1.0)*new_r02*x386)));
evalcond[3]=(x389+x390+(((-1.0)*x387)));
evalcond[4]=(((cj6*x389))+((cj6*x390))+(((-1.0)*new_r22*x387)));
evalcond[5]=((((-1.0)*new_r20*x388))+(((-1.0)*new_r10*x386*x387))+(((-1.0)*new_r00*x385*x387)));
evalcond[6]=((((-1.0)*new_r21*x388))+(((-1.0)*new_r01*x385*x387))+(((-1.0)*new_r11*x386*x387)));
evalcond[7]=((1.0)+(((-1.0)*x387*x390))+(((-1.0)*x387*x389))+(((-1.0)*new_r22*x388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=sj6;
j7eval[1]=((IKabs(new_r20))+(IKabs(new_r21)));
j7eval[2]=IKsign(sj6);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=sj6;
j7eval[1]=cj5;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=sj5;
j7eval[1]=sj6;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x391=IKcos(j7);
IkReal x392=IKsin(j7);
IkReal x393=((1.0)*sj6);
IkReal x394=((1.0)*x392);
IkReal x395=((1.0)*x391);
evalcond[0]=(x391+new_r10);
evalcond[1]=(((sj6*x392))+new_r20);
evalcond[2]=(((sj6*x391))+new_r21);
evalcond[3]=((((-1.0)*x394))+new_r11);
evalcond[4]=((((-1.0)*cj6*x394))+new_r00);
evalcond[5]=((((-1.0)*cj6*x395))+new_r01);
evalcond[6]=((((-1.0)*x394))+((cj6*new_r00))+(((-1.0)*new_r20*x393)));
evalcond[7]=((((-1.0)*x395))+(((-1.0)*new_r21*x393))+((cj6*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x396=IKcos(j7);
IkReal x397=IKsin(j7);
IkReal x398=((1.0)*new_r00);
IkReal x399=((1.0)*new_r01);
IkReal x400=((1.0)*sj6);
IkReal x401=((1.0)*x397);
IkReal x402=((1.0)*x396);
evalcond[0]=(((sj6*x397))+new_r20);
evalcond[1]=(((sj6*x396))+new_r21);
evalcond[2]=(x396+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x401)));
evalcond[4]=((((-1.0)*x398))+(((-1.0)*cj6*x401)));
evalcond[5]=((((-1.0)*x399))+(((-1.0)*cj6*x402)));
evalcond[6]=((((-1.0)*new_r20*x400))+(((-1.0)*cj6*x398))+(((-1.0)*x401)));
evalcond[7]=((((-1.0)*new_r21*x400))+(((-1.0)*cj6*x399))+(((-1.0)*x402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((((-1.0)*new_r01*sj5))+((cj5*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*new_r01))+((new_r00*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*sj5))+((cj5*new_r00))))+IKsqr((((cj5*new_r01))+((new_r00*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r01*sj5))+((cj5*new_r00))), (((cj5*new_r01))+((new_r00*sj5))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x403=IKcos(j7);
IkReal x404=IKsin(j7);
IkReal x405=((1.0)*sj5);
IkReal x406=((1.0)*x404);
IkReal x407=(cj5*x403);
IkReal x408=(((cj5*x406))+((x403*x405)));
evalcond[0]=(((cj5*new_r10))+x403+(((-1.0)*new_r00*x405)));
evalcond[1]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x406)));
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+(((-1.0)*x403)));
evalcond[3]=(((cj5*new_r11))+(((-1.0)*new_r01*x405))+(((-1.0)*x406)));
evalcond[4]=(((sj5*x404))+new_r01+(((-1.0)*x407)));
evalcond[5]=(x407+(((-1.0)*x404*x405))+new_r10);
evalcond[6]=(new_r00+(((-1.0)*x408)));
evalcond[7]=(new_r11+(((-1.0)*x408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x409=((1.0)*cj5);
if( IKabs(((((-1.0)*new_r01*sj5))+(((-1.0)*new_r00*x409)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r00*sj5))+(((-1.0)*new_r01*x409)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*sj5))+(((-1.0)*new_r00*x409))))+IKsqr((((new_r00*sj5))+(((-1.0)*new_r01*x409))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r01*sj5))+(((-1.0)*new_r00*x409))), (((new_r00*sj5))+(((-1.0)*new_r01*x409))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x410=IKcos(j7);
IkReal x411=IKsin(j7);
IkReal x412=((1.0)*sj5);
IkReal x413=(cj5*x410);
IkReal x414=(sj5*x411);
IkReal x415=(cj5*x411);
IkReal x416=(x413+x414);
evalcond[0]=(((new_r10*sj5))+((cj5*new_r00))+x411);
evalcond[1]=(((new_r11*sj5))+((cj5*new_r01))+x410);
evalcond[2]=(((cj5*new_r10))+x410+(((-1.0)*new_r00*x412)));
evalcond[3]=(x416+new_r01);
evalcond[4]=(x416+new_r10);
evalcond[5]=(((cj5*new_r11))+(((-1.0)*new_r01*x412))+(((-1.0)*x411)));
evalcond[6]=(x415+(((-1.0)*x410*x412))+new_r00);
evalcond[7]=(((sj5*x410))+new_r11+(((-1.0)*x415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j7eval[0]=sj6;
j7eval[1]=((IKabs(new_r20))+(IKabs(new_r21)));
j7eval[2]=IKsign(sj6);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j7eval[0]=sj6;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j7eval[0]=sj6;
j7eval[1]=cj6;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r10, new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x417=IKcos(j7);
IkReal x418=((1.0)*(IKsin(j7)));
evalcond[0]=(x417+(((-1.0)*new_r00)));
evalcond[1]=(new_r10+(((-1.0)*x418)));
evalcond[2]=(new_r11+(((-1.0)*x417)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r10), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x419=IKcos(j7);
IkReal x420=IKsin(j7);
evalcond[0]=(x420+new_r10);
evalcond[1]=(x419+new_r11);
evalcond[2]=(x419+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x420))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r10;
evalcond[3]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x421=IKcos(j7);
IkReal x422=IKsin(j7);
evalcond[0]=(x422+new_r20);
evalcond[1]=(x421+new_r21);
evalcond[2]=(x421+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x422))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r10;
evalcond[3]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r20, new_r21);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x423=IKcos(j7);
IkReal x424=((1.0)*(IKsin(j7)));
evalcond[0]=((((-1.0)*x424))+new_r20);
evalcond[1]=((((-1.0)*x423))+new_r21);
evalcond[2]=(x423+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x424))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x425=IKsin(j7);
IkReal x426=IKcos(j7);
IkReal x427=((-1.0)*x425);
IkReal x428=((-1.0)*x426);
evalcond[0]=x427;
evalcond[1]=x428;
evalcond[2]=(new_r22*x427);
evalcond[3]=(new_r22*x428);
evalcond[4]=(x426+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x425))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x429=IKPowWithIntegerCheck(sj6,-1);
if(!x429.valid){
continue;
}
CheckValue<IkReal> x430=IKPowWithIntegerCheck(cj6,-1);
if(!x430.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x429.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x430.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x429.value)))+IKsqr((new_r11*(x430.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20*(x429.value)), (new_r11*(x430.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x431=IKcos(j7);
IkReal x432=IKsin(j7);
IkReal x433=((1.0)*sj6);
IkReal x434=((1.0)*x432);
IkReal x435=((1.0)*x431);
evalcond[0]=(((sj6*x432))+new_r20);
evalcond[1]=(((sj6*x431))+new_r21);
evalcond[2]=(x431+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*cj6*x434))+new_r10);
evalcond[4]=((((-1.0)*cj6*x435))+new_r11);
evalcond[5]=((((-1.0)*x434))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*x434))+((cj6*new_r10))+(((-1.0)*new_r20*x433)));
evalcond[7]=((((-1.0)*x435))+((cj6*new_r11))+(((-1.0)*new_r21*x433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x436=IKPowWithIntegerCheck(sj6,-1);
if(!x436.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x436.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x436.value)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20*(x436.value)), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x437=IKcos(j7);
IkReal x438=IKsin(j7);
IkReal x439=((1.0)*sj6);
IkReal x440=((1.0)*x438);
IkReal x441=((1.0)*x437);
evalcond[0]=(((sj6*x438))+new_r20);
evalcond[1]=(((sj6*x437))+new_r21);
evalcond[2]=(x437+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*cj6*x440))+new_r10);
evalcond[4]=((((-1.0)*cj6*x441))+new_r11);
evalcond[5]=((((-1.0)*x440))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*x440))+((cj6*new_r10))+(((-1.0)*new_r20*x439)));
evalcond[7]=((((-1.0)*x441))+((cj6*new_r11))+(((-1.0)*new_r21*x439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x442=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x442.valid){
continue;
}
CheckValue<IkReal> x443 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x443.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x442.value)))+(x443.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x444=IKcos(j7);
IkReal x445=IKsin(j7);
IkReal x446=((1.0)*sj6);
IkReal x447=((1.0)*x445);
IkReal x448=((1.0)*x444);
evalcond[0]=(((sj6*x445))+new_r20);
evalcond[1]=(((sj6*x444))+new_r21);
evalcond[2]=(x444+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*cj6*x447))+new_r10);
evalcond[4]=((((-1.0)*cj6*x448))+new_r11);
evalcond[5]=((((-1.0)*x447))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*x447))+((cj6*new_r10))+(((-1.0)*new_r20*x446)));
evalcond[7]=((((-1.0)*x448))+((cj6*new_r11))+(((-1.0)*new_r21*x446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x449=IKcos(j7);
IkReal x450=IKsin(j7);
IkReal x451=((1.0)*new_r11);
IkReal x452=((1.0)*new_r10);
IkReal x453=((1.0)*sj6);
IkReal x454=((1.0)*x450);
IkReal x455=((1.0)*x449);
evalcond[0]=(x449+new_r00);
evalcond[1]=(((sj6*x450))+new_r20);
evalcond[2]=(((sj6*x449))+new_r21);
evalcond[3]=((((-1.0)*x454))+new_r01);
evalcond[4]=((((-1.0)*x452))+(((-1.0)*cj6*x454)));
evalcond[5]=((((-1.0)*x451))+(((-1.0)*cj6*x455)));
evalcond[6]=((((-1.0)*new_r20*x453))+(((-1.0)*x454))+(((-1.0)*cj6*x452)));
evalcond[7]=((((-1.0)*new_r21*x453))+(((-1.0)*x455))+(((-1.0)*cj6*x451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x457=IKPowWithIntegerCheck(sj6,-1);
if(!x457.valid){
continue;
}
IkReal x456=x457.value;
CheckValue<IkReal> x458=IKPowWithIntegerCheck(sj5,-1);
if(!x458.valid){
continue;
}
if( IKabs((x456*(x458.value)*(((((-1.0)*new_r01*sj6))+(((-1.0)*cj5*cj6*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x456)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x456*(x458.value)*(((((-1.0)*new_r01*sj6))+(((-1.0)*cj5*cj6*new_r21))))))+IKsqr(((-1.0)*new_r21*x456))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x456*(x458.value)*(((((-1.0)*new_r01*sj6))+(((-1.0)*cj5*cj6*new_r21))))), ((-1.0)*new_r21*x456));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x459=IKcos(j7);
IkReal x460=IKsin(j7);
IkReal x461=(new_r10*sj5);
IkReal x462=((1.0)*sj5);
IkReal x463=(cj5*new_r01);
IkReal x464=(cj5*cj6);
IkReal x465=(new_r11*sj5);
IkReal x466=((1.0)*sj6);
IkReal x467=((1.0)*cj6);
IkReal x468=((1.0)*x460);
IkReal x469=(cj5*x459);
evalcond[0]=(((sj6*x460))+new_r20);
evalcond[1]=(((sj6*x459))+new_r21);
evalcond[2]=(((cj5*new_r10))+(((-1.0)*new_r00*x462))+x459);
evalcond[3]=(((cj5*new_r11))+(((-1.0)*new_r01*x462))+(((-1.0)*x468)));
evalcond[4]=(((cj5*new_r00))+(((-1.0)*x460*x467))+x461);
evalcond[5]=((((-1.0)*x459*x467))+x463+x465);
evalcond[6]=((((-1.0)*x459*x464))+new_r01+((sj5*x460)));
evalcond[7]=((((-1.0)*cj6*x460*x462))+x469+new_r10);
evalcond[8]=((((-1.0)*x464*x468))+(((-1.0)*x459*x462))+new_r00);
evalcond[9]=((((-1.0)*cj5*x468))+new_r11+(((-1.0)*cj6*x459*x462)));
evalcond[10]=(((new_r00*x464))+(((-1.0)*new_r20*x466))+((cj6*x461))+(((-1.0)*x468)));
evalcond[11]=((((-1.0)*new_r21*x466))+(((-1.0)*x459))+((cj6*x465))+((cj6*x463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x471=IKPowWithIntegerCheck(sj6,-1);
if(!x471.valid){
continue;
}
IkReal x470=x471.value;
CheckValue<IkReal> x472=IKPowWithIntegerCheck(cj5,-1);
if(!x472.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x470)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x470*(x472.value)*(((((-1.0)*new_r10*sj6))+(((-1.0)*cj6*new_r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x470))+IKsqr((x470*(x472.value)*(((((-1.0)*new_r10*sj6))+(((-1.0)*cj6*new_r20*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20*x470), (x470*(x472.value)*(((((-1.0)*new_r10*sj6))+(((-1.0)*cj6*new_r20*sj5))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x473=IKcos(j7);
IkReal x474=IKsin(j7);
IkReal x475=(new_r10*sj5);
IkReal x476=((1.0)*sj5);
IkReal x477=(cj5*new_r01);
IkReal x478=(cj5*cj6);
IkReal x479=(new_r11*sj5);
IkReal x480=((1.0)*sj6);
IkReal x481=((1.0)*cj6);
IkReal x482=((1.0)*x474);
IkReal x483=(cj5*x473);
evalcond[0]=(((sj6*x474))+new_r20);
evalcond[1]=(((sj6*x473))+new_r21);
evalcond[2]=(((cj5*new_r10))+(((-1.0)*new_r00*x476))+x473);
evalcond[3]=((((-1.0)*x482))+((cj5*new_r11))+(((-1.0)*new_r01*x476)));
evalcond[4]=(((cj5*new_r00))+(((-1.0)*x474*x481))+x475);
evalcond[5]=(x477+x479+(((-1.0)*x473*x481)));
evalcond[6]=(((sj5*x474))+new_r01+(((-1.0)*x473*x478)));
evalcond[7]=(x483+new_r10+(((-1.0)*cj6*x474*x476)));
evalcond[8]=((((-1.0)*x473*x476))+new_r00+(((-1.0)*x478*x482)));
evalcond[9]=((((-1.0)*cj6*x473*x476))+new_r11+(((-1.0)*cj5*x482)));
evalcond[10]=((((-1.0)*x482))+(((-1.0)*new_r20*x480))+((new_r00*x478))+((cj6*x475)));
evalcond[11]=((((-1.0)*new_r21*x480))+((cj6*x479))+((cj6*x477))+(((-1.0)*x473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x484=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x484.valid){
continue;
}
CheckValue<IkReal> x485 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x485.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x484.value)))+(x485.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x486=IKcos(j7);
IkReal x487=IKsin(j7);
IkReal x488=(new_r10*sj5);
IkReal x489=((1.0)*sj5);
IkReal x490=(cj5*new_r01);
IkReal x491=(cj5*cj6);
IkReal x492=(new_r11*sj5);
IkReal x493=((1.0)*sj6);
IkReal x494=((1.0)*cj6);
IkReal x495=((1.0)*x487);
IkReal x496=(cj5*x486);
evalcond[0]=(((sj6*x487))+new_r20);
evalcond[1]=(((sj6*x486))+new_r21);
evalcond[2]=(((cj5*new_r10))+(((-1.0)*new_r00*x489))+x486);
evalcond[3]=((((-1.0)*new_r01*x489))+(((-1.0)*x495))+((cj5*new_r11)));
evalcond[4]=(((cj5*new_r00))+x488+(((-1.0)*x487*x494)));
evalcond[5]=((((-1.0)*x486*x494))+x492+x490);
evalcond[6]=(((sj5*x487))+new_r01+(((-1.0)*x486*x491)));
evalcond[7]=((((-1.0)*cj6*x487*x489))+x496+new_r10);
evalcond[8]=((((-1.0)*x486*x489))+(((-1.0)*x491*x495))+new_r00);
evalcond[9]=((((-1.0)*cj6*x486*x489))+(((-1.0)*cj5*x495))+new_r11);
evalcond[10]=((((-1.0)*new_r20*x493))+(((-1.0)*x495))+((cj6*x488))+((new_r00*x491)));
evalcond[11]=(((cj6*x490))+((cj6*x492))+(((-1.0)*new_r21*x493))+(((-1.0)*x486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x497=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x497.valid){
continue;
}
CheckValue<IkReal> x498 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x498.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x497.value)))+(x498.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
evalcond[0]=(((sj6*(IKsin(j7))))+new_r20);
evalcond[1]=(((sj6*(IKcos(j7))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=sj6;
j5eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j5eval[2]=IKsign(sj6);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=new_r00;
j5eval[1]=sj6;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=0;
cj6=1.0;
j6=0;
IkReal x499=((((-1.0)*new_r10*sj7))+((cj7*new_r00)));
j5eval[0]=x499;
j5eval[1]=((IKabs((((new_r00*new_r01))+((cj7*sj7)))))+(IKabs(((cj7*cj7)+((new_r01*new_r10))))));
j5eval[2]=IKsign(x499);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj6=0;
cj6=1.0;
j6=0;
IkReal x500=((new_r10*new_r10)+(new_r00*new_r00));
j5eval[0]=x500;
j5eval[1]=((IKabs((((new_r00*sj7))+(((-1.0)*cj7*new_r10)))))+(IKabs((((new_r10*sj7))+((cj7*new_r00))))));
j5eval[2]=IKsign(x500);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj6=0;
cj6=1.0;
j6=0;
IkReal x501=(((new_r10*new_r11))+((new_r00*new_r01)));
j5eval[0]=x501;
j5eval[1]=((IKabs((((cj7*new_r01))+((cj7*new_r10)))))+(IKabs(((((-1.0)*cj7*new_r11))+((cj7*new_r00))))));
j5eval[2]=IKsign(x501);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x502=IKsin(j5);
IkReal x503=IKcos(j5);
IkReal x504=((1.0)*x503);
IkReal x505=((1.0)*x502);
evalcond[0]=(x502+new_r01);
evalcond[1]=((((-1.0)*x505))+new_r10);
evalcond[2]=((((-1.0)*x504))+new_r00);
evalcond[3]=((((-1.0)*x504))+new_r11);
evalcond[4]=(((new_r11*x502))+((new_r01*x503)));
evalcond[5]=((((-1.0)*new_r00*x505))+((new_r10*x503)));
evalcond[6]=((-1.0)+((new_r10*x502))+((new_r00*x503)));
evalcond[7]=((-1.0)+(((-1.0)*new_r01*x505))+((new_r11*x503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x506=IKcos(j5);
IkReal x507=IKsin(j5);
IkReal x508=((1.0)*x507);
evalcond[0]=(x507+new_r10);
evalcond[1]=(x506+new_r00);
evalcond[2]=(x506+new_r11);
evalcond[3]=((((-1.0)*x508))+new_r01);
evalcond[4]=(((new_r11*x507))+((new_r01*x506)));
evalcond[5]=((((-1.0)*new_r00*x508))+((new_r10*x506)));
evalcond[6]=((1.0)+((new_r10*x507))+((new_r00*x506)));
evalcond[7]=((1.0)+(((-1.0)*new_r01*x508))+((new_r11*x506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r10*new_r10)+(new_r00*new_r00));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=0;
cj6=1.0;
j6=0;
new_r10=0;
new_r00=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x510 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x510.valid){
continue;
}
IkReal x509=x510.value;
j5array[0]=((-1.0)*x509);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x509)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j5))))+(((-1.0)*new_r01*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x513 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x513)==0){
continue;
}
IkReal x511=pow(x513,-0.5);
IkReal x512=((-1.0)*x511);
CheckValue<IkReal> x514 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x514.valid){
continue;
}
IkReal gconst32=((-1.0)*(x514.value));
IkReal gconst33=(new_r00*x512);
IkReal gconst34=(new_r10*x512);
CheckValue<IkReal> x515 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x515.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x515.value)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
CheckValue<IkReal> x519 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x519.valid){
continue;
}
IkReal x516=((-1.0)*(x519.value));
IkReal x517=x511;
IkReal x518=((-1.0)*x517);
sj6=0;
cj6=1.0;
j6=0;
sj7=gconst33;
cj7=gconst34;
j7=x516;
IkReal gconst32=x516;
IkReal gconst33=(new_r00*x518);
IkReal gconst34=(new_r10*x518);
IkReal x520=((new_r10*new_r10)+(new_r00*new_r00));
j5eval[0]=x520;
j5eval[1]=IKsign(x520);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x524 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x524.valid){
continue;
}
IkReal x521=((-1.0)*(x524.value));
IkReal x522=x511;
IkReal x523=((-1.0)*x522);
sj6=0;
cj6=1.0;
j6=0;
sj7=gconst33;
cj7=gconst34;
j7=x521;
IkReal gconst32=x521;
IkReal gconst33=(new_r00*x523);
IkReal gconst34=(new_r10*x523);
IkReal x525=new_r10*new_r10;
IkReal x526=(new_r10*new_r11);
IkReal x527=(((new_r00*new_r01))+x526);
IkReal x528=x511;
IkReal x529=((1.0)*x528);
j5eval[0]=x527;
j5eval[1]=((IKabs(((((-1.0)*new_r00*new_r10*x529))+((x526*x528)))))+(IKabs(((((-1.0)*x525*x529))+(((-1.0)*new_r01*new_r10*x529))))));
j5eval[2]=IKsign(x527);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x533 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x533.valid){
continue;
}
IkReal x530=((-1.0)*(x533.value));
IkReal x531=x511;
IkReal x532=((-1.0)*x531);
sj6=0;
cj6=1.0;
j6=0;
sj7=gconst33;
cj7=gconst34;
j7=x530;
IkReal gconst32=x530;
IkReal gconst33=(new_r00*x532);
IkReal gconst34=(new_r10*x532);
IkReal x534=new_r10*new_r10;
IkReal x535=new_r00*new_r00;
CheckValue<IkReal> x539=IKPowWithIntegerCheck((x535+x534),-1);
if(!x539.valid){
continue;
}
IkReal x536=x539.value;
IkReal x537=(new_r10*x536);
IkReal x538=(x534*x536);
j5eval[0]=((IKabs((((x536*(x535*x535)))+(((-1.0)*x538))+((x535*x538)))))+(IKabs((((new_r00*x537*(new_r10*new_r10)))+((x537*(new_r00*new_r00*new_r00)))+((new_r00*x537))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x540=IKPowWithIntegerCheck(IKsign((((gconst33*new_r00))+((gconst34*new_r10)))),-1);
if(!x540.valid){
continue;
}
CheckValue<IkReal> x541 = IKatan2WithCheck(IkReal((((new_r00*new_r10))+((gconst33*gconst34)))),IkReal(((((-1.0)*(gconst34*gconst34)))+(new_r00*new_r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x541.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x540.value)))+(x541.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x542=IKsin(j5);
IkReal x543=IKcos(j5);
IkReal x544=((1.0)*gconst33);
IkReal x545=((1.0)*gconst34);
IkReal x546=((1.0)*x542);
IkReal x547=(((x542*x545))+((x543*x544)));
evalcond[0]=((((-1.0)*new_r00*x546))+((new_r10*x543))+gconst34);
evalcond[1]=(((gconst33*x542))+new_r01+(((-1.0)*x543*x545)));
evalcond[2]=((((-1.0)*x542*x544))+new_r10+((gconst34*x543)));
evalcond[3]=(((new_r00*x543))+((new_r10*x542))+(((-1.0)*x544)));
evalcond[4]=(((new_r11*x542))+(((-1.0)*x545))+((new_r01*x543)));
evalcond[5]=((((-1.0)*x547))+new_r00);
evalcond[6]=((((-1.0)*x547))+new_r11);
evalcond[7]=(((new_r11*x543))+(((-1.0)*new_r01*x546))+(((-1.0)*x544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x548 = IKatan2WithCheck(IkReal((((gconst34*new_r10))+((gconst34*new_r01)))),IkReal(((((-1.0)*gconst34*new_r11))+((gconst34*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x548.valid){
continue;
}
CheckValue<IkReal> x549=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x549.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x548.value)+(((1.5707963267949)*(x549.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x550=IKsin(j5);
IkReal x551=IKcos(j5);
IkReal x552=((1.0)*gconst33);
IkReal x553=((1.0)*gconst34);
IkReal x554=((1.0)*x550);
IkReal x555=(((x550*x553))+((x551*x552)));
evalcond[0]=(((new_r10*x551))+gconst34+(((-1.0)*new_r00*x554)));
evalcond[1]=(((gconst33*x550))+(((-1.0)*x551*x553))+new_r01);
evalcond[2]=((((-1.0)*x550*x552))+((gconst34*x551))+new_r10);
evalcond[3]=(((new_r10*x550))+(((-1.0)*x552))+((new_r00*x551)));
evalcond[4]=(((new_r11*x550))+(((-1.0)*x553))+((new_r01*x551)));
evalcond[5]=((((-1.0)*x555))+new_r00);
evalcond[6]=((((-1.0)*x555))+new_r11);
evalcond[7]=(((new_r11*x551))+(((-1.0)*new_r01*x554))+(((-1.0)*x552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x556=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x556.valid){
continue;
}
CheckValue<IkReal> x557 = IKatan2WithCheck(IkReal((((gconst33*new_r10))+((gconst34*new_r00)))),IkReal((((gconst33*new_r00))+(((-1.0)*gconst34*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x557.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x556.value)))+(x557.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x558=IKsin(j5);
IkReal x559=IKcos(j5);
IkReal x560=((1.0)*gconst33);
IkReal x561=((1.0)*gconst34);
IkReal x562=((1.0)*x558);
IkReal x563=(((x558*x561))+((x559*x560)));
evalcond[0]=((((-1.0)*new_r00*x562))+((new_r10*x559))+gconst34);
evalcond[1]=(((gconst33*x558))+(((-1.0)*x559*x561))+new_r01);
evalcond[2]=((((-1.0)*x558*x560))+((gconst34*x559))+new_r10);
evalcond[3]=(((new_r10*x558))+((new_r00*x559))+(((-1.0)*x560)));
evalcond[4]=(((new_r11*x558))+((new_r01*x559))+(((-1.0)*x561)));
evalcond[5]=(new_r00+(((-1.0)*x563)));
evalcond[6]=(new_r11+(((-1.0)*x563)));
evalcond[7]=(((new_r11*x559))+(((-1.0)*x560))+(((-1.0)*new_r01*x562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x566 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x566)==0){
continue;
}
IkReal x564=pow(x566,-0.5);
IkReal x565=((1.0)*x564);
CheckValue<IkReal> x567 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x567.valid){
continue;
}
IkReal gconst35=((3.14159265358979)+(((-1.0)*(x567.value))));
IkReal gconst36=(new_r00*x565);
IkReal gconst37=(new_r10*x565);
CheckValue<IkReal> x568 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x568.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x568.value)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
CheckValue<IkReal> x572 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x572.valid){
continue;
}
IkReal x569=((1.0)*(x572.value));
IkReal x570=x564;
IkReal x571=((1.0)*x570);
sj6=0;
cj6=1.0;
j6=0;
sj7=gconst36;
cj7=gconst37;
j7=((3.14159265)+(((-1.0)*x569)));
IkReal gconst35=((3.14159265358979)+(((-1.0)*x569)));
IkReal gconst36=(new_r00*x571);
IkReal gconst37=(new_r10*x571);
IkReal x573=((new_r10*new_r10)+(new_r00*new_r00));
j5eval[0]=x573;
j5eval[1]=IKsign(x573);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x577 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x577.valid){
continue;
}
IkReal x574=((1.0)*(x577.value));
IkReal x575=x564;
IkReal x576=((1.0)*x575);
sj6=0;
cj6=1.0;
j6=0;
sj7=gconst36;
cj7=gconst37;
j7=((3.14159265)+(((-1.0)*x574)));
IkReal gconst35=((3.14159265358979)+(((-1.0)*x574)));
IkReal gconst36=(new_r00*x576);
IkReal gconst37=(new_r10*x576);
IkReal x578=new_r10*new_r10;
IkReal x579=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x580=x564;
IkReal x581=(new_r10*x580);
j5eval[0]=x579;
j5eval[1]=IKsign(x579);
j5eval[2]=((IKabs((((new_r00*x581))+(((-1.0)*new_r11*x581)))))+(IKabs((((x578*x580))+((new_r01*x581))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x585 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x585.valid){
continue;
}
IkReal x582=((1.0)*(x585.value));
IkReal x583=x564;
IkReal x584=((1.0)*x583);
sj6=0;
cj6=1.0;
j6=0;
sj7=gconst36;
cj7=gconst37;
j7=((3.14159265)+(((-1.0)*x582)));
IkReal gconst35=((3.14159265358979)+(((-1.0)*x582)));
IkReal gconst36=(new_r00*x584);
IkReal gconst37=(new_r10*x584);
IkReal x586=new_r10*new_r10;
IkReal x587=new_r00*new_r00;
CheckValue<IkReal> x591=IKPowWithIntegerCheck((x586+x587),-1);
if(!x591.valid){
continue;
}
IkReal x588=x591.value;
IkReal x589=(new_r10*x588);
IkReal x590=(x586*x588);
j5eval[0]=((IKabs(((((-1.0)*x590))+((x588*(x587*x587)))+((x587*x590)))))+(IKabs((((new_r00*x589*(new_r10*new_r10)))+((x589*(new_r00*new_r00*new_r00)))+((new_r00*x589))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x592=IKPowWithIntegerCheck(IKsign((((gconst36*new_r00))+((gconst37*new_r10)))),-1);
if(!x592.valid){
continue;
}
CheckValue<IkReal> x593 = IKatan2WithCheck(IkReal((((new_r00*new_r10))+((gconst36*gconst37)))),IkReal(((new_r00*new_r00)+(((-1.0)*(gconst37*gconst37))))),IKFAST_ATAN2_MAGTHRESH);
if(!x593.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x592.value)))+(x593.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x594=IKsin(j5);
IkReal x595=IKcos(j5);
IkReal x596=((1.0)*gconst36);
IkReal x597=((1.0)*x595);
IkReal x598=(gconst36*x594);
IkReal x599=((1.0)*x594);
IkReal x600=(((x595*x596))+((gconst37*x599)));
evalcond[0]=((((-1.0)*new_r00*x599))+((new_r10*x595))+gconst37);
evalcond[1]=((((-1.0)*gconst37*x597))+x598+new_r01);
evalcond[2]=((((-1.0)*x594*x596))+new_r10+((gconst37*x595)));
evalcond[3]=(((new_r10*x594))+((new_r00*x595))+(((-1.0)*x596)));
evalcond[4]=(((new_r11*x594))+((new_r01*x595))+(((-1.0)*gconst37)));
evalcond[5]=((((-1.0)*x600))+new_r00);
evalcond[6]=((((-1.0)*x600))+new_r11);
evalcond[7]=(((new_r11*x595))+(((-1.0)*new_r01*x599))+(((-1.0)*x596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x601 = IKatan2WithCheck(IkReal((((gconst37*new_r01))+((gconst37*new_r10)))),IkReal((((gconst37*new_r00))+(((-1.0)*gconst37*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x601.valid){
continue;
}
CheckValue<IkReal> x602=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x602.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x601.value)+(((1.5707963267949)*(x602.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x603=IKsin(j5);
IkReal x604=IKcos(j5);
IkReal x605=((1.0)*gconst36);
IkReal x606=((1.0)*x604);
IkReal x607=(gconst36*x603);
IkReal x608=((1.0)*x603);
IkReal x609=(((x604*x605))+((gconst37*x608)));
evalcond[0]=(gconst37+((new_r10*x604))+(((-1.0)*new_r00*x608)));
evalcond[1]=(x607+new_r01+(((-1.0)*gconst37*x606)));
evalcond[2]=((((-1.0)*x603*x605))+((gconst37*x604))+new_r10);
evalcond[3]=(((new_r10*x603))+((new_r00*x604))+(((-1.0)*x605)));
evalcond[4]=(((new_r11*x603))+((new_r01*x604))+(((-1.0)*gconst37)));
evalcond[5]=((((-1.0)*x609))+new_r00);
evalcond[6]=((((-1.0)*x609))+new_r11);
evalcond[7]=(((new_r11*x604))+(((-1.0)*x605))+(((-1.0)*new_r01*x608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x610=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x610.valid){
continue;
}
CheckValue<IkReal> x611 = IKatan2WithCheck(IkReal((((gconst36*new_r10))+((gconst37*new_r00)))),IkReal((((gconst36*new_r00))+(((-1.0)*gconst37*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x611.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x610.value)))+(x611.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x612=IKsin(j5);
IkReal x613=IKcos(j5);
IkReal x614=((1.0)*gconst36);
IkReal x615=((1.0)*x613);
IkReal x616=(gconst36*x612);
IkReal x617=((1.0)*x612);
IkReal x618=(((gconst37*x617))+((x613*x614)));
evalcond[0]=(gconst37+((new_r10*x613))+(((-1.0)*new_r00*x617)));
evalcond[1]=((((-1.0)*gconst37*x615))+x616+new_r01);
evalcond[2]=((((-1.0)*x612*x614))+((gconst37*x613))+new_r10);
evalcond[3]=(((new_r10*x612))+(((-1.0)*x614))+((new_r00*x613)));
evalcond[4]=(((new_r11*x612))+((new_r01*x613))+(((-1.0)*gconst37)));
evalcond[5]=((((-1.0)*x618))+new_r00);
evalcond[6]=((((-1.0)*x618))+new_r11);
evalcond[7]=(((new_r11*x613))+(((-1.0)*x614))+(((-1.0)*new_r01*x617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=0;
cj6=1.0;
j6=0;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x620 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x620.valid){
continue;
}
IkReal x619=x620.value;
j5array[0]=((-1.0)*x619);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x619)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j5))))+(((-1.0)*new_r01*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x621=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x621.valid){
continue;
}
CheckValue<IkReal> x622 = IKatan2WithCheck(IkReal((((cj7*new_r01))+((cj7*new_r10)))),IkReal(((((-1.0)*cj7*new_r11))+((cj7*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x622.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x621.value)))+(x622.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x623=IKsin(j5);
IkReal x624=IKcos(j5);
IkReal x625=((1.0)*sj7);
IkReal x626=((1.0)*cj7);
IkReal x627=(cj7*x624);
IkReal x628=((1.0)*x623);
IkReal x629=(((x624*x625))+((x623*x626)));
evalcond[0]=((((-1.0)*new_r00*x628))+cj7+((new_r10*x624)));
evalcond[1]=((((-1.0)*x624*x626))+((sj7*x623))+new_r01);
evalcond[2]=((((-1.0)*x623*x625))+x627+new_r10);
evalcond[3]=((((-1.0)*x625))+((new_r00*x624))+((new_r10*x623)));
evalcond[4]=((((-1.0)*x626))+((new_r01*x624))+((new_r11*x623)));
evalcond[5]=((((-1.0)*x629))+new_r00);
evalcond[6]=((((-1.0)*x629))+new_r11);
evalcond[7]=((((-1.0)*new_r01*x628))+(((-1.0)*x625))+((new_r11*x624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x630=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x630.valid){
continue;
}
CheckValue<IkReal> x631 = IKatan2WithCheck(IkReal((((new_r10*sj7))+((cj7*new_r00)))),IkReal((((new_r00*sj7))+(((-1.0)*cj7*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x631.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x630.value)))+(x631.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x632=IKsin(j5);
IkReal x633=IKcos(j5);
IkReal x634=((1.0)*sj7);
IkReal x635=((1.0)*cj7);
IkReal x636=(cj7*x633);
IkReal x637=((1.0)*x632);
IkReal x638=(((x632*x635))+((x633*x634)));
evalcond[0]=(cj7+(((-1.0)*new_r00*x637))+((new_r10*x633)));
evalcond[1]=((((-1.0)*x633*x635))+((sj7*x632))+new_r01);
evalcond[2]=(x636+new_r10+(((-1.0)*x632*x634)));
evalcond[3]=((((-1.0)*x634))+((new_r00*x633))+((new_r10*x632)));
evalcond[4]=((((-1.0)*x635))+((new_r01*x633))+((new_r11*x632)));
evalcond[5]=((((-1.0)*x638))+new_r00);
evalcond[6]=((((-1.0)*x638))+new_r11);
evalcond[7]=((((-1.0)*new_r01*x637))+(((-1.0)*x634))+((new_r11*x633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x639 = IKatan2WithCheck(IkReal(((cj7*cj7)+((new_r01*new_r10)))),IkReal((((new_r00*new_r01))+((cj7*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x639.valid){
continue;
}
CheckValue<IkReal> x640=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*sj7))+((cj7*new_r00)))),-1);
if(!x640.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x639.value)+(((1.5707963267949)*(x640.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x641=IKsin(j5);
IkReal x642=IKcos(j5);
IkReal x643=((1.0)*sj7);
IkReal x644=((1.0)*cj7);
IkReal x645=(cj7*x642);
IkReal x646=((1.0)*x641);
IkReal x647=(((x641*x644))+((x642*x643)));
evalcond[0]=(cj7+((new_r10*x642))+(((-1.0)*new_r00*x646)));
evalcond[1]=((((-1.0)*x642*x644))+((sj7*x641))+new_r01);
evalcond[2]=((((-1.0)*x641*x643))+x645+new_r10);
evalcond[3]=((((-1.0)*x643))+((new_r10*x641))+((new_r00*x642)));
evalcond[4]=(((new_r11*x641))+(((-1.0)*x644))+((new_r01*x642)));
evalcond[5]=((((-1.0)*x647))+new_r00);
evalcond[6]=((((-1.0)*x647))+new_r11);
evalcond[7]=(((new_r11*x642))+(((-1.0)*x643))+(((-1.0)*new_r01*x646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x648=(((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)));
j5eval[0]=x648;
j5eval[1]=IKsign(x648);
j5eval[2]=((IKabs(((((-1.0)*new_r11*sj7))+((cj7*new_r10)))))+(IKabs((((new_r01*sj7))+(((-1.0)*cj7*new_r00))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x649=((1.0)*new_r01);
IkReal x650=((((-1.0)*sj7*x649))+((cj7*new_r11)));
j5eval[0]=x650;
j5eval[1]=IKsign(x650);
j5eval[2]=((IKabs(((((-1.0)*new_r11*x649))+((cj7*sj7)))))+(IKabs(((((-1.0)*(cj7*cj7)))+(new_r01*new_r01)))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x651=((1.0)*sj7);
IkReal x652=((((-1.0)*new_r00*x651))+((cj7*new_r10)));
j5eval[0]=x652;
j5eval[1]=((IKabs(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*new_r01*new_r10)))))+(IKabs((((new_r00*new_r01))+(((-1.0)*cj7*x651))))));
j5eval[2]=IKsign(x652);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x653=((-1.0)*new_r00);
IkReal x655 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x655)==0){
continue;
}
IkReal x654=pow(x655,-0.5);
CheckValue<IkReal> x656 = IKatan2WithCheck(IkReal(new_r10),IkReal(x653),IKFAST_ATAN2_MAGTHRESH);
if(!x656.valid){
continue;
}
IkReal gconst38=((-1.0)*(x656.value));
IkReal gconst39=((-1.0)*new_r10*x654);
IkReal gconst40=(x653*x654);
CheckValue<IkReal> x657 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x657.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j7+(x657.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x658=((-1.0)*new_r00);
CheckValue<IkReal> x661 = IKatan2WithCheck(IkReal(new_r10),IkReal(x658),IKFAST_ATAN2_MAGTHRESH);
if(!x661.valid){
continue;
}
IkReal x659=((-1.0)*(x661.value));
IkReal x660=x654;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst39;
cj7=gconst40;
j7=x659;
IkReal gconst38=x659;
IkReal gconst39=((-1.0)*new_r10*x660);
IkReal gconst40=(x658*x660);
IkReal x662=new_r00*new_r00;
IkReal x663=((1.0)*new_r10);
IkReal x664=(((new_r00*new_r11))+(((-1.0)*new_r01*x663)));
IkReal x665=x654;
j5eval[0]=x664;
j5eval[1]=((IKabs((((x662*x665))+(((-1.0)*new_r01*x663*x665)))))+(IKabs((((new_r10*new_r11*x665))+(((-1.0)*new_r00*x663*x665))))));
j5eval[2]=IKsign(x664);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x666=((-1.0)*new_r00);
CheckValue<IkReal> x669 = IKatan2WithCheck(IkReal(new_r10),IkReal(x666),IKFAST_ATAN2_MAGTHRESH);
if(!x669.valid){
continue;
}
IkReal x667=((-1.0)*(x669.value));
IkReal x668=x654;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst39;
cj7=gconst40;
j7=x667;
IkReal gconst38=x667;
IkReal gconst39=((-1.0)*new_r10*x668);
IkReal gconst40=(x666*x668);
IkReal x670=new_r00*new_r00;
IkReal x671=((1.0)*new_r10);
CheckValue<IkReal> x674=IKPowWithIntegerCheck(((new_r10*new_r10)+x670),-1);
if(!x674.valid){
continue;
}
IkReal x672=x674.value;
IkReal x673=(new_r11*x672);
j5eval[0]=((IKabs(((((-1.0)*new_r01*x671))+((x670*x672)))))+(IKabs(((((-1.0)*new_r00*x671*x672))+((x673*(new_r10*new_r10*new_r10)))+((new_r10*x670*x673))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x675=((-1.0)*new_r00);
CheckValue<IkReal> x678 = IKatan2WithCheck(IkReal(new_r10),IkReal(x675),IKFAST_ATAN2_MAGTHRESH);
if(!x678.valid){
continue;
}
IkReal x676=((-1.0)*(x678.value));
IkReal x677=x654;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst39;
cj7=gconst40;
j7=x676;
IkReal gconst38=x676;
IkReal gconst39=((-1.0)*new_r10*x677);
IkReal gconst40=(x675*x677);
IkReal x679=((new_r10*new_r10)+(new_r00*new_r00));
j5eval[0]=x679;
j5eval[1]=IKsign(x679);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst40;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x680=((-1.0)*new_r00);
CheckValue<IkReal> x682 = IKatan2WithCheck(IkReal(new_r10),IkReal(x680),IKFAST_ATAN2_MAGTHRESH);
if(!x682.valid){
continue;
}
IkReal x681=((-1.0)*(x682.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst39;
cj7=gconst40;
j7=x681;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst38=x681;
IkReal gconst39=((-1.0)*new_r10);
IkReal gconst40=x680;
j5eval[0]=-1.0;
j5eval[1]=-1.0;
j5eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x683=((-1.0)*new_r00);
CheckValue<IkReal> x685 = IKatan2WithCheck(IkReal(new_r10),IkReal(x683),IKFAST_ATAN2_MAGTHRESH);
if(!x685.valid){
continue;
}
IkReal x684=((-1.0)*(x685.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst39;
cj7=gconst40;
j7=x684;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst38=x684;
IkReal gconst39=((-1.0)*new_r10);
IkReal gconst40=x683;
j5eval[0]=1.0;
j5eval[1]=((IKabs(((-1.0)+(new_r10*new_r10))))+(IKabs((new_r00*new_r10))));
j5eval[2]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x686=((-1.0)*new_r00);
CheckValue<IkReal> x688 = IKatan2WithCheck(IkReal(new_r10),IkReal(x686),IKFAST_ATAN2_MAGTHRESH);
if(!x688.valid){
continue;
}
IkReal x687=((-1.0)*(x688.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst39;
cj7=gconst40;
j7=x687;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst38=x687;
IkReal gconst39=((-1.0)*new_r10);
IkReal gconst40=x686;
j5eval[0]=1.0;
j5eval[1]=((IKabs(new_r10*new_r10))+(IKabs((new_r00*new_r10))));
j5eval[2]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x689=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst39*new_r10))+(((-1.0)*gconst40*new_r00)))),-1);
if(!x689.valid){
continue;
}
CheckValue<IkReal> x690 = IKatan2WithCheck(IkReal(gconst39*gconst39),IkReal((gconst39*gconst40)),IKFAST_ATAN2_MAGTHRESH);
if(!x690.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x689.value)))+(x690.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x691=IKsin(j5);
IkReal x692=IKcos(j5);
IkReal x693=(gconst40*x692);
IkReal x694=(gconst39*x691);
IkReal x695=(gconst40*x691);
IkReal x696=(gconst39*x692);
IkReal x697=(x694+x693);
evalcond[0]=x697;
evalcond[1]=(gconst39+((new_r10*x691))+((new_r00*x692)));
evalcond[2]=(x697+new_r10);
evalcond[3]=(x695+(((-1.0)*x696)));
evalcond[4]=((((-1.0)*new_r00*x691))+gconst40+((new_r10*x692)));
evalcond[5]=(x696+new_r00+(((-1.0)*x695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x698 = IKatan2WithCheck(IkReal((gconst40*new_r00)),IkReal(((-1.0)*gconst39*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x698.valid){
continue;
}
CheckValue<IkReal> x699=IKPowWithIntegerCheck(IKsign(((gconst40*gconst40)+(gconst39*gconst39))),-1);
if(!x699.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x698.value)+(((1.5707963267949)*(x699.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x700=IKsin(j5);
IkReal x701=IKcos(j5);
IkReal x702=(gconst40*x701);
IkReal x703=(gconst39*x700);
IkReal x704=(gconst40*x700);
IkReal x705=(gconst39*x701);
IkReal x706=(x702+x703);
evalcond[0]=x706;
evalcond[1]=(((new_r00*x701))+gconst39+((new_r10*x700)));
evalcond[2]=(x706+new_r10);
evalcond[3]=((((-1.0)*x705))+x704);
evalcond[4]=(gconst40+(((-1.0)*new_r00*x700))+((new_r10*x701)));
evalcond[5]=((((-1.0)*x704))+x705+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x707=IKPowWithIntegerCheck(IKsign((((gconst40*new_r00))+((gconst39*new_r10)))),-1);
if(!x707.valid){
continue;
}
CheckValue<IkReal> x708 = IKatan2WithCheck(IkReal(gconst40*gconst40),IkReal(((-1.0)*gconst39*gconst40)),IKFAST_ATAN2_MAGTHRESH);
if(!x708.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x707.value)))+(x708.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x709=IKsin(j5);
IkReal x710=IKcos(j5);
IkReal x711=(gconst40*x710);
IkReal x712=(gconst39*x709);
IkReal x713=(gconst40*x709);
IkReal x714=(gconst39*x710);
IkReal x715=(x711+x712);
evalcond[0]=x715;
evalcond[1]=(((new_r00*x710))+gconst39+((new_r10*x709)));
evalcond[2]=(x715+new_r10);
evalcond[3]=((((-1.0)*x714))+x713);
evalcond[4]=(gconst40+(((-1.0)*new_r00*x709))+((new_r10*x710)));
evalcond[5]=((((-1.0)*x713))+x714+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x716=((-1.0)*new_r00);
CheckValue<IkReal> x718 = IKatan2WithCheck(IkReal(0),IkReal(x716),IKFAST_ATAN2_MAGTHRESH);
if(!x718.valid){
continue;
}
IkReal x717=((-1.0)*(x718.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst39;
cj7=gconst40;
j7=x717;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst38=x717;
IkReal gconst39=0;
IkReal x719 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x719)==0){
continue;
}
IkReal gconst40=(x716*(pow(x719,-0.5)));
j5eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x720=((-1.0)*new_r00);
CheckValue<IkReal> x722 = IKatan2WithCheck(IkReal(0),IkReal(x720),IKFAST_ATAN2_MAGTHRESH);
if(!x722.valid){
continue;
}
IkReal x721=((-1.0)*(x722.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst39;
cj7=gconst40;
j7=x721;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst38=x721;
IkReal gconst39=0;
IkReal x723 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x723)==0){
continue;
}
IkReal gconst40=(x720*(pow(x723,-0.5)));
j5eval[0]=new_r00;
j5eval[1]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x724=((-1.0)*new_r00);
CheckValue<IkReal> x726 = IKatan2WithCheck(IkReal(0),IkReal(x724),IKFAST_ATAN2_MAGTHRESH);
if(!x726.valid){
continue;
}
IkReal x725=((-1.0)*(x726.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst39;
cj7=gconst40;
j7=x725;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst38=x725;
IkReal gconst39=0;
IkReal x727 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x727)==0){
continue;
}
IkReal gconst40=(x724*(pow(x727,-0.5)));
j5eval[0]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x728=IKPowWithIntegerCheck(gconst40,-1);
if(!x728.valid){
continue;
}
CheckValue<IkReal> x729=IKPowWithIntegerCheck(new_r01,-1);
if(!x729.valid){
continue;
}
if( IKabs((new_r00*(x728.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst40*(x729.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r00*(x728.value)))+IKsqr(((-1.0)*gconst40*(x729.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r00*(x728.value)), ((-1.0)*gconst40*(x729.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x730=IKcos(j5);
IkReal x731=IKsin(j5);
IkReal x732=(gconst40*x730);
IkReal x733=(gconst40*x731);
evalcond[0]=(new_r00*x730);
evalcond[1]=x732;
evalcond[2]=x733;
evalcond[3]=((-1.0)*new_r01*x731);
evalcond[4]=(((new_r01*x730))+gconst40);
evalcond[5]=(x732+new_r01);
evalcond[6]=(gconst40+(((-1.0)*new_r00*x731)));
evalcond[7]=((((-1.0)*x733))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x734=IKPowWithIntegerCheck(new_r00,-1);
if(!x734.valid){
continue;
}
CheckValue<IkReal> x735=IKPowWithIntegerCheck(new_r01,-1);
if(!x735.valid){
continue;
}
if( IKabs((gconst40*(x734.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst40*(x735.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst40*(x734.value)))+IKsqr(((-1.0)*gconst40*(x735.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((gconst40*(x734.value)), ((-1.0)*gconst40*(x735.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x736=IKcos(j5);
IkReal x737=IKsin(j5);
IkReal x738=(gconst40*x736);
IkReal x739=(gconst40*x737);
evalcond[0]=(new_r00*x736);
evalcond[1]=x738;
evalcond[2]=x739;
evalcond[3]=((-1.0)*new_r01*x737);
evalcond[4]=(((new_r01*x736))+gconst40);
evalcond[5]=(x738+new_r01);
evalcond[6]=(gconst40+(((-1.0)*new_r00*x737)));
evalcond[7]=((((-1.0)*x739))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x740 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x740.valid){
continue;
}
CheckValue<IkReal> x741=IKPowWithIntegerCheck(IKsign(gconst40),-1);
if(!x741.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x740.value)+(((1.5707963267949)*(x741.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x742=IKcos(j5);
IkReal x743=IKsin(j5);
IkReal x744=(gconst40*x742);
IkReal x745=(gconst40*x743);
evalcond[0]=(new_r00*x742);
evalcond[1]=x744;
evalcond[2]=x745;
evalcond[3]=((-1.0)*new_r01*x743);
evalcond[4]=(gconst40+((new_r01*x742)));
evalcond[5]=(x744+new_r01);
evalcond[6]=((((-1.0)*new_r00*x743))+gconst40);
evalcond[7]=((((-1.0)*x745))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x747 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x747.valid){
continue;
}
IkReal x746=((-1.0)*(x747.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst39;
cj7=gconst40;
j7=x746;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst38=x746;
IkReal x748 = new_r10*new_r10;
if(IKabs(x748)==0){
continue;
}
IkReal gconst39=((-1.0)*new_r10*(pow(x748,-0.5)));
IkReal gconst40=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x750 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x750.valid){
continue;
}
IkReal x749=((-1.0)*(x750.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst39;
cj7=gconst40;
j7=x749;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst38=x749;
IkReal x751 = new_r10*new_r10;
if(IKabs(x751)==0){
continue;
}
IkReal gconst39=((-1.0)*new_r10*(pow(x751,-0.5)));
IkReal gconst40=0;
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x753 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x753.valid){
continue;
}
IkReal x752=((-1.0)*(x753.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst39;
cj7=gconst40;
j7=x752;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst38=x752;
IkReal x754 = new_r10*new_r10;
if(IKabs(x754)==0){
continue;
}
IkReal gconst39=((-1.0)*new_r10*(pow(x754,-0.5)));
IkReal gconst40=0;
j5eval[0]=new_r10;
j5eval[1]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x755=IKPowWithIntegerCheck(new_r10,-1);
if(!x755.valid){
continue;
}
CheckValue<IkReal> x756=IKPowWithIntegerCheck(new_r11,-1);
if(!x756.valid){
continue;
}
if( IKabs(((-1.0)*gconst39*(x755.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst39*(x756.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst39*(x755.value)))+IKsqr((gconst39*(x756.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*gconst39*(x755.value)), (gconst39*(x756.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x757=IKsin(j5);
IkReal x758=IKcos(j5);
IkReal x759=(gconst39*x757);
IkReal x760=(gconst39*x758);
evalcond[0]=(new_r10*x758);
evalcond[1]=(new_r11*x757);
evalcond[2]=x759;
evalcond[3]=x760;
evalcond[4]=(gconst39+((new_r10*x757)));
evalcond[5]=(x759+new_r10);
evalcond[6]=((((-1.0)*x760))+new_r11);
evalcond[7]=(((new_r11*x758))+(((-1.0)*gconst39)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x761=IKPowWithIntegerCheck(new_r10,-1);
if(!x761.valid){
continue;
}
CheckValue<IkReal> x762=IKPowWithIntegerCheck(gconst39,-1);
if(!x762.valid){
continue;
}
if( IKabs(((-1.0)*gconst39*(x761.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x762.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst39*(x761.value)))+IKsqr((new_r11*(x762.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*gconst39*(x761.value)), (new_r11*(x762.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x763=IKsin(j5);
IkReal x764=IKcos(j5);
IkReal x765=(gconst39*x763);
IkReal x766=(gconst39*x764);
evalcond[0]=(new_r10*x764);
evalcond[1]=(new_r11*x763);
evalcond[2]=x765;
evalcond[3]=x766;
evalcond[4]=(((new_r10*x763))+gconst39);
evalcond[5]=(x765+new_r10);
evalcond[6]=((((-1.0)*x766))+new_r11);
evalcond[7]=(((new_r11*x764))+(((-1.0)*gconst39)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x767 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x767.valid){
continue;
}
CheckValue<IkReal> x768=IKPowWithIntegerCheck(IKsign(gconst39),-1);
if(!x768.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x767.value)+(((1.5707963267949)*(x768.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x769=IKsin(j5);
IkReal x770=IKcos(j5);
IkReal x771=(gconst39*x769);
IkReal x772=(gconst39*x770);
evalcond[0]=(new_r10*x770);
evalcond[1]=(new_r11*x769);
evalcond[2]=x771;
evalcond[3]=x772;
evalcond[4]=(((new_r10*x769))+gconst39);
evalcond[5]=(x771+new_r10);
evalcond[6]=(new_r11+(((-1.0)*x772)));
evalcond[7]=(((new_r11*x770))+(((-1.0)*gconst39)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x773=((1.0)*new_r10);
CheckValue<IkReal> x774=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x774.valid){
continue;
}
CheckValue<IkReal> x775 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*x773))+((gconst40*new_r00)))),IkReal(((((-1.0)*gconst39*new_r00))+(((-1.0)*gconst40*x773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x775.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x774.value)))+(x775.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x776=IKsin(j5);
IkReal x777=IKcos(j5);
IkReal x778=(gconst40*x777);
IkReal x779=(gconst39*x776);
IkReal x780=(gconst40*x776);
IkReal x781=(gconst39*x777);
IkReal x782=((1.0)*x776);
IkReal x783=(x779+x778);
evalcond[0]=(gconst39+((new_r00*x777))+((new_r10*x776)));
evalcond[1]=(gconst40+((new_r11*x776))+((new_r01*x777)));
evalcond[2]=(x783+new_r01);
evalcond[3]=(x783+new_r10);
evalcond[4]=(gconst40+((new_r10*x777))+(((-1.0)*new_r00*x782)));
evalcond[5]=(x781+(((-1.0)*x780))+new_r00);
evalcond[6]=(x780+(((-1.0)*x781))+new_r11);
evalcond[7]=((((-1.0)*new_r01*x782))+((new_r11*x777))+(((-1.0)*gconst39)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x784=((1.0)*gconst40);
CheckValue<IkReal> x785=IKPowWithIntegerCheck(IKsign((((gconst39*new_r01))+(((-1.0)*new_r11*x784)))),-1);
if(!x785.valid){
continue;
}
CheckValue<IkReal> x786 = IKatan2WithCheck(IkReal(((gconst40*gconst40)+(((-1.0)*new_r01*new_r10)))),IkReal((((new_r10*new_r11))+(((-1.0)*gconst39*x784)))),IKFAST_ATAN2_MAGTHRESH);
if(!x786.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x785.value)))+(x786.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x787=IKsin(j5);
IkReal x788=IKcos(j5);
IkReal x789=(gconst40*x788);
IkReal x790=(gconst39*x787);
IkReal x791=(gconst40*x787);
IkReal x792=(gconst39*x788);
IkReal x793=((1.0)*x787);
IkReal x794=(x790+x789);
evalcond[0]=(((new_r10*x787))+gconst39+((new_r00*x788)));
evalcond[1]=(((new_r11*x787))+gconst40+((new_r01*x788)));
evalcond[2]=(x794+new_r01);
evalcond[3]=(x794+new_r10);
evalcond[4]=(((new_r10*x788))+gconst40+(((-1.0)*new_r00*x793)));
evalcond[5]=(x792+(((-1.0)*x791))+new_r00);
evalcond[6]=(x791+(((-1.0)*x792))+new_r11);
evalcond[7]=((((-1.0)*new_r01*x793))+((new_r11*x788))+(((-1.0)*gconst39)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x795 = IKatan2WithCheck(IkReal((((gconst39*new_r01))+(((-1.0)*gconst40*new_r00)))),IkReal((((gconst40*new_r10))+(((-1.0)*gconst39*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x795.valid){
continue;
}
CheckValue<IkReal> x796=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x796.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x795.value)+(((1.5707963267949)*(x796.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x797=IKsin(j5);
IkReal x798=IKcos(j5);
IkReal x799=(gconst40*x798);
IkReal x800=(gconst39*x797);
IkReal x801=(gconst40*x797);
IkReal x802=(gconst39*x798);
IkReal x803=((1.0)*x797);
IkReal x804=(x799+x800);
evalcond[0]=(((new_r10*x797))+gconst39+((new_r00*x798)));
evalcond[1]=(((new_r11*x797))+gconst40+((new_r01*x798)));
evalcond[2]=(new_r01+x804);
evalcond[3]=(new_r10+x804);
evalcond[4]=(((new_r10*x798))+(((-1.0)*new_r00*x803))+gconst40);
evalcond[5]=((((-1.0)*x801))+new_r00+x802);
evalcond[6]=((((-1.0)*x802))+new_r11+x801);
evalcond[7]=((((-1.0)*new_r01*x803))+((new_r11*x798))+(((-1.0)*gconst39)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x807 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x807)==0){
continue;
}
IkReal x805=pow(x807,-0.5);
IkReal x806=((1.0)*x805);
CheckValue<IkReal> x808 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x808.valid){
continue;
}
IkReal gconst41=((3.14159265358979)+(((-1.0)*(x808.value))));
IkReal gconst42=(new_r10*x806);
IkReal gconst43=(new_r00*x806);
CheckValue<IkReal> x809 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x809.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7+(x809.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x813 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x813.valid){
continue;
}
IkReal x810=((1.0)*(x813.value));
IkReal x811=x805;
IkReal x812=((1.0)*x811);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst42;
cj7=gconst43;
j7=((3.14159265)+(((-1.0)*x810)));
IkReal gconst41=((3.14159265358979)+(((-1.0)*x810)));
IkReal gconst42=(new_r10*x812);
IkReal gconst43=(new_r00*x812);
IkReal x814=new_r00*new_r00;
IkReal x815=((1.0)*new_r10);
IkReal x816=(((new_r00*new_r11))+(((-1.0)*new_r01*x815)));
IkReal x817=x805;
IkReal x818=(new_r10*x817);
j5eval[0]=x816;
j5eval[1]=((IKabs((((new_r01*x818))+(((-1.0)*x814*x817)))))+(IKabs((((new_r00*x818))+(((-1.0)*new_r11*x815*x817))))));
j5eval[2]=IKsign(x816);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x822 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x822.valid){
continue;
}
IkReal x819=((1.0)*(x822.value));
IkReal x820=x805;
IkReal x821=((1.0)*x820);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst42;
cj7=gconst43;
j7=((3.14159265)+(((-1.0)*x819)));
IkReal gconst41=((3.14159265358979)+(((-1.0)*x819)));
IkReal gconst42=(new_r10*x821);
IkReal gconst43=(new_r00*x821);
IkReal x823=new_r00*new_r00;
IkReal x824=new_r10*new_r10*new_r10;
IkReal x825=((1.0)*new_r01);
CheckValue<IkReal> x829=IKPowWithIntegerCheck(((new_r10*new_r10)+x823),-1);
if(!x829.valid){
continue;
}
IkReal x826=x829.value;
IkReal x827=(new_r10*x826);
IkReal x828=(x824*x826);
j5eval[0]=((IKabs((((x823*x826))+(((-1.0)*x823*x825*x827))+(((-1.0)*x825*x828)))))+(IKabs((((new_r11*x823*x827))+((new_r11*x828))+(((-1.0)*new_r00*x827))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x833 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x833.valid){
continue;
}
IkReal x830=((1.0)*(x833.value));
IkReal x831=x805;
IkReal x832=((1.0)*x831);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst42;
cj7=gconst43;
j7=((3.14159265)+(((-1.0)*x830)));
IkReal gconst41=((3.14159265358979)+(((-1.0)*x830)));
IkReal gconst42=(new_r10*x832);
IkReal gconst43=(new_r00*x832);
IkReal x834=((new_r10*new_r10)+(new_r00*new_r00));
j5eval[0]=x834;
j5eval[1]=IKsign(x834);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst43;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x836 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x836.valid){
continue;
}
IkReal x835=((1.0)*(x836.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst42;
cj7=gconst43;
j7=((3.14159265)+(((-1.0)*x835)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x835)));
IkReal gconst42=((1.0)*new_r10);
IkReal gconst43=((1.0)*new_r00);
j5eval[0]=1.0;
j5eval[1]=1.0;
j5eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x838 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x838.valid){
continue;
}
IkReal x837=((1.0)*(x838.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst42;
cj7=gconst43;
j7=((3.14159265)+(((-1.0)*x837)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x837)));
IkReal gconst42=((1.0)*new_r10);
IkReal gconst43=((1.0)*new_r00);
j5eval[0]=1.0;
j5eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
j5eval[2]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[4];
CheckValue<IkReal> x840 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x840.valid){
continue;
}
IkReal x839=((1.0)*(x840.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst42;
cj7=gconst43;
j7=((3.14159265)+(((-1.0)*x839)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x839)));
IkReal gconst42=((1.0)*new_r10);
IkReal gconst43=((1.0)*new_r00);
j5eval[0]=-1.0;
j5eval[1]=-1.0;
j5eval[2]=new_r10;
j5eval[3]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x841 = IKatan2WithCheck(IkReal(gconst42*gconst42),IkReal((gconst42*gconst43)),IKFAST_ATAN2_MAGTHRESH);
if(!x841.valid){
continue;
}
CheckValue<IkReal> x842=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst42*new_r10))+(((-1.0)*gconst43*new_r00)))),-1);
if(!x842.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x841.value)+(((1.5707963267949)*(x842.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x843=IKsin(j5);
IkReal x844=IKcos(j5);
IkReal x845=(gconst43*x844);
IkReal x846=(gconst42*x843);
IkReal x847=(gconst43*x843);
IkReal x848=(gconst42*x844);
IkReal x849=(x845+x846);
evalcond[0]=x849;
evalcond[1]=(((new_r10*x843))+((new_r00*x844))+gconst42);
evalcond[2]=(new_r10+x849);
evalcond[3]=((((-1.0)*x848))+x847);
evalcond[4]=(((new_r10*x844))+gconst43+(((-1.0)*new_r00*x843)));
evalcond[5]=((((-1.0)*x847))+new_r00+x848);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x850 = IKatan2WithCheck(IkReal((gconst43*new_r00)),IkReal(((-1.0)*gconst42*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x850.valid){
continue;
}
CheckValue<IkReal> x851=IKPowWithIntegerCheck(IKsign(((gconst42*gconst42)+(gconst43*gconst43))),-1);
if(!x851.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x850.value)+(((1.5707963267949)*(x851.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x852=IKsin(j5);
IkReal x853=IKcos(j5);
IkReal x854=(gconst43*x853);
IkReal x855=(gconst42*x852);
IkReal x856=(gconst43*x852);
IkReal x857=(gconst42*x853);
IkReal x858=(x854+x855);
evalcond[0]=x858;
evalcond[1]=(gconst42+((new_r10*x852))+((new_r00*x853)));
evalcond[2]=(new_r10+x858);
evalcond[3]=((((-1.0)*x857))+x856);
evalcond[4]=(gconst43+(((-1.0)*new_r00*x852))+((new_r10*x853)));
evalcond[5]=((((-1.0)*x856))+new_r00+x857);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x859=IKPowWithIntegerCheck(IKsign((((gconst43*new_r00))+((gconst42*new_r10)))),-1);
if(!x859.valid){
continue;
}
CheckValue<IkReal> x860 = IKatan2WithCheck(IkReal(gconst43*gconst43),IkReal(((-1.0)*gconst42*gconst43)),IKFAST_ATAN2_MAGTHRESH);
if(!x860.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x859.value)))+(x860.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x861=IKsin(j5);
IkReal x862=IKcos(j5);
IkReal x863=(gconst43*x862);
IkReal x864=(gconst42*x861);
IkReal x865=(gconst43*x861);
IkReal x866=(gconst42*x862);
IkReal x867=(x864+x863);
evalcond[0]=x867;
evalcond[1]=(((new_r00*x862))+gconst42+((new_r10*x861)));
evalcond[2]=(new_r10+x867);
evalcond[3]=((((-1.0)*x866))+x865);
evalcond[4]=((((-1.0)*new_r00*x861))+gconst43+((new_r10*x862)));
evalcond[5]=((((-1.0)*x865))+new_r00+x866);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x869 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x869.valid){
continue;
}
IkReal x868=((1.0)*(x869.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst42;
cj7=gconst43;
j7=((3.14159265)+(((-1.0)*x868)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x868)));
IkReal gconst42=0;
IkReal x870 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x870)==0){
continue;
}
IkReal gconst43=((1.0)*new_r00*(pow(x870,-0.5)));
j5eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x872 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x872.valid){
continue;
}
IkReal x871=((1.0)*(x872.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst42;
cj7=gconst43;
j7=((3.14159265)+(((-1.0)*x871)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x871)));
IkReal gconst42=0;
IkReal x873 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x873)==0){
continue;
}
IkReal gconst43=((1.0)*new_r00*(pow(x873,-0.5)));
j5eval[0]=new_r00;
j5eval[1]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x875 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x875.valid){
continue;
}
IkReal x874=((1.0)*(x875.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst42;
cj7=gconst43;
j7=((3.14159265)+(((-1.0)*x874)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x874)));
IkReal gconst42=0;
IkReal x876 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x876)==0){
continue;
}
IkReal gconst43=((1.0)*new_r00*(pow(x876,-0.5)));
j5eval[0]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x877=IKPowWithIntegerCheck(gconst43,-1);
if(!x877.valid){
continue;
}
CheckValue<IkReal> x878=IKPowWithIntegerCheck(new_r01,-1);
if(!x878.valid){
continue;
}
if( IKabs((new_r00*(x877.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst43*(x878.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r00*(x877.value)))+IKsqr(((-1.0)*gconst43*(x878.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r00*(x877.value)), ((-1.0)*gconst43*(x878.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x879=IKcos(j5);
IkReal x880=IKsin(j5);
IkReal x881=(gconst43*x879);
IkReal x882=(gconst43*x880);
evalcond[0]=(new_r00*x879);
evalcond[1]=x881;
evalcond[2]=x882;
evalcond[3]=((-1.0)*new_r01*x880);
evalcond[4]=(((new_r01*x879))+gconst43);
evalcond[5]=(new_r01+x881);
evalcond[6]=((((-1.0)*new_r00*x880))+gconst43);
evalcond[7]=((((-1.0)*x882))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x883=IKPowWithIntegerCheck(new_r00,-1);
if(!x883.valid){
continue;
}
CheckValue<IkReal> x884=IKPowWithIntegerCheck(new_r01,-1);
if(!x884.valid){
continue;
}
if( IKabs((gconst43*(x883.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst43*(x884.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst43*(x883.value)))+IKsqr(((-1.0)*gconst43*(x884.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((gconst43*(x883.value)), ((-1.0)*gconst43*(x884.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x885=IKcos(j5);
IkReal x886=IKsin(j5);
IkReal x887=(gconst43*x885);
IkReal x888=(gconst43*x886);
evalcond[0]=(new_r00*x885);
evalcond[1]=x887;
evalcond[2]=x888;
evalcond[3]=((-1.0)*new_r01*x886);
evalcond[4]=(((new_r01*x885))+gconst43);
evalcond[5]=(new_r01+x887);
evalcond[6]=((((-1.0)*new_r00*x886))+gconst43);
evalcond[7]=((((-1.0)*x888))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x889 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x889.valid){
continue;
}
CheckValue<IkReal> x890=IKPowWithIntegerCheck(IKsign(gconst43),-1);
if(!x890.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x889.value)+(((1.5707963267949)*(x890.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x891=IKcos(j5);
IkReal x892=IKsin(j5);
IkReal x893=(gconst43*x891);
IkReal x894=(gconst43*x892);
evalcond[0]=(new_r00*x891);
evalcond[1]=x893;
evalcond[2]=x894;
evalcond[3]=((-1.0)*new_r01*x892);
evalcond[4]=(((new_r01*x891))+gconst43);
evalcond[5]=(new_r01+x893);
evalcond[6]=((((-1.0)*new_r00*x892))+gconst43);
evalcond[7]=((((-1.0)*x894))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x896 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x896.valid){
continue;
}
IkReal x895=((1.0)*(x896.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst42;
cj7=gconst43;
j7=((3.14159265)+(((-1.0)*x895)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x895)));
IkReal x897 = new_r10*new_r10;
if(IKabs(x897)==0){
continue;
}
IkReal gconst42=((1.0)*new_r10*(pow(x897,-0.5)));
IkReal gconst43=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x899 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x899.valid){
continue;
}
IkReal x898=((1.0)*(x899.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst42;
cj7=gconst43;
j7=((3.14159265)+(((-1.0)*x898)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x898)));
IkReal x900 = new_r10*new_r10;
if(IKabs(x900)==0){
continue;
}
IkReal gconst42=((1.0)*new_r10*(pow(x900,-0.5)));
IkReal gconst43=0;
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x902 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x902.valid){
continue;
}
IkReal x901=((1.0)*(x902.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst42;
cj7=gconst43;
j7=((3.14159265)+(((-1.0)*x901)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst41=((3.14159265358979)+(((-1.0)*x901)));
IkReal x903 = new_r10*new_r10;
if(IKabs(x903)==0){
continue;
}
IkReal gconst42=((1.0)*new_r10*(pow(x903,-0.5)));
IkReal gconst43=0;
j5eval[0]=new_r10;
j5eval[1]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x904=IKPowWithIntegerCheck(new_r10,-1);
if(!x904.valid){
continue;
}
CheckValue<IkReal> x905=IKPowWithIntegerCheck(new_r11,-1);
if(!x905.valid){
continue;
}
if( IKabs(((-1.0)*gconst42*(x904.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst42*(x905.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst42*(x904.value)))+IKsqr((gconst42*(x905.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*gconst42*(x904.value)), (gconst42*(x905.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x906=IKsin(j5);
IkReal x907=IKcos(j5);
IkReal x908=((1.0)*gconst42);
IkReal x909=(gconst42*x906);
evalcond[0]=(new_r10*x907);
evalcond[1]=(new_r11*x906);
evalcond[2]=x909;
evalcond[3]=(gconst42*x907);
evalcond[4]=(gconst42+((new_r10*x906)));
evalcond[5]=(new_r10+x909);
evalcond[6]=(new_r11+(((-1.0)*x907*x908)));
evalcond[7]=((((-1.0)*x908))+((new_r11*x907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x910=IKPowWithIntegerCheck(new_r10,-1);
if(!x910.valid){
continue;
}
CheckValue<IkReal> x911=IKPowWithIntegerCheck(gconst42,-1);
if(!x911.valid){
continue;
}
if( IKabs(((-1.0)*gconst42*(x910.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x911.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst42*(x910.value)))+IKsqr((new_r11*(x911.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*gconst42*(x910.value)), (new_r11*(x911.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x912=IKsin(j5);
IkReal x913=IKcos(j5);
IkReal x914=((1.0)*gconst42);
IkReal x915=(gconst42*x912);
evalcond[0]=(new_r10*x913);
evalcond[1]=(new_r11*x912);
evalcond[2]=x915;
evalcond[3]=(gconst42*x913);
evalcond[4]=(gconst42+((new_r10*x912)));
evalcond[5]=(new_r10+x915);
evalcond[6]=((((-1.0)*x913*x914))+new_r11);
evalcond[7]=(((new_r11*x913))+(((-1.0)*x914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x916=IKPowWithIntegerCheck(IKsign(gconst42),-1);
if(!x916.valid){
continue;
}
CheckValue<IkReal> x917 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x917.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x916.value)))+(x917.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x918=IKsin(j5);
IkReal x919=IKcos(j5);
IkReal x920=((1.0)*gconst42);
IkReal x921=(gconst42*x918);
evalcond[0]=(new_r10*x919);
evalcond[1]=(new_r11*x918);
evalcond[2]=x921;
evalcond[3]=(gconst42*x919);
evalcond[4]=(gconst42+((new_r10*x918)));
evalcond[5]=(new_r10+x921);
evalcond[6]=((((-1.0)*x919*x920))+new_r11);
evalcond[7]=((((-1.0)*x920))+((new_r11*x919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x922=((1.0)*gconst42);
CheckValue<IkReal> x923=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x923.valid){
continue;
}
CheckValue<IkReal> x924 = IKatan2WithCheck(IkReal((((gconst43*new_r00))+(((-1.0)*new_r10*x922)))),IkReal(((((-1.0)*gconst43*new_r10))+(((-1.0)*new_r00*x922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x924.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x923.value)))+(x924.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x925=IKsin(j5);
IkReal x926=IKcos(j5);
IkReal x927=((1.0)*gconst42);
IkReal x928=(gconst43*x926);
IkReal x929=(gconst42*x925);
IkReal x930=(gconst43*x925);
IkReal x931=((1.0)*x925);
IkReal x932=(x928+x929);
evalcond[0]=(gconst42+((new_r00*x926))+((new_r10*x925)));
evalcond[1]=(gconst43+((new_r01*x926))+((new_r11*x925)));
evalcond[2]=(new_r01+x932);
evalcond[3]=(new_r10+x932);
evalcond[4]=(gconst43+(((-1.0)*new_r00*x931))+((new_r10*x926)));
evalcond[5]=(((gconst42*x926))+(((-1.0)*x930))+new_r00);
evalcond[6]=((((-1.0)*x926*x927))+new_r11+x930);
evalcond[7]=((((-1.0)*x927))+(((-1.0)*new_r01*x931))+((new_r11*x926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x933=((1.0)*gconst43);
CheckValue<IkReal> x934 = IKatan2WithCheck(IkReal(((gconst43*gconst43)+(((-1.0)*new_r01*new_r10)))),IkReal((((new_r10*new_r11))+(((-1.0)*gconst42*x933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x934.valid){
continue;
}
CheckValue<IkReal> x935=IKPowWithIntegerCheck(IKsign((((gconst42*new_r01))+(((-1.0)*new_r11*x933)))),-1);
if(!x935.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x934.value)+(((1.5707963267949)*(x935.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x936=IKsin(j5);
IkReal x937=IKcos(j5);
IkReal x938=((1.0)*gconst42);
IkReal x939=(gconst43*x937);
IkReal x940=(gconst42*x936);
IkReal x941=(gconst43*x936);
IkReal x942=((1.0)*x936);
IkReal x943=(x939+x940);
evalcond[0]=(gconst42+((new_r00*x937))+((new_r10*x936)));
evalcond[1]=(gconst43+((new_r01*x937))+((new_r11*x936)));
evalcond[2]=(new_r01+x943);
evalcond[3]=(new_r10+x943);
evalcond[4]=(gconst43+((new_r10*x937))+(((-1.0)*new_r00*x942)));
evalcond[5]=(((gconst42*x937))+(((-1.0)*x941))+new_r00);
evalcond[6]=((((-1.0)*x937*x938))+new_r11+x941);
evalcond[7]=((((-1.0)*new_r01*x942))+((new_r11*x937))+(((-1.0)*x938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x944 = IKatan2WithCheck(IkReal((((gconst42*new_r01))+(((-1.0)*gconst43*new_r00)))),IkReal((((gconst43*new_r10))+(((-1.0)*gconst42*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x944.valid){
continue;
}
CheckValue<IkReal> x945=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x945.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x944.value)+(((1.5707963267949)*(x945.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x946=IKsin(j5);
IkReal x947=IKcos(j5);
IkReal x948=((1.0)*gconst42);
IkReal x949=(gconst43*x947);
IkReal x950=(gconst42*x946);
IkReal x951=(gconst43*x946);
IkReal x952=((1.0)*x946);
IkReal x953=(x950+x949);
evalcond[0]=(((new_r00*x947))+gconst42+((new_r10*x946)));
evalcond[1]=(((new_r01*x947))+gconst43+((new_r11*x946)));
evalcond[2]=(new_r01+x953);
evalcond[3]=(new_r10+x953);
evalcond[4]=(gconst43+(((-1.0)*new_r00*x952))+((new_r10*x947)));
evalcond[5]=((((-1.0)*x951))+((gconst42*x947))+new_r00);
evalcond[6]=((((-1.0)*x947*x948))+new_r11+x951);
evalcond[7]=((((-1.0)*x948))+(((-1.0)*new_r01*x952))+((new_r11*x947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x956 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x956)==0){
continue;
}
IkReal x954=pow(x956,-0.5);
IkReal x955=((-1.0)*x954);
CheckValue<IkReal> x957 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x957.valid){
continue;
}
IkReal gconst44=((-1.0)*(x957.value));
IkReal gconst45=(new_r11*x955);
IkReal gconst46=(new_r01*x955);
CheckValue<IkReal> x958 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x958.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x958.value)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x962 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x962.valid){
continue;
}
IkReal x959=((-1.0)*(x962.value));
IkReal x960=x954;
IkReal x961=((-1.0)*x960);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst45;
cj7=gconst46;
j7=x959;
IkReal gconst44=x959;
IkReal gconst45=(new_r11*x961);
IkReal gconst46=(new_r01*x961);
IkReal x963=new_r11*new_r11;
IkReal x964=(((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)));
IkReal x965=x954;
IkReal x966=((1.0)*new_r01*x965);
j5eval[0]=x964;
j5eval[1]=((IKabs((((new_r00*new_r01*x965))+(((-1.0)*new_r11*x966)))))+(IKabs((((x963*x965))+(((-1.0)*new_r10*x966))))));
j5eval[2]=IKsign(x964);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x970 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x970.valid){
continue;
}
IkReal x967=((-1.0)*(x970.value));
IkReal x968=x954;
IkReal x969=((-1.0)*x968);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst45;
cj7=gconst46;
j7=x967;
IkReal gconst44=x967;
IkReal gconst45=(new_r11*x969);
IkReal gconst46=(new_r01*x969);
IkReal x971=((new_r10*new_r10)+(new_r00*new_r00));
j5eval[0]=x971;
j5eval[1]=IKsign(x971);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x975 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x975.valid){
continue;
}
IkReal x972=((-1.0)*(x975.value));
IkReal x973=x954;
IkReal x974=((-1.0)*x973);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst45;
cj7=gconst46;
j7=x972;
IkReal gconst44=x972;
IkReal gconst45=(new_r11*x974);
IkReal gconst46=(new_r01*x974);
IkReal x976=new_r11*new_r11;
CheckValue<IkReal> x979=IKPowWithIntegerCheck(((new_r01*new_r01)+x976),-1);
if(!x979.valid){
continue;
}
IkReal x977=x979.value;
IkReal x978=((1.0)*x976*x977);
j5eval[0]=((IKabs((((new_r01*new_r10))+(((-1.0)*x978)))))+(IKabs((((new_r01*new_r11*x977))+(((-1.0)*new_r00*x977*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r00*new_r01*x978))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r10*new_r10)+(new_r00*new_r00));
evalcond[1]=gconst46;
evalcond[2]=gconst45;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
CheckValue<IkReal> x983 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x983.valid){
continue;
}
IkReal x980=((-1.0)*(x983.value));
IkReal x981=x954;
IkReal x982=((-1.0)*x981);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst45;
cj7=gconst46;
j7=x980;
new_r10=0;
new_r00=0;
IkReal gconst44=x980;
IkReal gconst45=(new_r11*x982);
IkReal gconst46=(new_r01*x982);
j5eval[0]=new_r01;
j5eval[1]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x987 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x987.valid){
continue;
}
IkReal x984=((-1.0)*(x987.value));
IkReal x985=x954;
IkReal x986=((-1.0)*x985);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst45;
cj7=gconst46;
j7=x984;
new_r10=0;
new_r00=0;
IkReal gconst44=x984;
IkReal gconst45=(new_r11*x986);
IkReal gconst46=(new_r01*x986);
j5eval[0]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x991 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x991.valid){
continue;
}
IkReal x988=((-1.0)*(x991.value));
IkReal x989=x954;
IkReal x990=((-1.0)*x989);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst45;
cj7=gconst46;
j7=x988;
new_r10=0;
new_r00=0;
IkReal gconst44=x988;
IkReal gconst45=(new_r11*x990);
IkReal gconst46=(new_r01*x990);
j5eval[0]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x992 = IKatan2WithCheck(IkReal((gconst46*new_r11)),IkReal(((-1.0)*gconst45*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x992.valid){
continue;
}
CheckValue<IkReal> x993=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst45*gconst45)))+(((-1.0)*(gconst46*gconst46))))),-1);
if(!x993.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x992.value)+(((1.5707963267949)*(x993.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x994=IKsin(j5);
IkReal x995=IKcos(j5);
IkReal x996=((1.0)*gconst45);
IkReal x997=(gconst45*x994);
IkReal x998=(gconst46*x995);
IkReal x999=(gconst46*x994);
IkReal x1000=(x997+x998);
evalcond[0]=x1000;
evalcond[1]=(((new_r11*x994))+gconst46+((new_r01*x995)));
evalcond[2]=(x1000+new_r01);
evalcond[3]=((((-1.0)*x999))+((gconst45*x995)));
evalcond[4]=((((-1.0)*x995*x996))+new_r11+x999);
evalcond[5]=(((new_r11*x995))+(((-1.0)*x996))+(((-1.0)*new_r01*x994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1001 = IKatan2WithCheck(IkReal((gconst45*new_r01)),IkReal((gconst46*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1001.valid){
continue;
}
CheckValue<IkReal> x1002=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst45*gconst45)))+(((-1.0)*(gconst46*gconst46))))),-1);
if(!x1002.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1001.value)+(((1.5707963267949)*(x1002.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1003=IKsin(j5);
IkReal x1004=IKcos(j5);
IkReal x1005=((1.0)*gconst45);
IkReal x1006=(gconst45*x1003);
IkReal x1007=(gconst46*x1004);
IkReal x1008=(gconst46*x1003);
IkReal x1009=(x1007+x1006);
evalcond[0]=x1009;
evalcond[1]=(gconst46+((new_r11*x1003))+((new_r01*x1004)));
evalcond[2]=(x1009+new_r01);
evalcond[3]=((((-1.0)*x1008))+((gconst45*x1004)));
evalcond[4]=(x1008+(((-1.0)*x1004*x1005))+new_r11);
evalcond[5]=((((-1.0)*new_r01*x1003))+(((-1.0)*x1005))+((new_r11*x1004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1010=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst45*new_r11))+(((-1.0)*gconst46*new_r01)))),-1);
if(!x1010.valid){
continue;
}
CheckValue<IkReal> x1011 = IKatan2WithCheck(IkReal((gconst45*gconst46)),IkReal(gconst46*gconst46),IKFAST_ATAN2_MAGTHRESH);
if(!x1011.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1010.value)))+(x1011.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1012=IKsin(j5);
IkReal x1013=IKcos(j5);
IkReal x1014=((1.0)*gconst45);
IkReal x1015=(gconst45*x1012);
IkReal x1016=(gconst46*x1013);
IkReal x1017=(gconst46*x1012);
IkReal x1018=(x1015+x1016);
evalcond[0]=x1018;
evalcond[1]=(((new_r11*x1012))+gconst46+((new_r01*x1013)));
evalcond[2]=(x1018+new_r01);
evalcond[3]=(((gconst45*x1013))+(((-1.0)*x1017)));
evalcond[4]=(x1017+(((-1.0)*x1013*x1014))+new_r11);
evalcond[5]=(((new_r11*x1013))+(((-1.0)*x1014))+(((-1.0)*new_r01*x1012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x1019=((-1.0)*new_r01);
CheckValue<IkReal> x1021 = IKatan2WithCheck(IkReal(0),IkReal(x1019),IKFAST_ATAN2_MAGTHRESH);
if(!x1021.valid){
continue;
}
IkReal x1020=((-1.0)*(x1021.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst45;
cj7=gconst46;
j7=x1020;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst44=x1020;
IkReal gconst45=0;
IkReal x1022 = new_r01*new_r01;
if(IKabs(x1022)==0){
continue;
}
IkReal gconst46=(x1019*(pow(x1022,-0.5)));
j5eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1023=((-1.0)*new_r01);
CheckValue<IkReal> x1025 = IKatan2WithCheck(IkReal(0),IkReal(x1023),IKFAST_ATAN2_MAGTHRESH);
if(!x1025.valid){
continue;
}
IkReal x1024=((-1.0)*(x1025.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst45;
cj7=gconst46;
j7=x1024;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst44=x1024;
IkReal gconst45=0;
IkReal x1026 = new_r01*new_r01;
if(IKabs(x1026)==0){
continue;
}
IkReal gconst46=(x1023*(pow(x1026,-0.5)));
j5eval[0]=new_r00;
j5eval[1]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x1027=((-1.0)*new_r01);
CheckValue<IkReal> x1029 = IKatan2WithCheck(IkReal(0),IkReal(x1027),IKFAST_ATAN2_MAGTHRESH);
if(!x1029.valid){
continue;
}
IkReal x1028=((-1.0)*(x1029.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst45;
cj7=gconst46;
j7=x1028;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst44=x1028;
IkReal gconst45=0;
IkReal x1030 = new_r01*new_r01;
if(IKabs(x1030)==0){
continue;
}
IkReal gconst46=(x1027*(pow(x1030,-0.5)));
j5eval[0]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1031=IKPowWithIntegerCheck(gconst46,-1);
if(!x1031.valid){
continue;
}
CheckValue<IkReal> x1032=IKPowWithIntegerCheck(new_r01,-1);
if(!x1032.valid){
continue;
}
if( IKabs((new_r00*(x1031.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst46*(x1032.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r00*(x1031.value)))+IKsqr(((-1.0)*gconst46*(x1032.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r00*(x1031.value)), ((-1.0)*gconst46*(x1032.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1033=IKcos(j5);
IkReal x1034=IKsin(j5);
IkReal x1035=(gconst46*x1033);
IkReal x1036=(gconst46*x1034);
evalcond[0]=(new_r00*x1033);
evalcond[1]=x1035;
evalcond[2]=x1036;
evalcond[3]=((-1.0)*new_r01*x1034);
evalcond[4]=(gconst46+((new_r01*x1033)));
evalcond[5]=(x1035+new_r01);
evalcond[6]=(gconst46+(((-1.0)*new_r00*x1034)));
evalcond[7]=((((-1.0)*x1036))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1037=IKPowWithIntegerCheck(new_r00,-1);
if(!x1037.valid){
continue;
}
CheckValue<IkReal> x1038=IKPowWithIntegerCheck(new_r01,-1);
if(!x1038.valid){
continue;
}
if( IKabs((gconst46*(x1037.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst46*(x1038.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst46*(x1037.value)))+IKsqr(((-1.0)*gconst46*(x1038.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((gconst46*(x1037.value)), ((-1.0)*gconst46*(x1038.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1039=IKcos(j5);
IkReal x1040=IKsin(j5);
IkReal x1041=(gconst46*x1039);
IkReal x1042=(gconst46*x1040);
evalcond[0]=(new_r00*x1039);
evalcond[1]=x1041;
evalcond[2]=x1042;
evalcond[3]=((-1.0)*new_r01*x1040);
evalcond[4]=(gconst46+((new_r01*x1039)));
evalcond[5]=(x1041+new_r01);
evalcond[6]=(gconst46+(((-1.0)*new_r00*x1040)));
evalcond[7]=((((-1.0)*x1042))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1043 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1043.valid){
continue;
}
CheckValue<IkReal> x1044=IKPowWithIntegerCheck(IKsign(gconst46),-1);
if(!x1044.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1043.value)+(((1.5707963267949)*(x1044.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1045=IKcos(j5);
IkReal x1046=IKsin(j5);
IkReal x1047=(gconst46*x1045);
IkReal x1048=(gconst46*x1046);
evalcond[0]=(new_r00*x1045);
evalcond[1]=x1047;
evalcond[2]=x1048;
evalcond[3]=((-1.0)*new_r01*x1046);
evalcond[4]=(gconst46+((new_r01*x1045)));
evalcond[5]=(x1047+new_r01);
evalcond[6]=(gconst46+(((-1.0)*new_r00*x1046)));
evalcond[7]=((((-1.0)*x1048))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x1050 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1050.valid){
continue;
}
IkReal x1049=((-1.0)*(x1050.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst45;
cj7=gconst46;
j7=x1049;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst44=x1049;
IkReal x1051 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1051)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x1051,-0.5)));
IkReal gconst46=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x1053 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1053.valid){
continue;
}
IkReal x1052=((-1.0)*(x1053.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst45;
cj7=gconst46;
j7=x1052;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst44=x1052;
IkReal x1054 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1054)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x1054,-0.5)));
IkReal gconst46=0;
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x1056 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1056.valid){
continue;
}
IkReal x1055=((-1.0)*(x1056.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst45;
cj7=gconst46;
j7=x1055;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst44=x1055;
IkReal x1057 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1057)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x1057,-0.5)));
IkReal gconst46=0;
j5eval[0]=new_r10;
j5eval[1]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1058=IKPowWithIntegerCheck(new_r10,-1);
if(!x1058.valid){
continue;
}
CheckValue<IkReal> x1059=IKPowWithIntegerCheck(new_r11,-1);
if(!x1059.valid){
continue;
}
if( IKabs(((-1.0)*gconst45*(x1058.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst45*(x1059.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst45*(x1058.value)))+IKsqr((gconst45*(x1059.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*gconst45*(x1058.value)), (gconst45*(x1059.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1060=IKsin(j5);
IkReal x1061=IKcos(j5);
IkReal x1062=((1.0)*gconst45);
IkReal x1063=(gconst45*x1060);
evalcond[0]=(new_r10*x1061);
evalcond[1]=(new_r11*x1060);
evalcond[2]=x1063;
evalcond[3]=(gconst45*x1061);
evalcond[4]=(gconst45+((new_r10*x1060)));
evalcond[5]=(x1063+new_r10);
evalcond[6]=((((-1.0)*x1061*x1062))+new_r11);
evalcond[7]=(((new_r11*x1061))+(((-1.0)*x1062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1064=IKPowWithIntegerCheck(new_r10,-1);
if(!x1064.valid){
continue;
}
CheckValue<IkReal> x1065=IKPowWithIntegerCheck(gconst45,-1);
if(!x1065.valid){
continue;
}
if( IKabs(((-1.0)*gconst45*(x1064.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x1065.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst45*(x1064.value)))+IKsqr((new_r11*(x1065.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*gconst45*(x1064.value)), (new_r11*(x1065.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1066=IKsin(j5);
IkReal x1067=IKcos(j5);
IkReal x1068=((1.0)*gconst45);
IkReal x1069=(gconst45*x1066);
evalcond[0]=(new_r10*x1067);
evalcond[1]=(new_r11*x1066);
evalcond[2]=x1069;
evalcond[3]=(gconst45*x1067);
evalcond[4]=(gconst45+((new_r10*x1066)));
evalcond[5]=(x1069+new_r10);
evalcond[6]=((((-1.0)*x1067*x1068))+new_r11);
evalcond[7]=(((new_r11*x1067))+(((-1.0)*x1068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1070=IKPowWithIntegerCheck(IKsign(gconst45),-1);
if(!x1070.valid){
continue;
}
CheckValue<IkReal> x1071 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1071.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1070.value)))+(x1071.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1072=IKsin(j5);
IkReal x1073=IKcos(j5);
IkReal x1074=((1.0)*gconst45);
IkReal x1075=(gconst45*x1072);
evalcond[0]=(new_r10*x1073);
evalcond[1]=(new_r11*x1072);
evalcond[2]=x1075;
evalcond[3]=(gconst45*x1073);
evalcond[4]=(gconst45+((new_r10*x1072)));
evalcond[5]=(x1075+new_r10);
evalcond[6]=((((-1.0)*x1073*x1074))+new_r11);
evalcond[7]=(((new_r11*x1073))+(((-1.0)*x1074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst46;
evalcond[2]=gconst45;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x1076=((-1.0)*new_r01);
CheckValue<IkReal> x1078 = IKatan2WithCheck(IkReal(new_r11),IkReal(x1076),IKFAST_ATAN2_MAGTHRESH);
if(!x1078.valid){
continue;
}
IkReal x1077=((-1.0)*(x1078.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst45;
cj7=gconst46;
j7=x1077;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst44=x1077;
IkReal gconst45=((-1.0)*new_r11);
IkReal gconst46=x1076;
j5eval[0]=1.0;
j5eval[1]=1.0;
j5eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x1079=((-1.0)*new_r01);
CheckValue<IkReal> x1081 = IKatan2WithCheck(IkReal(new_r11),IkReal(x1079),IKFAST_ATAN2_MAGTHRESH);
if(!x1081.valid){
continue;
}
IkReal x1080=((-1.0)*(x1081.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst45;
cj7=gconst46;
j7=x1080;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst44=x1080;
IkReal gconst45=((-1.0)*new_r11);
IkReal gconst46=x1079;
j5eval[0]=-1.0;
j5eval[1]=-1.0;
j5eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x1082=((-1.0)*new_r01);
CheckValue<IkReal> x1084 = IKatan2WithCheck(IkReal(new_r11),IkReal(x1082),IKFAST_ATAN2_MAGTHRESH);
if(!x1084.valid){
continue;
}
IkReal x1083=((-1.0)*(x1084.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst45;
cj7=gconst46;
j7=x1083;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst44=x1083;
IkReal gconst45=((-1.0)*new_r11);
IkReal gconst46=x1082;
j5eval[0]=-1.0;
j5eval[1]=-1.0;
j5eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1085 = IKatan2WithCheck(IkReal((gconst46*new_r11)),IkReal(((-1.0)*gconst45*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1085.valid){
continue;
}
CheckValue<IkReal> x1086=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst45*gconst45)))+(((-1.0)*(gconst46*gconst46))))),-1);
if(!x1086.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1085.value)+(((1.5707963267949)*(x1086.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1087=IKsin(j5);
IkReal x1088=IKcos(j5);
IkReal x1089=((1.0)*gconst45);
IkReal x1090=(gconst45*x1087);
IkReal x1091=(gconst46*x1088);
IkReal x1092=(gconst46*x1087);
IkReal x1093=(x1090+x1091);
evalcond[0]=x1093;
evalcond[1]=(((new_r01*x1088))+gconst46+((new_r11*x1087)));
evalcond[2]=(x1093+new_r01);
evalcond[3]=(((gconst45*x1088))+(((-1.0)*x1092)));
evalcond[4]=(x1092+(((-1.0)*x1088*x1089))+new_r11);
evalcond[5]=((((-1.0)*new_r01*x1087))+((new_r11*x1088))+(((-1.0)*x1089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1094 = IKatan2WithCheck(IkReal((gconst45*new_r01)),IkReal((gconst46*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1094.valid){
continue;
}
CheckValue<IkReal> x1095=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst45*gconst45)))+(((-1.0)*(gconst46*gconst46))))),-1);
if(!x1095.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1094.value)+(((1.5707963267949)*(x1095.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1096=IKsin(j5);
IkReal x1097=IKcos(j5);
IkReal x1098=((1.0)*gconst45);
IkReal x1099=(gconst45*x1096);
IkReal x1100=(gconst46*x1097);
IkReal x1101=(gconst46*x1096);
IkReal x1102=(x1100+x1099);
evalcond[0]=x1102;
evalcond[1]=(((new_r11*x1096))+((new_r01*x1097))+gconst46);
evalcond[2]=(x1102+new_r01);
evalcond[3]=((((-1.0)*x1101))+((gconst45*x1097)));
evalcond[4]=(x1101+(((-1.0)*x1097*x1098))+new_r11);
evalcond[5]=(((new_r11*x1097))+(((-1.0)*x1098))+(((-1.0)*new_r01*x1096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1103=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst45*new_r11))+(((-1.0)*gconst46*new_r01)))),-1);
if(!x1103.valid){
continue;
}
CheckValue<IkReal> x1104 = IKatan2WithCheck(IkReal((gconst45*gconst46)),IkReal(gconst46*gconst46),IKFAST_ATAN2_MAGTHRESH);
if(!x1104.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1103.value)))+(x1104.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1105=IKsin(j5);
IkReal x1106=IKcos(j5);
IkReal x1107=((1.0)*gconst45);
IkReal x1108=(gconst45*x1105);
IkReal x1109=(gconst46*x1106);
IkReal x1110=(gconst46*x1105);
IkReal x1111=(x1108+x1109);
evalcond[0]=x1111;
evalcond[1]=(gconst46+((new_r11*x1105))+((new_r01*x1106)));
evalcond[2]=(x1111+new_r01);
evalcond[3]=(((gconst45*x1106))+(((-1.0)*x1110)));
evalcond[4]=(x1110+(((-1.0)*x1106*x1107))+new_r11);
evalcond[5]=((((-1.0)*new_r01*x1105))+((new_r11*x1106))+(((-1.0)*x1107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1112 = IKatan2WithCheck(IkReal(((((-1.0)*new_r00*new_r01))+((gconst45*gconst46)))),IkReal(((((-1.0)*(gconst45*gconst45)))+((new_r01*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1112.valid){
continue;
}
CheckValue<IkReal> x1113=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst46*new_r10))+((gconst45*new_r00)))),-1);
if(!x1113.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1112.value)+(((1.5707963267949)*(x1113.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1114=IKsin(j5);
IkReal x1115=IKcos(j5);
IkReal x1116=((1.0)*gconst45);
IkReal x1117=(gconst45*x1114);
IkReal x1118=(gconst46*x1115);
IkReal x1119=(gconst46*x1114);
IkReal x1120=((1.0)*x1114);
IkReal x1121=(x1117+x1118);
evalcond[0]=(gconst45+((new_r00*x1115))+((new_r10*x1114)));
evalcond[1]=(gconst46+((new_r11*x1114))+((new_r01*x1115)));
evalcond[2]=(x1121+new_r01);
evalcond[3]=(x1121+new_r10);
evalcond[4]=(gconst46+(((-1.0)*new_r00*x1120))+((new_r10*x1115)));
evalcond[5]=(((gconst45*x1115))+(((-1.0)*x1119))+new_r00);
evalcond[6]=(x1119+new_r11+(((-1.0)*x1115*x1116)));
evalcond[7]=((((-1.0)*new_r01*x1120))+((new_r11*x1115))+(((-1.0)*x1116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1122=((1.0)*new_r10);
CheckValue<IkReal> x1123 = IKatan2WithCheck(IkReal((((gconst46*new_r00))+(((-1.0)*gconst45*x1122)))),IkReal(((((-1.0)*gconst45*new_r00))+(((-1.0)*gconst46*x1122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1123.valid){
continue;
}
CheckValue<IkReal> x1124=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x1124.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1123.value)+(((1.5707963267949)*(x1124.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1125=IKsin(j5);
IkReal x1126=IKcos(j5);
IkReal x1127=((1.0)*gconst45);
IkReal x1128=(gconst45*x1125);
IkReal x1129=(gconst46*x1126);
IkReal x1130=(gconst46*x1125);
IkReal x1131=((1.0)*x1125);
IkReal x1132=(x1128+x1129);
evalcond[0]=(gconst45+((new_r10*x1125))+((new_r00*x1126)));
evalcond[1]=(gconst46+((new_r01*x1126))+((new_r11*x1125)));
evalcond[2]=(x1132+new_r01);
evalcond[3]=(x1132+new_r10);
evalcond[4]=(gconst46+(((-1.0)*new_r00*x1131))+((new_r10*x1126)));
evalcond[5]=(((gconst45*x1126))+(((-1.0)*x1130))+new_r00);
evalcond[6]=(x1130+(((-1.0)*x1126*x1127))+new_r11);
evalcond[7]=((((-1.0)*new_r01*x1131))+(((-1.0)*x1127))+((new_r11*x1126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1133 = IKatan2WithCheck(IkReal(((((-1.0)*gconst46*new_r00))+((gconst45*new_r01)))),IkReal((((gconst46*new_r10))+(((-1.0)*gconst45*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1133.valid){
continue;
}
CheckValue<IkReal> x1134=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x1134.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1133.value)+(((1.5707963267949)*(x1134.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1135=IKsin(j5);
IkReal x1136=IKcos(j5);
IkReal x1137=((1.0)*gconst45);
IkReal x1138=(gconst45*x1135);
IkReal x1139=(gconst46*x1136);
IkReal x1140=(gconst46*x1135);
IkReal x1141=((1.0)*x1135);
IkReal x1142=(x1139+x1138);
evalcond[0]=(gconst45+((new_r00*x1136))+((new_r10*x1135)));
evalcond[1]=(gconst46+((new_r11*x1135))+((new_r01*x1136)));
evalcond[2]=(x1142+new_r01);
evalcond[3]=(x1142+new_r10);
evalcond[4]=((((-1.0)*new_r00*x1141))+gconst46+((new_r10*x1136)));
evalcond[5]=(((gconst45*x1136))+(((-1.0)*x1140))+new_r00);
evalcond[6]=(x1140+(((-1.0)*x1136*x1137))+new_r11);
evalcond[7]=((((-1.0)*new_r01*x1141))+(((-1.0)*x1137))+((new_r11*x1136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1145 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1145)==0){
continue;
}
IkReal x1143=pow(x1145,-0.5);
IkReal x1144=((1.0)*x1143);
CheckValue<IkReal> x1146 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1146.valid){
continue;
}
IkReal gconst47=((3.14159265358979)+(((-1.0)*(x1146.value))));
IkReal gconst48=(new_r11*x1144);
IkReal gconst49=(new_r01*x1144);
CheckValue<IkReal> x1147 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1147.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1147.value)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x1151 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1151.valid){
continue;
}
IkReal x1148=((1.0)*(x1151.value));
IkReal x1149=x1143;
IkReal x1150=((1.0)*x1149);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst48;
cj7=gconst49;
j7=((3.14159265)+(((-1.0)*x1148)));
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1148)));
IkReal gconst48=(new_r11*x1150);
IkReal gconst49=(new_r01*x1150);
IkReal x1152=new_r11*new_r11;
IkReal x1153=(new_r01*new_r10);
IkReal x1154=(((new_r00*new_r11))+(((-1.0)*x1153)));
IkReal x1155=x1143;
IkReal x1156=((1.0)*x1155);
j5eval[0]=x1154;
j5eval[1]=((IKabs((((new_r01*new_r11*x1155))+(((-1.0)*new_r00*new_r01*x1156)))))+(IKabs((((x1153*x1155))+(((-1.0)*x1152*x1156))))));
j5eval[2]=IKsign(x1154);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x1160 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1160.valid){
continue;
}
IkReal x1157=((1.0)*(x1160.value));
IkReal x1158=x1143;
IkReal x1159=((1.0)*x1158);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst48;
cj7=gconst49;
j7=((3.14159265)+(((-1.0)*x1157)));
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1157)));
IkReal gconst48=(new_r11*x1159);
IkReal gconst49=(new_r01*x1159);
IkReal x1161=((new_r10*new_r10)+(new_r00*new_r00));
j5eval[0]=x1161;
j5eval[1]=IKsign(x1161);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x1165 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1165.valid){
continue;
}
IkReal x1162=((1.0)*(x1165.value));
IkReal x1163=x1143;
IkReal x1164=((1.0)*x1163);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst48;
cj7=gconst49;
j7=((3.14159265)+(((-1.0)*x1162)));
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1162)));
IkReal gconst48=(new_r11*x1164);
IkReal gconst49=(new_r01*x1164);
IkReal x1166=new_r11*new_r11;
IkReal x1167=new_r01*new_r01*new_r01;
CheckValue<IkReal> x1172=IKPowWithIntegerCheck((x1166+(new_r01*new_r01)),-1);
if(!x1172.valid){
continue;
}
IkReal x1168=x1172.value;
IkReal x1169=(new_r01*x1168);
IkReal x1170=(x1167*x1168);
IkReal x1171=((1.0)*x1166*x1168);
j5eval[0]=((IKabs((((new_r10*x1170))+((new_r10*x1166*x1169))+(((-1.0)*x1171)))))+(IKabs(((((-1.0)*new_r00*x1170))+(((-1.0)*new_r00*x1166*x1169))+((new_r11*x1169))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r10*new_r10)+(new_r00*new_r00));
evalcond[1]=gconst49;
evalcond[2]=gconst48;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x1176 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1176.valid){
continue;
}
IkReal x1173=((1.0)*(x1176.value));
IkReal x1174=x1143;
IkReal x1175=((1.0)*x1174);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst48;
cj7=gconst49;
j7=((3.14159265)+(((-1.0)*x1173)));
new_r10=0;
new_r00=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1173)));
IkReal gconst48=(new_r11*x1175);
IkReal gconst49=(new_r01*x1175);
j5eval[0]=1.0;
j5eval[1]=new_r01;
j5eval[2]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x1180 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1180.valid){
continue;
}
IkReal x1177=((1.0)*(x1180.value));
IkReal x1178=x1143;
IkReal x1179=((1.0)*x1178);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst48;
cj7=gconst49;
j7=((3.14159265)+(((-1.0)*x1177)));
new_r10=0;
new_r00=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1177)));
IkReal gconst48=(new_r11*x1179);
IkReal gconst49=(new_r01*x1179);
j5eval[0]=1.0;
j5eval[1]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x1184 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1184.valid){
continue;
}
IkReal x1181=((1.0)*(x1184.value));
IkReal x1182=x1143;
IkReal x1183=((1.0)*x1182);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst48;
cj7=gconst49;
j7=((3.14159265)+(((-1.0)*x1181)));
new_r10=0;
new_r00=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1181)));
IkReal gconst48=(new_r11*x1183);
IkReal gconst49=(new_r01*x1183);
j5eval[0]=1.0;
j5eval[1]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1185 = IKatan2WithCheck(IkReal((gconst49*new_r11)),IkReal(((-1.0)*gconst48*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1185.valid){
continue;
}
CheckValue<IkReal> x1186=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst49*gconst49)))+(((-1.0)*(gconst48*gconst48))))),-1);
if(!x1186.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1185.value)+(((1.5707963267949)*(x1186.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1187=IKsin(j5);
IkReal x1188=IKcos(j5);
IkReal x1189=((1.0)*gconst48);
IkReal x1190=(gconst48*x1187);
IkReal x1191=(gconst49*x1188);
IkReal x1192=(gconst49*x1187);
IkReal x1193=(x1191+x1190);
evalcond[0]=x1193;
evalcond[1]=(gconst49+((new_r01*x1188))+((new_r11*x1187)));
evalcond[2]=(x1193+new_r01);
evalcond[3]=(((gconst48*x1188))+(((-1.0)*x1192)));
evalcond[4]=(x1192+(((-1.0)*x1188*x1189))+new_r11);
evalcond[5]=((((-1.0)*new_r01*x1187))+(((-1.0)*x1189))+((new_r11*x1188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1194=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst49*gconst49)))+(((-1.0)*(gconst48*gconst48))))),-1);
if(!x1194.valid){
continue;
}
CheckValue<IkReal> x1195 = IKatan2WithCheck(IkReal((gconst48*new_r01)),IkReal((gconst49*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1195.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1194.value)))+(x1195.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1196=IKsin(j5);
IkReal x1197=IKcos(j5);
IkReal x1198=((1.0)*gconst48);
IkReal x1199=(gconst48*x1196);
IkReal x1200=(gconst49*x1197);
IkReal x1201=(gconst49*x1196);
IkReal x1202=(x1199+x1200);
evalcond[0]=x1202;
evalcond[1]=(gconst49+((new_r11*x1196))+((new_r01*x1197)));
evalcond[2]=(x1202+new_r01);
evalcond[3]=((((-1.0)*x1201))+((gconst48*x1197)));
evalcond[4]=(x1201+(((-1.0)*x1197*x1198))+new_r11);
evalcond[5]=((((-1.0)*new_r01*x1196))+(((-1.0)*x1198))+((new_r11*x1197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1203=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst48*new_r11))+(((-1.0)*gconst49*new_r01)))),-1);
if(!x1203.valid){
continue;
}
CheckValue<IkReal> x1204 = IKatan2WithCheck(IkReal((gconst48*gconst49)),IkReal(gconst49*gconst49),IKFAST_ATAN2_MAGTHRESH);
if(!x1204.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1203.value)))+(x1204.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1205=IKsin(j5);
IkReal x1206=IKcos(j5);
IkReal x1207=((1.0)*gconst48);
IkReal x1208=(gconst48*x1205);
IkReal x1209=(gconst49*x1206);
IkReal x1210=(gconst49*x1205);
IkReal x1211=(x1209+x1208);
evalcond[0]=x1211;
evalcond[1]=(((new_r11*x1205))+((new_r01*x1206))+gconst49);
evalcond[2]=(x1211+new_r01);
evalcond[3]=(((gconst48*x1206))+(((-1.0)*x1210)));
evalcond[4]=(x1210+new_r11+(((-1.0)*x1206*x1207)));
evalcond[5]=((((-1.0)*new_r01*x1205))+((new_r11*x1206))+(((-1.0)*x1207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x1213 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1213.valid){
continue;
}
IkReal x1212=((1.0)*(x1213.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst48;
cj7=gconst49;
j7=((3.14159265)+(((-1.0)*x1212)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1212)));
IkReal gconst48=0;
IkReal x1214 = new_r01*new_r01;
if(IKabs(x1214)==0){
continue;
}
IkReal gconst49=((1.0)*new_r01*(pow(x1214,-0.5)));
j5eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x1216 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1216.valid){
continue;
}
IkReal x1215=((1.0)*(x1216.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst48;
cj7=gconst49;
j7=((3.14159265)+(((-1.0)*x1215)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1215)));
IkReal gconst48=0;
IkReal x1217 = new_r01*new_r01;
if(IKabs(x1217)==0){
continue;
}
IkReal gconst49=((1.0)*new_r01*(pow(x1217,-0.5)));
j5eval[0]=new_r00;
j5eval[1]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x1219 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1219.valid){
continue;
}
IkReal x1218=((1.0)*(x1219.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst48;
cj7=gconst49;
j7=((3.14159265)+(((-1.0)*x1218)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1218)));
IkReal gconst48=0;
IkReal x1220 = new_r01*new_r01;
if(IKabs(x1220)==0){
continue;
}
IkReal gconst49=((1.0)*new_r01*(pow(x1220,-0.5)));
j5eval[0]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1221=IKPowWithIntegerCheck(gconst49,-1);
if(!x1221.valid){
continue;
}
CheckValue<IkReal> x1222=IKPowWithIntegerCheck(new_r01,-1);
if(!x1222.valid){
continue;
}
if( IKabs((new_r00*(x1221.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst49*(x1222.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r00*(x1221.value)))+IKsqr(((-1.0)*gconst49*(x1222.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r00*(x1221.value)), ((-1.0)*gconst49*(x1222.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1223=IKcos(j5);
IkReal x1224=IKsin(j5);
IkReal x1225=(gconst49*x1223);
IkReal x1226=(gconst49*x1224);
evalcond[0]=(new_r00*x1223);
evalcond[1]=x1225;
evalcond[2]=x1226;
evalcond[3]=((-1.0)*new_r01*x1224);
evalcond[4]=(gconst49+((new_r01*x1223)));
evalcond[5]=(x1225+new_r01);
evalcond[6]=((((-1.0)*new_r00*x1224))+gconst49);
evalcond[7]=((((-1.0)*x1226))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1227=IKPowWithIntegerCheck(new_r00,-1);
if(!x1227.valid){
continue;
}
CheckValue<IkReal> x1228=IKPowWithIntegerCheck(new_r01,-1);
if(!x1228.valid){
continue;
}
if( IKabs((gconst49*(x1227.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst49*(x1228.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst49*(x1227.value)))+IKsqr(((-1.0)*gconst49*(x1228.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((gconst49*(x1227.value)), ((-1.0)*gconst49*(x1228.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1229=IKcos(j5);
IkReal x1230=IKsin(j5);
IkReal x1231=(gconst49*x1229);
IkReal x1232=(gconst49*x1230);
evalcond[0]=(new_r00*x1229);
evalcond[1]=x1231;
evalcond[2]=x1232;
evalcond[3]=((-1.0)*new_r01*x1230);
evalcond[4]=(gconst49+((new_r01*x1229)));
evalcond[5]=(x1231+new_r01);
evalcond[6]=(gconst49+(((-1.0)*new_r00*x1230)));
evalcond[7]=((((-1.0)*x1232))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1233 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1233.valid){
continue;
}
CheckValue<IkReal> x1234=IKPowWithIntegerCheck(IKsign(gconst49),-1);
if(!x1234.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1233.value)+(((1.5707963267949)*(x1234.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1235=IKcos(j5);
IkReal x1236=IKsin(j5);
IkReal x1237=(gconst49*x1235);
IkReal x1238=(gconst49*x1236);
evalcond[0]=(new_r00*x1235);
evalcond[1]=x1237;
evalcond[2]=x1238;
evalcond[3]=((-1.0)*new_r01*x1236);
evalcond[4]=(gconst49+((new_r01*x1235)));
evalcond[5]=(x1237+new_r01);
evalcond[6]=(gconst49+(((-1.0)*new_r00*x1236)));
evalcond[7]=((((-1.0)*x1238))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x1240 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1240.valid){
continue;
}
IkReal x1239=((1.0)*(x1240.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst48;
cj7=gconst49;
j7=((3.14159265)+(((-1.0)*x1239)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1239)));
IkReal x1241 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1241)==0){
continue;
}
IkReal gconst48=((1.0)*new_r11*(pow(x1241,-0.5)));
IkReal gconst49=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x1243 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1243.valid){
continue;
}
IkReal x1242=((1.0)*(x1243.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst48;
cj7=gconst49;
j7=((3.14159265)+(((-1.0)*x1242)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1242)));
IkReal x1244 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1244)==0){
continue;
}
IkReal gconst48=((1.0)*new_r11*(pow(x1244,-0.5)));
IkReal gconst49=0;
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x1246 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1246.valid){
continue;
}
IkReal x1245=((1.0)*(x1246.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst48;
cj7=gconst49;
j7=((3.14159265)+(((-1.0)*x1245)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1245)));
IkReal x1247 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1247)==0){
continue;
}
IkReal gconst48=((1.0)*new_r11*(pow(x1247,-0.5)));
IkReal gconst49=0;
j5eval[0]=new_r10;
j5eval[1]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1248=IKPowWithIntegerCheck(new_r10,-1);
if(!x1248.valid){
continue;
}
CheckValue<IkReal> x1249=IKPowWithIntegerCheck(new_r11,-1);
if(!x1249.valid){
continue;
}
if( IKabs(((-1.0)*gconst48*(x1248.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst48*(x1249.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst48*(x1248.value)))+IKsqr((gconst48*(x1249.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*gconst48*(x1248.value)), (gconst48*(x1249.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1250=IKsin(j5);
IkReal x1251=IKcos(j5);
IkReal x1252=((1.0)*gconst48);
IkReal x1253=(gconst48*x1250);
evalcond[0]=(new_r10*x1251);
evalcond[1]=(new_r11*x1250);
evalcond[2]=x1253;
evalcond[3]=(gconst48*x1251);
evalcond[4]=(gconst48+((new_r10*x1250)));
evalcond[5]=(x1253+new_r10);
evalcond[6]=((((-1.0)*x1251*x1252))+new_r11);
evalcond[7]=((((-1.0)*x1252))+((new_r11*x1251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1254=IKPowWithIntegerCheck(new_r10,-1);
if(!x1254.valid){
continue;
}
CheckValue<IkReal> x1255=IKPowWithIntegerCheck(gconst48,-1);
if(!x1255.valid){
continue;
}
if( IKabs(((-1.0)*gconst48*(x1254.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x1255.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst48*(x1254.value)))+IKsqr((new_r11*(x1255.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*gconst48*(x1254.value)), (new_r11*(x1255.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1256=IKsin(j5);
IkReal x1257=IKcos(j5);
IkReal x1258=((1.0)*gconst48);
IkReal x1259=(gconst48*x1256);
evalcond[0]=(new_r10*x1257);
evalcond[1]=(new_r11*x1256);
evalcond[2]=x1259;
evalcond[3]=(gconst48*x1257);
evalcond[4]=(gconst48+((new_r10*x1256)));
evalcond[5]=(x1259+new_r10);
evalcond[6]=((((-1.0)*x1257*x1258))+new_r11);
evalcond[7]=((((-1.0)*x1258))+((new_r11*x1257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1260=IKPowWithIntegerCheck(IKsign(gconst48),-1);
if(!x1260.valid){
continue;
}
CheckValue<IkReal> x1261 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1261.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1260.value)))+(x1261.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1262=IKsin(j5);
IkReal x1263=IKcos(j5);
IkReal x1264=((1.0)*gconst48);
IkReal x1265=(gconst48*x1262);
evalcond[0]=(new_r10*x1263);
evalcond[1]=(new_r11*x1262);
evalcond[2]=x1265;
evalcond[3]=(gconst48*x1263);
evalcond[4]=(gconst48+((new_r10*x1262)));
evalcond[5]=(x1265+new_r10);
evalcond[6]=((((-1.0)*x1263*x1264))+new_r11);
evalcond[7]=(((new_r11*x1263))+(((-1.0)*x1264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst49;
evalcond[2]=gconst48;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[4];
CheckValue<IkReal> x1267 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1267.valid){
continue;
}
IkReal x1266=((1.0)*(x1267.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst48;
cj7=gconst49;
j7=((3.14159265)+(((-1.0)*x1266)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1266)));
IkReal gconst48=((1.0)*new_r11);
IkReal gconst49=((1.0)*new_r01);
j5eval[0]=-1.0;
j5eval[1]=-1.0;
j5eval[2]=new_r01;
j5eval[3]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[4];
CheckValue<IkReal> x1269 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1269.valid){
continue;
}
IkReal x1268=((1.0)*(x1269.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst48;
cj7=gconst49;
j7=((3.14159265)+(((-1.0)*x1268)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1268)));
IkReal gconst48=((1.0)*new_r11);
IkReal gconst49=((1.0)*new_r01);
j5eval[0]=-1.0;
j5eval[1]=-1.0;
j5eval[2]=new_r01;
j5eval[3]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x1271 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1271.valid){
continue;
}
IkReal x1270=((1.0)*(x1271.value));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=gconst48;
cj7=gconst49;
j7=((3.14159265)+(((-1.0)*x1270)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1270)));
IkReal gconst48=((1.0)*new_r11);
IkReal gconst49=((1.0)*new_r01);
j5eval[0]=-1.0;
j5eval[1]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
j5eval[2]=-1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1272 = IKatan2WithCheck(IkReal((gconst49*new_r11)),IkReal(((-1.0)*gconst48*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1272.valid){
continue;
}
CheckValue<IkReal> x1273=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst49*gconst49)))+(((-1.0)*(gconst48*gconst48))))),-1);
if(!x1273.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1272.value)+(((1.5707963267949)*(x1273.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1274=IKsin(j5);
IkReal x1275=IKcos(j5);
IkReal x1276=((1.0)*gconst48);
IkReal x1277=(gconst48*x1274);
IkReal x1278=(gconst49*x1275);
IkReal x1279=(gconst49*x1274);
IkReal x1280=(x1278+x1277);
evalcond[0]=x1280;
evalcond[1]=(((new_r01*x1275))+gconst49+((new_r11*x1274)));
evalcond[2]=(x1280+new_r01);
evalcond[3]=(((gconst48*x1275))+(((-1.0)*x1279)));
evalcond[4]=(x1279+(((-1.0)*x1275*x1276))+new_r11);
evalcond[5]=((((-1.0)*x1276))+(((-1.0)*new_r01*x1274))+((new_r11*x1275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1281=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst49*gconst49)))+(((-1.0)*(gconst48*gconst48))))),-1);
if(!x1281.valid){
continue;
}
CheckValue<IkReal> x1282 = IKatan2WithCheck(IkReal((gconst48*new_r01)),IkReal((gconst49*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1282.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1281.value)))+(x1282.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1283=IKsin(j5);
IkReal x1284=IKcos(j5);
IkReal x1285=((1.0)*gconst48);
IkReal x1286=(gconst48*x1283);
IkReal x1287=(gconst49*x1284);
IkReal x1288=(gconst49*x1283);
IkReal x1289=(x1287+x1286);
evalcond[0]=x1289;
evalcond[1]=(((new_r11*x1283))+gconst49+((new_r01*x1284)));
evalcond[2]=(x1289+new_r01);
evalcond[3]=((((-1.0)*x1288))+((gconst48*x1284)));
evalcond[4]=(x1288+(((-1.0)*x1284*x1285))+new_r11);
evalcond[5]=((((-1.0)*new_r01*x1283))+((new_r11*x1284))+(((-1.0)*x1285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1290=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst48*new_r11))+(((-1.0)*gconst49*new_r01)))),-1);
if(!x1290.valid){
continue;
}
CheckValue<IkReal> x1291 = IKatan2WithCheck(IkReal((gconst48*gconst49)),IkReal(gconst49*gconst49),IKFAST_ATAN2_MAGTHRESH);
if(!x1291.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1290.value)))+(x1291.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1292=IKsin(j5);
IkReal x1293=IKcos(j5);
IkReal x1294=((1.0)*gconst48);
IkReal x1295=(gconst48*x1292);
IkReal x1296=(gconst49*x1293);
IkReal x1297=(gconst49*x1292);
IkReal x1298=(x1296+x1295);
evalcond[0]=x1298;
evalcond[1]=(gconst49+((new_r11*x1292))+((new_r01*x1293)));
evalcond[2]=(x1298+new_r01);
evalcond[3]=(((gconst48*x1293))+(((-1.0)*x1297)));
evalcond[4]=(x1297+(((-1.0)*x1293*x1294))+new_r11);
evalcond[5]=((((-1.0)*x1294))+((new_r11*x1293))+(((-1.0)*new_r01*x1292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1299 = IKatan2WithCheck(IkReal((((gconst48*gconst49))+(((-1.0)*new_r00*new_r01)))),IkReal((((new_r01*new_r10))+(((-1.0)*(gconst48*gconst48))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1299.valid){
continue;
}
CheckValue<IkReal> x1300=IKPowWithIntegerCheck(IKsign((((gconst48*new_r00))+(((-1.0)*gconst49*new_r10)))),-1);
if(!x1300.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1299.value)+(((1.5707963267949)*(x1300.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1301=IKsin(j5);
IkReal x1302=IKcos(j5);
IkReal x1303=(gconst48*x1301);
IkReal x1304=(gconst49*x1302);
IkReal x1305=(gconst48*x1302);
IkReal x1306=(gconst49*x1301);
IkReal x1307=((1.0)*x1301);
IkReal x1308=(x1304+x1303);
evalcond[0]=(gconst48+((new_r10*x1301))+((new_r00*x1302)));
evalcond[1]=(gconst49+((new_r11*x1301))+((new_r01*x1302)));
evalcond[2]=(x1308+new_r01);
evalcond[3]=(x1308+new_r10);
evalcond[4]=(gconst49+(((-1.0)*new_r00*x1307))+((new_r10*x1302)));
evalcond[5]=(x1305+(((-1.0)*x1306))+new_r00);
evalcond[6]=(x1306+(((-1.0)*x1305))+new_r11);
evalcond[7]=((((-1.0)*gconst48))+(((-1.0)*new_r01*x1307))+((new_r11*x1302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1309=((1.0)*new_r10);
CheckValue<IkReal> x1310=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x1310.valid){
continue;
}
CheckValue<IkReal> x1311 = IKatan2WithCheck(IkReal((((gconst49*new_r00))+(((-1.0)*gconst48*x1309)))),IkReal(((((-1.0)*gconst48*new_r00))+(((-1.0)*gconst49*x1309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1311.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1310.value)))+(x1311.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1312=IKsin(j5);
IkReal x1313=IKcos(j5);
IkReal x1314=(gconst48*x1312);
IkReal x1315=(gconst49*x1313);
IkReal x1316=(gconst48*x1313);
IkReal x1317=(gconst49*x1312);
IkReal x1318=((1.0)*x1312);
IkReal x1319=(x1315+x1314);
evalcond[0]=(((new_r00*x1313))+gconst48+((new_r10*x1312)));
evalcond[1]=(((new_r01*x1313))+gconst49+((new_r11*x1312)));
evalcond[2]=(x1319+new_r01);
evalcond[3]=(x1319+new_r10);
evalcond[4]=((((-1.0)*new_r00*x1318))+gconst49+((new_r10*x1313)));
evalcond[5]=(x1316+(((-1.0)*x1317))+new_r00);
evalcond[6]=(x1317+(((-1.0)*x1316))+new_r11);
evalcond[7]=((((-1.0)*gconst48))+(((-1.0)*new_r01*x1318))+((new_r11*x1313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1320 = IKatan2WithCheck(IkReal((((gconst48*new_r01))+(((-1.0)*gconst49*new_r00)))),IkReal(((((-1.0)*gconst48*new_r11))+((gconst49*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1320.valid){
continue;
}
CheckValue<IkReal> x1321=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x1321.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1320.value)+(((1.5707963267949)*(x1321.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1322=IKsin(j5);
IkReal x1323=IKcos(j5);
IkReal x1324=(gconst48*x1322);
IkReal x1325=(gconst49*x1323);
IkReal x1326=(gconst48*x1323);
IkReal x1327=(gconst49*x1322);
IkReal x1328=((1.0)*x1322);
IkReal x1329=(x1324+x1325);
evalcond[0]=(((new_r00*x1323))+gconst48+((new_r10*x1322)));
evalcond[1]=(((new_r01*x1323))+gconst49+((new_r11*x1322)));
evalcond[2]=(x1329+new_r01);
evalcond[3]=(x1329+new_r10);
evalcond[4]=(gconst49+(((-1.0)*new_r00*x1328))+((new_r10*x1323)));
evalcond[5]=(x1326+(((-1.0)*x1327))+new_r00);
evalcond[6]=(x1327+(((-1.0)*x1326))+new_r11);
evalcond[7]=((((-1.0)*gconst48))+(((-1.0)*new_r01*x1328))+((new_r11*x1323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1331 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1331.valid){
continue;
}
IkReal x1330=x1331.value;
j5array[0]=((-1.0)*x1330);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1330)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j5))))+((new_r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j5eval[0]=new_r00;
j5eval[1]=((IKabs(cj7))+(IKabs(sj7)));
j5eval[2]=IKsign(new_r00);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j5eval[0]=new_r00;
j5eval[1]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j5eval[0]=new_r01;
j5eval[1]=sj7;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, ((-1.0)*new_r01));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1332=IKcos(j5);
IkReal x1333=IKsin(j5);
IkReal x1334=((1.0)*x1333);
evalcond[0]=x1332;
evalcond[1]=x1333;
evalcond[2]=(new_r00*x1332);
evalcond[3]=(x1332+new_r01);
evalcond[4]=((-1.0)*new_r01*x1333);
evalcond[5]=((1.0)+((new_r01*x1332)));
evalcond[6]=(new_r00+(((-1.0)*x1334)));
evalcond[7]=((1.0)+(((-1.0)*new_r00*x1334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r00), new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1335=IKcos(j5);
IkReal x1336=IKsin(j5);
IkReal x1337=((-1.0)*x1336);
evalcond[0]=(new_r00*x1335);
evalcond[1]=((-1.0)*x1335);
evalcond[2]=(x1336+new_r00);
evalcond[3]=x1337;
evalcond[4]=(new_r01*x1337);
evalcond[5]=((-1.0)+((new_r01*x1335)));
evalcond[6]=((((-1.0)*x1335))+new_r01);
evalcond[7]=((-1.0)+(((-1.0)*new_r00*x1336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1339=IKPowWithIntegerCheck(new_r01,-1);
if(!x1339.valid){
continue;
}
IkReal x1338=x1339.value;
CheckValue<IkReal> x1340=IKPowWithIntegerCheck(sj7,-1);
if(!x1340.valid){
continue;
}
if( IKabs((x1338*(cj7*cj7)*(x1340.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj7*x1338)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1338*(cj7*cj7)*(x1340.value)))+IKsqr(((-1.0)*cj7*x1338))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x1338*(cj7*cj7)*(x1340.value)), ((-1.0)*cj7*x1338));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1341=IKcos(j5);
IkReal x1342=IKsin(j5);
IkReal x1343=((1.0)*sj7);
IkReal x1344=(cj7*x1341);
IkReal x1345=(sj7*x1342);
IkReal x1346=((1.0)*x1342);
IkReal x1347=(x1344+x1345);
evalcond[0]=(sj7+((new_r00*x1341)));
evalcond[1]=(cj7+((new_r01*x1341)));
evalcond[2]=(cj7+(((-1.0)*new_r00*x1346)));
evalcond[3]=((((-1.0)*x1343))+(((-1.0)*new_r01*x1346)));
evalcond[4]=x1347;
evalcond[5]=(x1347+new_r01);
evalcond[6]=((((-1.0)*x1341*x1343))+((cj7*x1342)));
evalcond[7]=(((sj7*x1341))+(((-1.0)*cj7*x1346))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1348=IKPowWithIntegerCheck(new_r00,-1);
if(!x1348.valid){
continue;
}
CheckValue<IkReal> x1349=IKPowWithIntegerCheck(new_r01,-1);
if(!x1349.valid){
continue;
}
if( IKabs((cj7*(x1348.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj7*(x1349.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*(x1348.value)))+IKsqr(((-1.0)*cj7*(x1349.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj7*(x1348.value)), ((-1.0)*cj7*(x1349.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1350=IKcos(j5);
IkReal x1351=IKsin(j5);
IkReal x1352=((1.0)*sj7);
IkReal x1353=(cj7*x1350);
IkReal x1354=(sj7*x1351);
IkReal x1355=((1.0)*x1351);
IkReal x1356=(x1353+x1354);
evalcond[0]=(sj7+((new_r00*x1350)));
evalcond[1]=(cj7+((new_r01*x1350)));
evalcond[2]=(cj7+(((-1.0)*new_r00*x1355)));
evalcond[3]=((((-1.0)*x1352))+(((-1.0)*new_r01*x1355)));
evalcond[4]=x1356;
evalcond[5]=(x1356+new_r01);
evalcond[6]=((((-1.0)*x1350*x1352))+((cj7*x1351)));
evalcond[7]=((((-1.0)*cj7*x1355))+new_r00+((sj7*x1350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1357 = IKatan2WithCheck(IkReal(cj7),IkReal(((-1.0)*sj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x1357.valid){
continue;
}
CheckValue<IkReal> x1358=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x1358.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1357.value)+(((1.5707963267949)*(x1358.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1359=IKcos(j5);
IkReal x1360=IKsin(j5);
IkReal x1361=((1.0)*sj7);
IkReal x1362=(cj7*x1359);
IkReal x1363=(sj7*x1360);
IkReal x1364=((1.0)*x1360);
IkReal x1365=(x1362+x1363);
evalcond[0]=(sj7+((new_r00*x1359)));
evalcond[1]=(cj7+((new_r01*x1359)));
evalcond[2]=((((-1.0)*new_r00*x1364))+cj7);
evalcond[3]=((((-1.0)*new_r01*x1364))+(((-1.0)*x1361)));
evalcond[4]=x1365;
evalcond[5]=(x1365+new_r01);
evalcond[6]=((((-1.0)*x1359*x1361))+((cj7*x1360)));
evalcond[7]=(new_r00+((sj7*x1359))+(((-1.0)*cj7*x1364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j5eval[0]=new_r10;
j5eval[1]=((IKabs(cj7))+(IKabs(sj7)));
j5eval[2]=IKsign(new_r10);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j5eval[0]=new_r10;
j5eval[1]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j5eval[0]=new_r10;
j5eval[1]=sj7;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r10));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1366=IKcos(j5);
IkReal x1367=IKsin(j5);
evalcond[0]=x1366;
evalcond[1]=(new_r11*x1366);
evalcond[2]=(new_r10*x1367);
evalcond[3]=(x1366+new_r10);
evalcond[4]=((-1.0)*x1367);
evalcond[5]=(x1367+new_r11);
evalcond[6]=((1.0)+((new_r10*x1366)));
evalcond[7]=((1.0)+((new_r11*x1367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r11, new_r10);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1368=IKsin(j5);
IkReal x1369=IKcos(j5);
evalcond[0]=x1368;
evalcond[1]=(new_r11*x1369);
evalcond[2]=(new_r10*x1368);
evalcond[3]=((-1.0)*x1369);
evalcond[4]=((-1.0)+((new_r10*x1369)));
evalcond[5]=((-1.0)+((new_r11*x1368)));
evalcond[6]=((((-1.0)*x1369))+new_r10);
evalcond[7]=((((-1.0)*x1368))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1371=IKPowWithIntegerCheck(new_r10,-1);
if(!x1371.valid){
continue;
}
IkReal x1370=x1371.value;
CheckValue<IkReal> x1372=IKPowWithIntegerCheck(sj7,-1);
if(!x1372.valid){
continue;
}
if( IKabs((x1370*(cj7*cj7)*(x1372.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj7*x1370)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1370*(cj7*cj7)*(x1372.value)))+IKsqr(((-1.0)*cj7*x1370))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x1370*(cj7*cj7)*(x1372.value)), ((-1.0)*cj7*x1370));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1373=IKsin(j5);
IkReal x1374=IKcos(j5);
IkReal x1375=((1.0)*sj7);
IkReal x1376=(cj7*x1374);
IkReal x1377=(sj7*x1373);
IkReal x1378=(cj7*x1373);
IkReal x1379=(x1377+x1376);
evalcond[0]=(cj7+((new_r10*x1374)));
evalcond[1]=(sj7+((new_r10*x1373)));
evalcond[2]=(cj7+((new_r11*x1373)));
evalcond[3]=((((-1.0)*x1375))+((new_r11*x1374)));
evalcond[4]=x1379;
evalcond[5]=(x1379+new_r10);
evalcond[6]=((((-1.0)*x1378))+((sj7*x1374)));
evalcond[7]=(x1378+(((-1.0)*x1374*x1375))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1380=IKPowWithIntegerCheck(new_r10,-1);
if(!x1380.valid){
continue;
}
CheckValue<IkReal> x1381=IKPowWithIntegerCheck(new_r11,-1);
if(!x1381.valid){
continue;
}
if( IKabs(((-1.0)*sj7*(x1380.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj7*(x1381.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj7*(x1380.value)))+IKsqr((sj7*(x1381.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*sj7*(x1380.value)), (sj7*(x1381.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1382=IKsin(j5);
IkReal x1383=IKcos(j5);
IkReal x1384=((1.0)*sj7);
IkReal x1385=(cj7*x1383);
IkReal x1386=(sj7*x1382);
IkReal x1387=(cj7*x1382);
IkReal x1388=(x1385+x1386);
evalcond[0]=(((new_r10*x1383))+cj7);
evalcond[1]=(((new_r10*x1382))+sj7);
evalcond[2]=(((new_r11*x1382))+cj7);
evalcond[3]=((((-1.0)*x1384))+((new_r11*x1383)));
evalcond[4]=x1388;
evalcond[5]=(x1388+new_r10);
evalcond[6]=(((sj7*x1383))+(((-1.0)*x1387)));
evalcond[7]=(x1387+(((-1.0)*x1383*x1384))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1389 = IKatan2WithCheck(IkReal(((-1.0)*sj7)),IkReal(((-1.0)*cj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x1389.valid){
continue;
}
CheckValue<IkReal> x1390=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x1390.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1389.value)+(((1.5707963267949)*(x1390.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1391=IKsin(j5);
IkReal x1392=IKcos(j5);
IkReal x1393=((1.0)*sj7);
IkReal x1394=(cj7*x1392);
IkReal x1395=(sj7*x1391);
IkReal x1396=(cj7*x1391);
IkReal x1397=(x1395+x1394);
evalcond[0]=(cj7+((new_r10*x1392)));
evalcond[1]=(sj7+((new_r10*x1391)));
evalcond[2]=(((new_r11*x1391))+cj7);
evalcond[3]=(((new_r11*x1392))+(((-1.0)*x1393)));
evalcond[4]=x1397;
evalcond[5]=(x1397+new_r10);
evalcond[6]=(((sj7*x1392))+(((-1.0)*x1396)));
evalcond[7]=(x1396+(((-1.0)*x1392*x1393))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1399 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1399.valid){
continue;
}
IkReal x1398=x1399.value;
j5array[0]=((-1.0)*x1398);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1398)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j5))))+(((-1.0)*new_r01*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1400=((1.0)*sj7);
CheckValue<IkReal> x1401 = IKatan2WithCheck(IkReal(((((-1.0)*cj7*x1400))+((new_r00*new_r01)))),IkReal(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*new_r01*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1401.valid){
continue;
}
CheckValue<IkReal> x1402=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*x1400))+((cj7*new_r10)))),-1);
if(!x1402.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1401.value)+(((1.5707963267949)*(x1402.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1403=IKsin(j5);
IkReal x1404=IKcos(j5);
IkReal x1405=(cj7*x1404);
IkReal x1406=(sj7*x1403);
IkReal x1407=(sj7*x1404);
IkReal x1408=((1.0)*x1403);
IkReal x1409=(x1406+x1405);
evalcond[0]=(sj7+((new_r10*x1403))+((new_r00*x1404)));
evalcond[1]=(cj7+((new_r01*x1404))+((new_r11*x1403)));
evalcond[2]=(x1409+new_r01);
evalcond[3]=(x1409+new_r10);
evalcond[4]=(cj7+((new_r10*x1404))+(((-1.0)*new_r00*x1408)));
evalcond[5]=((((-1.0)*cj7*x1408))+x1407+new_r00);
evalcond[6]=((((-1.0)*x1407))+((cj7*x1403))+new_r11);
evalcond[7]=((((-1.0)*sj7))+((new_r11*x1404))+(((-1.0)*new_r01*x1408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1410=((1.0)*new_r01);
CheckValue<IkReal> x1411=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj7*x1410))+((cj7*new_r11)))),-1);
if(!x1411.valid){
continue;
}
CheckValue<IkReal> x1412 = IKatan2WithCheck(IkReal(((((-1.0)*(cj7*cj7)))+(new_r01*new_r01))),IkReal(((((-1.0)*new_r11*x1410))+((cj7*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1412.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1411.value)))+(x1412.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1413=IKsin(j5);
IkReal x1414=IKcos(j5);
IkReal x1415=(cj7*x1414);
IkReal x1416=(sj7*x1413);
IkReal x1417=(sj7*x1414);
IkReal x1418=((1.0)*x1413);
IkReal x1419=(x1415+x1416);
evalcond[0]=(sj7+((new_r00*x1414))+((new_r10*x1413)));
evalcond[1]=(cj7+((new_r01*x1414))+((new_r11*x1413)));
evalcond[2]=(x1419+new_r01);
evalcond[3]=(x1419+new_r10);
evalcond[4]=(cj7+(((-1.0)*new_r00*x1418))+((new_r10*x1414)));
evalcond[5]=((((-1.0)*cj7*x1418))+x1417+new_r00);
evalcond[6]=(((cj7*x1413))+new_r11+(((-1.0)*x1417)));
evalcond[7]=((((-1.0)*sj7))+(((-1.0)*new_r01*x1418))+((new_r11*x1414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1420 = IKatan2WithCheck(IkReal((((new_r01*sj7))+(((-1.0)*cj7*new_r00)))),IkReal(((((-1.0)*new_r11*sj7))+((cj7*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1420.valid){
continue;
}
CheckValue<IkReal> x1421=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x1421.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1420.value)+(((1.5707963267949)*(x1421.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1422=IKsin(j5);
IkReal x1423=IKcos(j5);
IkReal x1424=(cj7*x1423);
IkReal x1425=(sj7*x1422);
IkReal x1426=(sj7*x1423);
IkReal x1427=((1.0)*x1422);
IkReal x1428=(x1425+x1424);
evalcond[0]=(sj7+((new_r00*x1423))+((new_r10*x1422)));
evalcond[1]=(cj7+((new_r11*x1422))+((new_r01*x1423)));
evalcond[2]=(x1428+new_r01);
evalcond[3]=(x1428+new_r10);
evalcond[4]=(cj7+(((-1.0)*new_r00*x1427))+((new_r10*x1423)));
evalcond[5]=((((-1.0)*cj7*x1427))+x1426+new_r00);
evalcond[6]=(((cj7*x1422))+(((-1.0)*x1426))+new_r11);
evalcond[7]=((((-1.0)*new_r01*x1427))+(((-1.0)*sj7))+((new_r11*x1423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1430 = IKatan2WithCheck(IkReal((new_r00*new_r22)),IkReal((new_r10*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1430.valid){
continue;
}
IkReal x1429=x1430.value;
j5array[0]=((-1.0)*x1429);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1429)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1431=IKsin(j5);
IkReal x1432=IKcos(j5);
IkReal x1433=(new_r11*x1431);
IkReal x1434=((1.0)*x1431);
IkReal x1435=(new_r01*x1432);
evalcond[0]=(((new_r00*x1432))+((new_r10*x1431)));
evalcond[1]=(x1435+x1433);
evalcond[2]=(((new_r10*x1432))+(((-1.0)*new_r00*x1434)));
evalcond[3]=(((new_r11*x1432))+(((-1.0)*new_r01*x1434)));
evalcond[4]=(((new_r22*x1433))+((new_r22*x1435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1437 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1437.valid){
continue;
}
IkReal x1436=x1437.value;
j5array[0]=((-1.0)*x1436);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1436)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1438=IKcos(j5);
IkReal x1439=IKsin(j5);
IkReal x1440=(new_r00*x1438);
IkReal x1441=(new_r10*x1439);
IkReal x1442=((1.0)*x1439);
evalcond[0]=(x1441+x1440);
evalcond[1]=((((-1.0)*new_r00*x1442))+((new_r10*x1438)));
evalcond[2]=(((new_r11*x1438))+(((-1.0)*new_r01*x1442)));
evalcond[3]=(((new_r22*x1440))+((new_r22*x1441)));
evalcond[4]=(((new_r11*new_r22*x1439))+((new_r01*new_r22*x1438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1444 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1444.valid){
continue;
}
IkReal x1443=x1444.value;
j5array[0]=((-1.0)*x1443);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1443)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1445=IKcos(j5);
IkReal x1446=IKsin(j5);
IkReal x1447=(new_r22*x1445);
IkReal x1448=(new_r11*x1446);
IkReal x1449=((1.0)*x1446);
evalcond[0]=(((new_r01*x1445))+x1448);
evalcond[1]=((((-1.0)*new_r00*x1449))+((new_r10*x1445)));
evalcond[2]=(((new_r11*x1445))+(((-1.0)*new_r01*x1449)));
evalcond[3]=(((new_r10*new_r22*x1446))+((new_r00*x1447)));
evalcond[4]=(((new_r22*x1448))+((new_r01*x1447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1451=IKPowWithIntegerCheck(sj6,-1);
if(!x1451.valid){
continue;
}
IkReal x1450=x1451.value;
CheckValue<IkReal> x1452=IKPowWithIntegerCheck(new_r00,-1);
if(!x1452.valid){
continue;
}
if( IKabs((x1450*(x1452.value)*((((new_r02*new_r10))+((cj7*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x1450)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1450*(x1452.value)*((((new_r02*new_r10))+((cj7*sj6))))))+IKsqr((new_r02*x1450))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x1450*(x1452.value)*((((new_r02*new_r10))+((cj7*sj6))))), (new_r02*x1450));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x1453=IKcos(j5);
IkReal x1454=IKsin(j5);
IkReal x1455=((1.0)*sj7);
IkReal x1456=(cj6*cj7);
IkReal x1457=(cj6*sj7);
IkReal x1458=((1.0)*sj6);
IkReal x1459=((1.0)*cj6);
IkReal x1460=((1.0)*x1453);
IkReal x1461=(new_r02*x1453);
IkReal x1462=(new_r10*x1454);
IkReal x1463=((1.0)*x1454);
IkReal x1464=(new_r01*x1453);
IkReal x1465=(new_r00*x1453);
IkReal x1466=(cj6*x1454);
evalcond[0]=((((-1.0)*x1453*x1458))+new_r02);
evalcond[1]=((((-1.0)*x1454*x1458))+new_r12);
evalcond[2]=(((new_r12*x1453))+(((-1.0)*new_r02*x1463)));
evalcond[3]=(cj7+(((-1.0)*new_r00*x1463))+((new_r10*x1453)));
evalcond[4]=((((-1.0)*x1458))+((new_r12*x1454))+x1461);
evalcond[5]=(((sj7*x1454))+(((-1.0)*x1456*x1460))+new_r01);
evalcond[6]=(((cj7*x1453))+(((-1.0)*x1455*x1466))+new_r10);
evalcond[7]=((((-1.0)*x1455))+(((-1.0)*new_r01*x1463))+((new_r11*x1453)));
evalcond[8]=((((-1.0)*cj6*x1455))+x1465+x1462);
evalcond[9]=((((-1.0)*x1456))+((new_r11*x1454))+x1464);
evalcond[10]=((((-1.0)*cj7*x1463))+new_r00+(((-1.0)*cj6*x1453*x1455)));
evalcond[11]=((((-1.0)*x1456*x1463))+(((-1.0)*x1453*x1455))+new_r11);
evalcond[12]=(((cj6*x1461))+(((-1.0)*new_r22*x1458))+((new_r12*x1466)));
evalcond[13]=((((-1.0)*new_r20*x1459))+(((-1.0)*x1458*x1462))+(((-1.0)*x1458*x1465)));
evalcond[14]=((((-1.0)*new_r21*x1459))+(((-1.0)*x1458*x1464))+(((-1.0)*new_r11*x1454*x1458)));
evalcond[15]=((1.0)+(((-1.0)*x1458*x1461))+(((-1.0)*new_r12*x1454*x1458))+(((-1.0)*new_r22*x1459)));
evalcond[16]=((((-1.0)*new_r20*x1458))+((cj6*x1465))+((cj6*x1462))+(((-1.0)*x1455)));
evalcond[17]=(((cj6*x1464))+(((-1.0)*new_r21*x1458))+((new_r11*x1466))+(((-1.0)*cj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1467=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x1467.valid){
continue;
}
CheckValue<IkReal> x1468 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1468.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1467.value)))+(x1468.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x1469=IKcos(j5);
IkReal x1470=IKsin(j5);
IkReal x1471=((1.0)*sj7);
IkReal x1472=(cj6*cj7);
IkReal x1473=(cj6*sj7);
IkReal x1474=((1.0)*sj6);
IkReal x1475=((1.0)*cj6);
IkReal x1476=((1.0)*x1469);
IkReal x1477=(new_r02*x1469);
IkReal x1478=(new_r10*x1470);
IkReal x1479=((1.0)*x1470);
IkReal x1480=(new_r01*x1469);
IkReal x1481=(new_r00*x1469);
IkReal x1482=(cj6*x1470);
evalcond[0]=((((-1.0)*x1469*x1474))+new_r02);
evalcond[1]=((((-1.0)*x1470*x1474))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x1479))+((new_r12*x1469)));
evalcond[3]=((((-1.0)*new_r00*x1479))+cj7+((new_r10*x1469)));
evalcond[4]=(((new_r12*x1470))+x1477+(((-1.0)*x1474)));
evalcond[5]=(((sj7*x1470))+new_r01+(((-1.0)*x1472*x1476)));
evalcond[6]=(((cj7*x1469))+new_r10+(((-1.0)*x1471*x1482)));
evalcond[7]=(((new_r11*x1469))+(((-1.0)*x1471))+(((-1.0)*new_r01*x1479)));
evalcond[8]=(x1478+x1481+(((-1.0)*cj6*x1471)));
evalcond[9]=(((new_r11*x1470))+(((-1.0)*x1472))+x1480);
evalcond[10]=((((-1.0)*cj7*x1479))+new_r00+(((-1.0)*cj6*x1469*x1471)));
evalcond[11]=((((-1.0)*x1469*x1471))+new_r11+(((-1.0)*x1472*x1479)));
evalcond[12]=(((cj6*x1477))+((new_r12*x1482))+(((-1.0)*new_r22*x1474)));
evalcond[13]=((((-1.0)*x1474*x1478))+(((-1.0)*new_r20*x1475))+(((-1.0)*x1474*x1481)));
evalcond[14]=((((-1.0)*new_r11*x1470*x1474))+(((-1.0)*new_r21*x1475))+(((-1.0)*x1474*x1480)));
evalcond[15]=((1.0)+(((-1.0)*x1474*x1477))+(((-1.0)*new_r12*x1470*x1474))+(((-1.0)*new_r22*x1475)));
evalcond[16]=(((cj6*x1478))+(((-1.0)*new_r20*x1474))+(((-1.0)*x1471))+((cj6*x1481)));
evalcond[17]=((((-1.0)*new_r21*x1474))+((new_r11*x1482))+(((-1.0)*cj7))+((cj6*x1480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1483=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x1483.valid){
continue;
}
CheckValue<IkReal> x1484 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1484.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1483.value)))+(x1484.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1485=IKcos(j5);
IkReal x1486=IKsin(j5);
IkReal x1487=((1.0)*sj6);
IkReal x1488=((1.0)*cj6);
IkReal x1489=(new_r12*x1486);
IkReal x1490=(new_r02*x1485);
evalcond[0]=((((-1.0)*x1485*x1487))+new_r02);
evalcond[1]=((((-1.0)*x1486*x1487))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x1486))+((new_r12*x1485)));
evalcond[3]=((((-1.0)*x1487))+x1490+x1489);
evalcond[4]=((((-1.0)*new_r22*x1487))+((cj6*x1490))+((cj6*x1489)));
evalcond[5]=((((-1.0)*new_r10*x1486*x1487))+(((-1.0)*new_r00*x1485*x1487))+(((-1.0)*new_r20*x1488)));
evalcond[6]=((((-1.0)*new_r21*x1488))+(((-1.0)*new_r11*x1486*x1487))+(((-1.0)*new_r01*x1485*x1487)));
evalcond[7]=((1.0)+(((-1.0)*x1487*x1489))+(((-1.0)*x1487*x1490))+(((-1.0)*new_r22*x1488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=sj6;
j7eval[1]=((IKabs(new_r20))+(IKabs(new_r21)));
j7eval[2]=IKsign(sj6);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=sj6;
j7eval[1]=cj5;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=sj5;
j7eval[1]=sj6;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1491=IKcos(j7);
IkReal x1492=IKsin(j7);
IkReal x1493=((1.0)*sj6);
IkReal x1494=((1.0)*x1492);
IkReal x1495=((1.0)*x1491);
evalcond[0]=(x1491+new_r10);
evalcond[1]=(((sj6*x1492))+new_r20);
evalcond[2]=(((sj6*x1491))+new_r21);
evalcond[3]=((((-1.0)*x1494))+new_r11);
evalcond[4]=(new_r00+(((-1.0)*cj6*x1494)));
evalcond[5]=(new_r01+(((-1.0)*cj6*x1495)));
evalcond[6]=((((-1.0)*x1494))+(((-1.0)*new_r20*x1493))+((cj6*new_r00)));
evalcond[7]=((((-1.0)*x1495))+(((-1.0)*new_r21*x1493))+((cj6*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1496=IKcos(j7);
IkReal x1497=IKsin(j7);
IkReal x1498=((1.0)*new_r00);
IkReal x1499=((1.0)*new_r01);
IkReal x1500=((1.0)*sj6);
IkReal x1501=((1.0)*x1497);
IkReal x1502=((1.0)*x1496);
evalcond[0]=(((sj6*x1497))+new_r20);
evalcond[1]=(((sj6*x1496))+new_r21);
evalcond[2]=(x1496+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x1501))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x1498))+(((-1.0)*cj6*x1501)));
evalcond[5]=((((-1.0)*x1499))+(((-1.0)*cj6*x1502)));
evalcond[6]=((((-1.0)*x1501))+(((-1.0)*new_r20*x1500))+(((-1.0)*cj6*x1498)));
evalcond[7]=((((-1.0)*x1502))+(((-1.0)*new_r21*x1500))+(((-1.0)*cj6*x1499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((((-1.0)*new_r01*sj5))+((cj5*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*new_r01))+((new_r00*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*sj5))+((cj5*new_r00))))+IKsqr((((cj5*new_r01))+((new_r00*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r01*sj5))+((cj5*new_r00))), (((cj5*new_r01))+((new_r00*sj5))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1503=IKcos(j7);
IkReal x1504=IKsin(j7);
IkReal x1505=((1.0)*sj5);
IkReal x1506=((1.0)*x1504);
IkReal x1507=(cj5*x1503);
IkReal x1508=(((cj5*x1506))+((x1503*x1505)));
evalcond[0]=(((cj5*new_r10))+x1503+(((-1.0)*new_r00*x1505)));
evalcond[1]=((((-1.0)*x1506))+((new_r10*sj5))+((cj5*new_r00)));
evalcond[2]=((((-1.0)*x1503))+((new_r11*sj5))+((cj5*new_r01)));
evalcond[3]=((((-1.0)*new_r01*x1505))+(((-1.0)*x1506))+((cj5*new_r11)));
evalcond[4]=(((sj5*x1504))+(((-1.0)*x1507))+new_r01);
evalcond[5]=((((-1.0)*x1504*x1505))+x1507+new_r10);
evalcond[6]=((((-1.0)*x1508))+new_r00);
evalcond[7]=((((-1.0)*x1508))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1509=((1.0)*cj5);
if( IKabs(((((-1.0)*new_r01*sj5))+(((-1.0)*new_r00*x1509)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x1509))+((new_r00*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*sj5))+(((-1.0)*new_r00*x1509))))+IKsqr(((((-1.0)*new_r01*x1509))+((new_r00*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r01*sj5))+(((-1.0)*new_r00*x1509))), ((((-1.0)*new_r01*x1509))+((new_r00*sj5))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1510=IKcos(j7);
IkReal x1511=IKsin(j7);
IkReal x1512=((1.0)*sj5);
IkReal x1513=(cj5*x1510);
IkReal x1514=(sj5*x1511);
IkReal x1515=(cj5*x1511);
IkReal x1516=(x1514+x1513);
evalcond[0]=(((new_r10*sj5))+((cj5*new_r00))+x1511);
evalcond[1]=(((new_r11*sj5))+((cj5*new_r01))+x1510);
evalcond[2]=(((cj5*new_r10))+x1510+(((-1.0)*new_r00*x1512)));
evalcond[3]=(x1516+new_r01);
evalcond[4]=(x1516+new_r10);
evalcond[5]=((((-1.0)*x1511))+((cj5*new_r11))+(((-1.0)*new_r01*x1512)));
evalcond[6]=((((-1.0)*x1510*x1512))+x1515+new_r00);
evalcond[7]=(((sj5*x1510))+(((-1.0)*x1515))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j7eval[0]=sj6;
j7eval[1]=((IKabs(new_r20))+(IKabs(new_r21)));
j7eval[2]=IKsign(sj6);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j7eval[0]=sj6;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j7eval[0]=sj6;
j7eval[1]=cj6;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r10, new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1517=IKcos(j7);
IkReal x1518=((1.0)*(IKsin(j7)));
evalcond[0]=(x1517+(((-1.0)*new_r00)));
evalcond[1]=((((-1.0)*x1518))+new_r10);
evalcond[2]=((((-1.0)*x1517))+new_r11);
evalcond[3]=((((-1.0)*x1518))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r21;
evalcond[3]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r10), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1519=IKcos(j7);
IkReal x1520=IKsin(j7);
evalcond[0]=(x1520+new_r10);
evalcond[1]=(x1519+new_r11);
evalcond[2]=(x1519+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x1520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r10;
evalcond[3]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1521=IKcos(j7);
IkReal x1522=IKsin(j7);
evalcond[0]=(x1522+new_r20);
evalcond[1]=(x1521+new_r21);
evalcond[2]=(x1521+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x1522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r10;
evalcond[3]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r20, new_r21);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1523=IKcos(j7);
IkReal x1524=((1.0)*(IKsin(j7)));
evalcond[0]=((((-1.0)*x1524))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x1523)));
evalcond[2]=(x1523+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x1524))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1525=IKsin(j7);
IkReal x1526=IKcos(j7);
IkReal x1527=((-1.0)*x1525);
IkReal x1528=((-1.0)*x1526);
evalcond[0]=x1527;
evalcond[1]=x1528;
evalcond[2]=(new_r22*x1527);
evalcond[3]=(new_r22*x1528);
evalcond[4]=(x1526+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x1525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1529=IKPowWithIntegerCheck(sj6,-1);
if(!x1529.valid){
continue;
}
CheckValue<IkReal> x1530=IKPowWithIntegerCheck(cj6,-1);
if(!x1530.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x1529.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x1530.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x1529.value)))+IKsqr((new_r11*(x1530.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20*(x1529.value)), (new_r11*(x1530.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1531=IKcos(j7);
IkReal x1532=IKsin(j7);
IkReal x1533=((1.0)*sj6);
IkReal x1534=((1.0)*x1532);
IkReal x1535=((1.0)*x1531);
evalcond[0]=(((sj6*x1532))+new_r20);
evalcond[1]=(((sj6*x1531))+new_r21);
evalcond[2]=(x1531+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*cj6*x1534))+new_r10);
evalcond[4]=((((-1.0)*cj6*x1535))+new_r11);
evalcond[5]=((((-1.0)*x1534))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*x1534))+(((-1.0)*new_r20*x1533))+((cj6*new_r10)));
evalcond[7]=((((-1.0)*new_r21*x1533))+(((-1.0)*x1535))+((cj6*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1536=IKPowWithIntegerCheck(sj6,-1);
if(!x1536.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x1536.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x1536.value)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20*(x1536.value)), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1537=IKcos(j7);
IkReal x1538=IKsin(j7);
IkReal x1539=((1.0)*sj6);
IkReal x1540=((1.0)*x1538);
IkReal x1541=((1.0)*x1537);
evalcond[0]=(((sj6*x1538))+new_r20);
evalcond[1]=(((sj6*x1537))+new_r21);
evalcond[2]=(x1537+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*cj6*x1540))+new_r10);
evalcond[4]=((((-1.0)*cj6*x1541))+new_r11);
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x1540)));
evalcond[6]=((((-1.0)*new_r20*x1539))+((cj6*new_r10))+(((-1.0)*x1540)));
evalcond[7]=((((-1.0)*new_r21*x1539))+((cj6*new_r11))+(((-1.0)*x1541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1542=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x1542.valid){
continue;
}
CheckValue<IkReal> x1543 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1543.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1542.value)))+(x1543.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1544=IKcos(j7);
IkReal x1545=IKsin(j7);
IkReal x1546=((1.0)*sj6);
IkReal x1547=((1.0)*x1545);
IkReal x1548=((1.0)*x1544);
evalcond[0]=(new_r20+((sj6*x1545)));
evalcond[1]=(new_r21+((sj6*x1544)));
evalcond[2]=(x1544+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*cj6*x1547))+new_r10);
evalcond[4]=((((-1.0)*cj6*x1548))+new_r11);
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x1547)));
evalcond[6]=(((cj6*new_r10))+(((-1.0)*x1547))+(((-1.0)*new_r20*x1546)));
evalcond[7]=(((cj6*new_r11))+(((-1.0)*new_r21*x1546))+(((-1.0)*x1548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1549=IKcos(j7);
IkReal x1550=IKsin(j7);
IkReal x1551=((1.0)*new_r11);
IkReal x1552=((1.0)*new_r10);
IkReal x1553=((1.0)*sj6);
IkReal x1554=((1.0)*x1550);
IkReal x1555=((1.0)*x1549);
evalcond[0]=(x1549+new_r00);
evalcond[1]=(new_r20+((sj6*x1550)));
evalcond[2]=(new_r21+((sj6*x1549)));
evalcond[3]=((((-1.0)*x1554))+new_r01);
evalcond[4]=((((-1.0)*x1552))+(((-1.0)*cj6*x1554)));
evalcond[5]=((((-1.0)*x1551))+(((-1.0)*cj6*x1555)));
evalcond[6]=((((-1.0)*new_r20*x1553))+(((-1.0)*x1554))+(((-1.0)*cj6*x1552)));
evalcond[7]=((((-1.0)*new_r21*x1553))+(((-1.0)*x1555))+(((-1.0)*cj6*x1551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1557=IKPowWithIntegerCheck(sj6,-1);
if(!x1557.valid){
continue;
}
IkReal x1556=x1557.value;
CheckValue<IkReal> x1558=IKPowWithIntegerCheck(sj5,-1);
if(!x1558.valid){
continue;
}
if( IKabs((x1556*(x1558.value)*(((((-1.0)*new_r01*sj6))+(((-1.0)*cj5*cj6*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x1556)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1556*(x1558.value)*(((((-1.0)*new_r01*sj6))+(((-1.0)*cj5*cj6*new_r21))))))+IKsqr(((-1.0)*new_r21*x1556))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x1556*(x1558.value)*(((((-1.0)*new_r01*sj6))+(((-1.0)*cj5*cj6*new_r21))))), ((-1.0)*new_r21*x1556));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x1559=IKcos(j7);
IkReal x1560=IKsin(j7);
IkReal x1561=(new_r10*sj5);
IkReal x1562=((1.0)*sj5);
IkReal x1563=(cj5*new_r01);
IkReal x1564=(cj5*cj6);
IkReal x1565=(new_r11*sj5);
IkReal x1566=((1.0)*sj6);
IkReal x1567=((1.0)*cj6);
IkReal x1568=((1.0)*x1560);
IkReal x1569=(cj5*x1559);
evalcond[0]=(((sj6*x1560))+new_r20);
evalcond[1]=(new_r21+((sj6*x1559)));
evalcond[2]=(((cj5*new_r10))+x1559+(((-1.0)*new_r00*x1562)));
evalcond[3]=(((cj5*new_r11))+(((-1.0)*x1568))+(((-1.0)*new_r01*x1562)));
evalcond[4]=(((cj5*new_r00))+(((-1.0)*x1560*x1567))+x1561);
evalcond[5]=((((-1.0)*x1559*x1567))+x1563+x1565);
evalcond[6]=(new_r01+((sj5*x1560))+(((-1.0)*x1559*x1564)));
evalcond[7]=((((-1.0)*cj6*x1560*x1562))+x1569+new_r10);
evalcond[8]=((((-1.0)*x1559*x1562))+(((-1.0)*x1564*x1568))+new_r00);
evalcond[9]=((((-1.0)*cj5*x1568))+new_r11+(((-1.0)*cj6*x1559*x1562)));
evalcond[10]=(((new_r00*x1564))+((cj6*x1561))+(((-1.0)*x1568))+(((-1.0)*new_r20*x1566)));
evalcond[11]=((((-1.0)*x1559))+((cj6*x1563))+((cj6*x1565))+(((-1.0)*new_r21*x1566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1571=IKPowWithIntegerCheck(sj6,-1);
if(!x1571.valid){
continue;
}
IkReal x1570=x1571.value;
CheckValue<IkReal> x1572=IKPowWithIntegerCheck(cj5,-1);
if(!x1572.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x1570)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1570*(x1572.value)*(((((-1.0)*new_r10*sj6))+(((-1.0)*cj6*new_r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x1570))+IKsqr((x1570*(x1572.value)*(((((-1.0)*new_r10*sj6))+(((-1.0)*cj6*new_r20*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20*x1570), (x1570*(x1572.value)*(((((-1.0)*new_r10*sj6))+(((-1.0)*cj6*new_r20*sj5))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x1573=IKcos(j7);
IkReal x1574=IKsin(j7);
IkReal x1575=(new_r10*sj5);
IkReal x1576=((1.0)*sj5);
IkReal x1577=(cj5*new_r01);
IkReal x1578=(cj5*cj6);
IkReal x1579=(new_r11*sj5);
IkReal x1580=((1.0)*sj6);
IkReal x1581=((1.0)*cj6);
IkReal x1582=((1.0)*x1574);
IkReal x1583=(cj5*x1573);
evalcond[0]=(new_r20+((sj6*x1574)));
evalcond[1]=(new_r21+((sj6*x1573)));
evalcond[2]=((((-1.0)*new_r00*x1576))+((cj5*new_r10))+x1573);
evalcond[3]=((((-1.0)*x1582))+((cj5*new_r11))+(((-1.0)*new_r01*x1576)));
evalcond[4]=(((cj5*new_r00))+x1575+(((-1.0)*x1574*x1581)));
evalcond[5]=((((-1.0)*x1573*x1581))+x1579+x1577);
evalcond[6]=((((-1.0)*x1573*x1578))+((sj5*x1574))+new_r01);
evalcond[7]=((((-1.0)*cj6*x1574*x1576))+x1583+new_r10);
evalcond[8]=((((-1.0)*x1578*x1582))+(((-1.0)*x1573*x1576))+new_r00);
evalcond[9]=((((-1.0)*cj5*x1582))+new_r11+(((-1.0)*cj6*x1573*x1576)));
evalcond[10]=((((-1.0)*x1582))+((new_r00*x1578))+(((-1.0)*new_r20*x1580))+((cj6*x1575)));
evalcond[11]=((((-1.0)*new_r21*x1580))+((cj6*x1577))+((cj6*x1579))+(((-1.0)*x1573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1584=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x1584.valid){
continue;
}
CheckValue<IkReal> x1585 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1585.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1584.value)))+(x1585.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x1586=IKcos(j7);
IkReal x1587=IKsin(j7);
IkReal x1588=(new_r10*sj5);
IkReal x1589=((1.0)*sj5);
IkReal x1590=(cj5*new_r01);
IkReal x1591=(cj5*cj6);
IkReal x1592=(new_r11*sj5);
IkReal x1593=((1.0)*sj6);
IkReal x1594=((1.0)*cj6);
IkReal x1595=((1.0)*x1587);
IkReal x1596=(cj5*x1586);
evalcond[0]=(new_r20+((sj6*x1587)));
evalcond[1]=(new_r21+((sj6*x1586)));
evalcond[2]=(((cj5*new_r10))+x1586+(((-1.0)*new_r00*x1589)));
evalcond[3]=((((-1.0)*x1595))+((cj5*new_r11))+(((-1.0)*new_r01*x1589)));
evalcond[4]=(((cj5*new_r00))+x1588+(((-1.0)*x1587*x1594)));
evalcond[5]=(x1590+x1592+(((-1.0)*x1586*x1594)));
evalcond[6]=((((-1.0)*x1586*x1591))+new_r01+((sj5*x1587)));
evalcond[7]=((((-1.0)*cj6*x1587*x1589))+x1596+new_r10);
evalcond[8]=((((-1.0)*x1591*x1595))+new_r00+(((-1.0)*x1586*x1589)));
evalcond[9]=((((-1.0)*cj5*x1595))+(((-1.0)*cj6*x1586*x1589))+new_r11);
evalcond[10]=((((-1.0)*x1595))+(((-1.0)*new_r20*x1593))+((new_r00*x1591))+((cj6*x1588)));
evalcond[11]=((((-1.0)*new_r21*x1593))+((cj6*x1590))+((cj6*x1592))+(((-1.0)*x1586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j7;
vinfos[6].indices[0] = _ij7[0];
vinfos[6].indices[1] = _ij7[1];
vinfos[6].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "a1294697ceaf4ca2c539babedae5c2ab"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

// start python bindings
// https://github.com/caelan/ss-pybullet/blob/c5efe7ad32381a7a7a15c2bd147b5a8731d21342/pybullet_tools/ikfast/pr2/left_arm_ik.cpp#L12972
// https://github.com/yijiangh/conrob_pybullet/blob/master/utils/ikfast/kuka_kr6_r900/ikfast0x1000004a.Transform6D.0_1_2_3_4_5.cpp#L9923

static PyObject *get_ik(PyObject *self, PyObject *args)
{
    IkSolutionList<IkReal> solutions;

    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9], eetrans[3];

    // First list if 3x3 rotation matrix, easier to compute in Python.
    // Next list is [x, y, z] translation matrix.
    // Last list is free joints.
    PyObject *rotList; // 3x3 rotation matrix
    PyObject *transList; // [x,y,z]
    PyObject *freeList; // can be empty

    // format 'O!': pass C object pointer with the pointer's address.
    if(!PyArg_ParseTuple(args, "O!O!O!", &PyList_Type, &rotList, &PyList_Type, &transList, &PyList_Type, &freeList))
    {
        fprintf(stderr,"Failed to parse input to python objects\n");
        return NULL;
    }

    for(std::size_t i = 0; i < 3; ++i)
    {
        eetrans[i] = PyFloat_AsDouble(PyList_GetItem(transList, i));

        PyObject* rowList = PyList_GetItem(rotList, i);
        for( std::size_t j = 0; j < 3; ++j)
        {
            eerot[3*i + j] = PyFloat_AsDouble(PyList_GetItem(rowList, j));
        }
    }

    for(int i = 0; i < GetNumFreeParameters(); ++i)
    {
        vfree[i] = PyFloat_AsDouble(PyList_GetItem(freeList, i));
    }

    // call ikfast routine
    bool bSuccess = ComputeIk(eetrans, eerot, &vfree[0], solutions);

    if (!bSuccess)
    {
        //fprintf(stderr,"Failed to get ik solution\n");
        return Py_BuildValue(""); // Equivalent to returning None in python
    }

    std::vector<IkReal> solvalues(GetNumJoints());
    PyObject *solutionList = PyList_New(solutions.GetNumSolutions());

    // convert all ikfast solutions into a python list
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);

        PyObject *individualSolution = PyList_New(GetNumJoints());
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            // I think IkReal is just a wrapper for double. So this should work.
            PyList_SetItem(individualSolution, j, PyFloat_FromDouble(solvalues[j]));
        }
        PyList_SetItem(solutionList, i, individualSolution);
    }

    return solutionList;
}

static PyObject *get_fk(PyObject *self, PyObject *args)
{
    std::vector<IkReal> joints(GetNumJoints());
    // eerot is a flattened 3x3 rotation matrix
    IkReal eerot[9], eetrans[3];

    PyObject *jointList;
    if(!PyArg_ParseTuple(args, "O!", &PyList_Type, &jointList))
    {
        return NULL;
    }

    for(std::size_t i = 0; i < GetNumJoints(); ++i)
    {
        joints[i] = PyFloat_AsDouble(PyList_GetItem(jointList, i));
    }

    // call ikfast routine
    ComputeFk(&joints[0], eetrans, eerot);

    // convert computed EE pose to a python object
    PyObject *pose = PyList_New(2);
    PyObject *pos = PyList_New(3);
    PyObject *rot = PyList_New(3);

    for(std::size_t i = 0; i < 3; ++i)
    {
        PyList_SetItem(pos, i, PyFloat_FromDouble(eetrans[i]));

        PyObject *row = PyList_New(3);
        for( std::size_t j = 0; j < 3; ++j)
        {
            PyList_SetItem(row, j, PyFloat_FromDouble(eerot[3*i + j]));
        }
        PyList_SetItem(rot, i, row);
    }

    PyList_SetItem(pose, 0, pos);
    PyList_SetItem(pose, 1, rot);

    return pose;
}

static PyMethodDef ikfast_methods[] =
{
    {"get_ik", get_ik, METH_VARARGS, "Compute ik solutions using ikfast."},
    {"get_fk", get_fk, METH_VARARGS, "Compute fk solutions using ikfast."},
    {NULL, NULL, 0, NULL}
    // Not sure why/if this is needed. It shows up in the examples though(something about Sentinel).
};

#if PY_MAJOR_VERSION >= 3

static struct PyModuleDef ikfast_tiago_arm_module = {
    PyModuleDef_HEAD_INIT,
    "ikfast_tiago_arm",   /* name of module */
    NULL, /* module documentation, may be NULL */
    -1,       /* size of per-interpreter state of the module,
                 or -1 if the module keeps state in global variables. */
    ikfast_methods
};

#define INITERROR return NULL

PyMODINIT_FUNC
PyInit_ikfast_tiago_arm(void)

#else // PY_MAJOR_VERSION < 3
#define INITERROR return

PyMODINIT_FUNC
initikfast_tiago_arm(void)
#endif
{
#if PY_MAJOR_VERSION >= 3
    PyObject *module = PyModule_Create(&ikfast_tiago_arm_module);
#else
    PyObject *module = Py_InitModule("ikfast_tiago_arm", ikfast_methods);
#endif

if (module == NULL)
    INITERROR;

#if PY_MAJOR_VERSION >= 3
    return module;
#endif
}

// end python bindings
